name: ci

on:
  schedule:
    - cron: '0 10 * * *' # everyday at 10am
  push:
    branches:
      - main
      - develop
    tags:
      - '*.*.*'
  pull_request:

env:
  node_version: 12.x
  # github.event.repository.clone_url not available for on: schedule
  clone_url: https://github.com/Sage-Bionetworks/submission-schemas.git
  # github.event.repository.default_branch not available for on: schedule
  default_branch: main

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ env.node_version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.node_version }}
    - run: npm install
    - name: Lint openapi specifications
      run: npm run lint:ibm

  build-and-publish:
    needs: [lint]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Prepare
      id: prep
      run: |
        # gh-openapi-docs uses the branch name "undefined" when it does not find
        # the name of the current branch
        BRANCH=undefined
        VERSION=noop
        PUSH=false
        if [ "${{ github.event_name }}" = "schedule" ]; then
          BRANCH=${{ env.default_branch }}
          VERSION=nightly
          PUSH=TRUE
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          BRANCH=${GITHUB_REF#refs/heads/}
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
            VERSION=edge
            PUSH=true
          elif [ "develop" = "$VERSION" ]; then
            # If the branch develop is the default branch, the doc will be pushed
            # to the folder edge but not the folder develop..
            PUSH=true
          fi
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
          PUSH=false
        fi
        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          MINOR=${VERSION%.*}
          MAJOR=${MINOR%.*}
          PUSH=true
        fi
        echo ::set-output name=branch::${BRANCH}
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=version_major::${MAJOR}
        echo ::set-output name=version_minor::${MINOR}
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        echo ::set-output name=push::${PUSH}
    - name: Use Node.js ${{ env.node_version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.node_version }}
    - run: npm install
    - name: Create openapi docs
      run: npx gh-openapi-docs-ts
    - name: Commit doc changes
      run: |
        git clone ${{ env.clone_url }} \
          --branch gh-pages --single-branch gh-pages

        # Update gh-pages: version specified
        TARGET_DIR=gh-pages/${{ steps.prep.outputs.version }}
        mkdir -p ${TARGET_DIR}
        cp -R preview/${{ steps.prep.outputs.branch }}/* ${TARGET_DIR}

        # Update gh-pages: latest, major, and minor versions
        if [ ! -z "${{ steps.prep.outputs.version_major }}" ]; then
          # Update major version (e.g. "1.2.3" => "1")
          TARGET_DIR=gh-pages/latest
          mkdir -p ${TARGET_DIR}
          cp -R preview/${{ steps.prep.outputs.branch }}/* ${TARGET_DIR}

          # Update major version (e.g. "1.2.3" => "1")
          TARGET_DIR=gh-pages/${{ steps.prep.outputs.version_major }}
          mkdir -p ${TARGET_DIR}
          cp -R preview/${{ steps.prep.outputs.branch }}/* ${TARGET_DIR}

          # Update minor version (e.g. "1.2.3" => "1.2")
          TARGET_DIR=gh-pages/${{ steps.prep.outputs.version_minor }}
          mkdir -p ${TARGET_DIR}
          cp -R preview/${{ steps.prep.outputs.branch }}/* ${TARGET_DIR}
        fi

        cd gh-pages
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update documentation" -a || true
        # The above command will fail if no changes were present, so we ignore
        # that.
    - name: Push changes
      if: steps.prep.outputs.push == 'true'
      uses: ad-m/github-push-action@master
      with:
        branch: gh-pages
        directory: gh-pages
        github_token: ${{ secrets.GITHUB_TOKEN }}
        force: true