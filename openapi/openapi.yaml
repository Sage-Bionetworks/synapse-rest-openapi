openapi: 3.0.1
info:
  title: Platform Repository Service
  contact:
    email: thomas.yu@sagebionetworks.org
  license:
    name: Apache-2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  description: |
    Platform Repository Service - Sage Bionetworks Platform
  version: develop-SNAPSHOT
servers:
  - url: https://repo-prod.prod.sagebase.org/repo/v1
tags:
  - name: Access Approval Services
    description: |
      The Access Approval services manage the fulfillment of Access Requirements,
      on a per-user basis.
  - name: Access Requirement Services
    description: |
      These services manage the Access Requirements/Restrictions (ARs) which may be placed on Entities,
      or Teams.
  # - name: Activity Services
  #   description: "."
  # - name: Administration Services
  #   description: Since this controller is for internal use only we removed the ControllerInfo
  #     annotation.
  # - name: Asynchronous Job Services
  #   description: |
  #     This is a generic set of services that provides support for both launching
  #     asynchronous jobs and monitoring the progress of jobs.
  - name: Certified User Services
    description: |
      To become a Synapse Certified User you must pass a test.
      The Synapse APIs include a service to provide the test and a service to
      submit a test result. There are also administrative services to retrieve
      the history of test submissions.
  - name: Challenge Services
    description: |
      A Challenge is a special object that supplements a project, providing additional features
      specific to challenges.
  # - name: Data Access Services
  #   description: "."
  - name: Discussion Services
    description: |
      Discussions in Synapse are captured in the Project's Forum.
      Each Project has a Forum. Each Forum has a set of Moderators.
      The Moderators manage the content of the Forum.
  # - name: Docker Authorization Services
  #   description: These services allow Synapse to act as an authorization service for
  #     a Docker Registry.
  - name: Docker Commit Services
    description: |
      These services relate to the 'commits' to Docker repositories.
      Note that create, update and delete of the Docker repositories themselves
      are done using the Entity Services, for external/unmanaged repositories,
      or by direct integration with the Docker registry, for managed Docker
      repositories. Tagged commits for both managed and external/unmanaged repositories
      may be retrieved using the 'listDockerTags' API included in this service.
  # - name: Docker Registry Event Services
  #   description: These services process events from the Docker Registry.
  - name: Doi Services
    description: Provides REST APIs for managing Synapse DOIs.
  # - name: Entity Bundle Services
  #   description: "."
  - name: Entity Bundle V2 Services
    description: |
      The Entity Bundle Services provide bundled access to Entities and their related data components.
      An EntityBundle can be used to create, fetch, or update an Entity and associated objects
      with a single web service request.
  - name: Entity Services
    description: |
      All data in Synapse is organize into Projects. These Projects can be further organized
      into hierarchical Folders. Finally, the data is then represented by FileEntities or
      Records (coming soon) that reside within Folders or directly within Projects.
      All these objects (Projects, Folders, FileEntities, and Records) are derived from
      a common object called Entity. The Entity Services provide the means to create, read,
      update, and delete Synapse Entities. There are also services for navigating the Entity
      hierarchies, setting Authorization rules, and Annotating Entities.
  - name: Evaluation Services
    description: |
      The Evaluation API is designed to support open-access data analysis and modeling
      challenges in Synapse. This framework provides tools for administrators to collect
      and analyze data models from Synapse users created for a specific goal or purpose.
  # - name: Form Services
  #   description: Collection of APIs from managing and submitting form data.
  # - name: Health Check Services
  # - name: Json Schema Services
  #   description: |
  #     This set of services provide project designers with tools to define their own
  #     schemas to control and validate metadata applied to Projects, Folders, and
  #     Files.
  # - name: Log Services
  #   description: https://sagebionetworks.
  - name: Membership Invitation Services
    description: |
      The Membership Invitation Services create, retrieve and delete
      membership invitations.
  - name: Membership Request Services
    description: |
      The Membership Request Services create, retrieve and delete
      membership requests.
  - name: Message Services
    description: |
      Provides REST APIs for sending messages to other Synapse users and
      for commenting on Synapse entities.
  # - name: Migration Services
  #   description: Services for Migrating data between stacks.
  # - name: Principal Services
  #   description: A.
  # - name: Project Settings Services
  #   description: The project settings services provide configuration options that can
  #     be applied to projects.
  # - name: Search Services
  #   description: Search for Entities on Synapse.
  # - name: Statistics Services
  #   description: Services that expose statistics computed by the backend.
  # - name: Storage Report Services
  #   description: Provides REST APIs for generating Storage Reports.
  # - name: Subscription Services
  #   description: "."
  # - name: Synapse Version Info Services
  - name: Table Services
    description: |
      A Synapse TableEntity model object represents the metadata of a table.
      Each TableEntity is defined by a list of ColumnModel IDs. Use POST /column
      to create new ColumnModel objects. Each ColumnModel object is immutable,
      so to change a column of a table a new column must be added and the old column
      must be removed. TableEntities can be created, updated, read and deleted like
      any other entity.
  - name: Team Services
    description: Teams are groups of users.
  - name: Trash Services
    description: |
      The recycle bin (or trash can) is the special folder that holds the
      deleted entities for users.
  # - name: User Group Service
  - name: User Profile Services
    description: Every Synapse user has an associated User Profile
  # - name: V2 Wiki Services
  #   description: "."
  # - name: Verification Services
  #   description: |
  #     Identity verification is a service offered by the Synapse Access and Compliance Team
  #     to add an additional layer of legitimacy to a user account, beyond the basic
  #     requirements for creating an account in Synapse.
  # - name: Wiki Services
  #   description: "."
paths:
  /challenge:
    $ref: paths/challenge.yaml
  /challenge/{challengeId}:
    $ref: paths/challenge@{challengeId}.yaml
  /challenge/{challengeId}/challengeTeam:
    $ref: paths/challenge@{challengeId}@challengeTeam.yaml
  /challenge/{challengeId}/challengeTeam/{challengeTeamId}:
    $ref: paths/challenge@{challengeId}@challengeTeam@{challengeTeamId}.yaml
  /challenge/{challengeId}/participant:
    $ref: paths/challenge@{challengeId}@participant.yaml
  /challenge/{challengeId}/registratableTeam:
    $ref: paths/challenge@{challengeId}@registratableTeam.yaml
  /challenge/{challengeId}/submissionTeams:
    $ref: paths/challenge@{challengeId}@submissionTeams.yaml
  /challengeTeam/{challengeTeamId}:
    $ref: paths/challengeTeam@{challengeTeamId}.yaml
  /doi:
    $ref: paths/doi.yaml
  /doi/association:
    $ref: paths/doi@association.yaml
  /doi/async/start:
    $ref: paths/doi@async@start.yaml
  /doi/async/get/{asyncToken}:
    $ref: paths/doi@async@get@{asyncToken}.yaml
  /doi/locate:
    $ref: paths/doi@locate.yaml
  /entity:
    $ref: paths/entity@.yaml
  /entity/{id}:
    $ref: paths/entity@{id}.yaml
  /entity/{id}/access:
    $ref: paths/entity@{id}@access.yaml
  /entity/{id}/accessRequirement:
    $ref: paths/entity@{id}@accessRequirement.yaml
  /entity/{id}/acl:
    $ref: paths/entity@{id}@acl.yaml
  /entity/{id}/annotations2:
    $ref: paths/entity@{id}@annotations2.yaml
  /entity/{id}/benefactor:
    $ref: paths/entity@{id}@benefactor.yaml
  /entity/{id}/bundle2:
    $ref: paths/entity@{id}@bundle2.yaml
  /entity/{id}/challenge:
    $ref: paths/entity@{id}@challenge.yaml
  /entity/{id}/column:
    $ref: paths/entity@{id}@column.yaml
  /entity/{id}/datatype:
    $ref: paths/entity@{id}@datatype.yaml
  /entity/{id}/dockerCommit:
    $ref: paths/entity@{id}@dockerCommit.yaml
  /entity/{id}/dockerTag:
    $ref: paths/entity@{id}@dockerTag.yaml
  /entity/{id}/evaluation:
    $ref: paths/entity@{id}@evaluation.yaml
  /entity/{id}/filehandles:
    $ref: paths/entity@{id}@filehandles.yaml
  /entity/{id}/filepreview:
    $ref: paths/entity@{id}@filepreview.yaml
  /entity/{id}/generatedBy:
    $ref: paths/entity@{id}@generatedBy.yaml
  /entity/{id}/json:
    $ref: paths/entity@{id}@json.yaml
  /entity/{id}/lockAccessRequirement:
    $ref: paths/entity@{id}@lockAccessRequirement.yaml
  /entity/{id}/message:
    $ref: paths/entity@{id}@message.yaml
  /entity/{id}/path:
    $ref: paths/entity@{id}@path.yaml
  /entity/{id}/permissions:
    $ref: paths/entity@{id}@permissions.yaml
  /entity/{id}/schema/binding:
    $ref: paths/entity@{id}@schema@binding.yaml
  /entity/{id}/schema/validation:
    $ref: paths/entity@{id}@schema@validation.yaml
  /entity/{id}/schema/validation/invalid:
    $ref: paths/entity@{id}@schema@validation@invalid.yaml
  /entity/{id}/schema/validation/statistics:
    $ref: paths/entity@{id}@schema@validation@statistics.yaml
  /entity/{id}/sts:
    $ref: paths/entity@{id}@sts.yaml
  /entity/{id}/table/column/{columnId}/row/{rowId}/version/{versionNumber}/file:
    $ref: paths/entity@{id}@table@column@{columnId}@row@{rowId}@version@{versionNumber}@file.yaml
  /entity/{id}/table/column/{columnId}/row/{rowId}/version/{versionNumber}/filepreview:
    $ref: paths/entity@{id}@table@column@{columnId}@row@{rowId}@version@{versionNumber}@filepreview.yaml
  /entity/{id}/table/download/csv/async/get/{asyncToken}:
    $ref: paths/entity@{id}@table@download@csv@async@get@{asyncToken}.yaml
  /entity/{id}/table/download/csv/async/start:
    $ref: paths/entity@{id}@table@download@csv@async@start.yaml
  /entity/{id}/table/filehandles:
    $ref: paths/entity@{id}@table@filehandles.yaml
  /entity/{id}/table/query/async/get/{asyncToken}:
    $ref: paths/entity@{id}@table@query@async@get@{asyncToken}.yaml
  /entity/{id}/table/query/async/start:
    $ref: paths/entity@{id}@table@query@async@start.yaml
  /entity/{id}/table/snapshot:
    $ref: paths/entity@{id}@table@snapshot.yaml
  /entity/{id}/table/transaction/async/get/{asyncToken}:
    $ref: paths/entity@{id}@table@transaction@async@get@{asyncToken}.yaml
  /entity/{id}/table/transaction/async/start:
    $ref: paths/entity@{id}@table@transaction@async@start.yaml
  /entity/{id}/threads:
    $ref: paths/entity@{id}@threads.yaml
  /entity/{id}/type:
    $ref: paths/entity@{id}@type.yaml
  /entity/{id}/version:
    $ref: paths/entity@{id}@version.yaml
  /entity/{id}/version/{versionNumber}:
    $ref: paths/entity@{id}@version@{versionNumber}.yaml
  /entity/{id}/version/{versionNumber}/annotations2:
    $ref: paths/entity@{id}@version@{versionNumber}@annotations2.yaml
  /entity/{id}/version/{versionNumber}/bundle2:
    $ref: paths/entity@{id}@version@{versionNumber}@bundle2.yaml
  /entity/{id}/version/{versionNumber}/filehandle:
    $ref: paths/entity@{id}@version@{versionNumber}@filehandle.yaml
  /entity/{id}/version/{versionNumber}/filehandles:
    $ref: paths/entity@{id}@version@{versionNumber}@filehandles.yaml
  /entity/{id}/version/{versionNumber}/filepreview:
    $ref: paths/entity@{id}@version@{versionNumber}@filepreview.yaml
  /entity/{id}/version/{versionNumber}/generatedBy:
    $ref: paths/entity@{id}@version@{versionNumber}@generatedBy.yaml
  /entity/alias/{alias}:
    $ref: paths/entity@alias@{alias}.yaml
  /entity/bundle2/create:
    $ref: paths/entity@bundle2@create.yaml
  /entity/child:
    $ref: paths/entity@child.yaml
  /entity/children:
    $ref: paths/entity@children.yaml
  /entity/header:
    $ref: paths/entity@header.yaml
  /entity/md5/{md5}:
    $ref: paths/entity@md5@{md5}.yaml
  /entity/threadcounts:
    $ref: paths/entity@threadcounts.yaml

  /evaluation:
    $ref: paths/evaluation.yaml
  /evaluation/{evalId}:
    $ref: paths/evaluation@{evalId}.yaml
  /evaluation/{evalId}/access:
    $ref: paths/evaluation@{evalId}@access.yaml
  /evaluation/{evalId}/acl:
    $ref: paths/evaluation@{evalId}@acl.yaml
  /evaluation/{evalId}/round:
    $ref: paths/evaluation@{evalId}@round.yaml
  /evaluation/{evalId}/round/{roundId}:
    $ref: paths/evaluation@{evalId}@round@{roundId}.yaml
  /evaluation/{evalId}/round/list:
    $ref: paths/evaluation@{evalId}@round@list.yaml
  /evaluation/{evalId}/statusBatch:
    $ref: paths/evaluation@{evalId}@statusBatch.yaml
  /evaluation/{evalId}/submission:
    $ref: paths/evaluation@{evalId}@submission.yaml
  /evaluation/{evalId}/submission/all:
    $ref: paths/evaluation@{evalId}@submission@all.yaml
  /evaluation/{evalId}/submission/bundle:
    $ref: paths/evaluation@{evalId}@submission@bundle.yaml
  /evaluation/{evalId}/submission/bundle/all:
    $ref: paths/evaluation@{evalId}@submission@bundle@all.yaml
  /evaluation/{evalId}/submission/count:
    $ref: paths/evaluation@{evalId}@submission@count.yaml
  /evaluation/{evalId}/submission/status/all:
    $ref: paths/evaluation@{evalId}@submission@status@all.yaml
  /evaluation/{evalId}/team/{id}/SubmissionEligibility:
    $ref: paths/evaluation@{evalId}@team@{id}@submissionEligibility.yaml
  /evaluation/acl:
    $ref: paths/evaluation@acl.yaml
  /evaluation/available:
    $ref: paths/evaluation@available.yaml
  /evaluation/name/{name}:
    $ref: paths/evaluation@name@{name}.yaml
  /evaluation/submission:
    $ref: paths/evaluation@submission.yaml
  /evaluation/submission/{subId}:
    $ref: paths/evaluation@submission@{subId}.yaml
  /evaluation/submission/{subId}/cancellation:
    $ref: paths/evaluation@submission@{subId}@cancellation.yaml
  /evaluation/submission/{subId}/file/{fileHandleId}:
    $ref: paths/evaluation@submission@{subId}@file@{fileHandleId}.yaml
  /evaluation/submission/{subId}/status:
    $ref: paths/evaluation@submission@{subId}@status.yaml
  /team:
    $ref: paths/team.yaml
  /teams:
    $ref: paths/teams.yaml
  /team/{id}:
    $ref: paths/team@{id}.yaml
  /team/{id}/accessApproval:
    $ref: paths/team@{id}@accessApproval.yaml
  /team/{id}/accessRequirement:
    $ref: paths/team@{id}@accessRequirement.yaml
  /team/{id}/acl:
    $ref: paths/team@{id}@acl.yaml
  /team/{id}/icon:
    $ref: paths/team@{id}@icon.yaml
  /team/{id}/icon/preview:
    $ref: paths/team@{id}@icon@preview.yaml
  /team/{id}/member/{principalId}:
    $ref: paths/team@{id}@member@{principalId}.yaml
  /team/{id}/member/{principalId}/membershipStatus:
    $ref: paths/team@{id}@member@{principalId}@membershipStatus.yaml
  /team/{id}/memberList:
    $ref: paths/team@{id}@memberList.yaml
  /team/{id}/openInvitation:
    $ref: paths/team@{id}@openInvitation.yaml
  /team/{id}/openRequest:
    $ref: paths/team@{id}@openRequest.yaml
  /team/acl:
    $ref: paths/team@acl.yaml
  /teamList:
    $ref: paths/teamList.yaml
  /teamMember:
    $ref: paths/teamMember.yaml
  /teamMembers/{id}:
    $ref: paths/teamMembers@{id}.yaml
  /teamMembers/count/{id}:
    $ref: paths/teamMembers@count@{id}.yaml
  /trashcan/purge/{id}:
    $ref: paths/trashcan@purge@{id}.yaml
  /trashcan/restore/{id}:
    $ref: paths/trashcan@restore@{id}.yaml
  /trashcan/restore/{id}/{parentId}:
    $ref: paths/trashcan@restore@{id}@{parentId}.yaml
  /trashcan/trash/{id}:
    $ref: paths/trashcan@trash@{id}.yaml
  /trashcan/view:
    $ref: paths/trashcan@view.yaml
  /user:
    $ref: paths/user.yaml
  /user/{id}/bundle:
    $ref: paths/user@{id}@bundle.yaml
  /user/{id}/certificationStatus:
    $ref: paths/user@{id}@certificationStatus.yaml
  /user/{id}/certifiedUserPassingRecord:
    $ref: paths/user@{id}@certifiedUserPassingRecord.yaml
  /user/{id}/memberList:
    $ref: paths/user@{id}@memberList.yaml
  /user/{id}/openInvitation:
    $ref: paths/user@{id}@openInvitation.yaml
  /user/{id}/openRequest:
    $ref: paths/user@{id}@openRequest.yaml
  /user/{id}/team:
    $ref: paths/user@{id}@team.yaml
  /user/{id}/team/id:
    $ref: paths/user@{id}@team@id.yaml
  /user/bundle:
    $ref: paths/user@bundle.yaml
  /userGroup:
    $ref: paths/userGroup.yaml
  /userGroupHeaders:
    $ref: paths/userGroupHeaders.yaml
  /userGroupHeaders/aliases:
    $ref: paths/userGroupHeaders@aliases.yaml
  /userGroupHeaders/batch:
    $ref: paths/userGroupHeaders@batch.yaml
  /userProfile:
    $ref: paths/userProfile.yaml
  /userProfile/{profileId}:
    $ref: paths/userProfile@{profileId}.yaml
  /userProfile/{profileId}/image:
    $ref: paths/userProfile@{profileId}@image.yaml
  /userProfile/{profileId}/image/preview:
    $ref: paths/userProfile@{profileId}@image@preview.yaml
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []