openapi: 3.0.1
info:
  title: Platform Repository Service
  contact:
    email: thomas.yu@sagebionetworks.org
  license:
    name: Apache-2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  description: |
    Platform Repository Service - Sage Bionetworks Platform
  version: develop-SNAPSHOT
servers:
  - url: https://repo-prod.prod.sagebase.org/repo/v1
tags:
  - name: Access Approval Services
    description: |
      The Access Approval services manage the fulfillment of Access Requirements,
      on a per-user basis.
  - name: Access Requirement Services
    description: |
      These services manage the Access Requirements/Restrictions (ARs) which may be placed on Entities,
      or Teams.
  # - name: Activity Services
  #   description: "."
  # - name: Administration Services
  #   description: Since this controller is for internal use only we removed the ControllerInfo
  #     annotation.
  # - name: Asynchronous Job Services
  #   description: |
  #     This is a generic set of services that provides support for both launching
  #     asynchronous jobs and monitoring the progress of jobs.
  # - name: Certified User Services
  #   description: To become a Synapse Certified User you must pass a test.
  - name: Challenge Services
    description: |
      A Challenge is a special object that supplements a project, providing additional features
      specific to challenges.
  # - name: Data Access Services
  #   description: "."
  # - name: Discussion Services
  #   description: "."
  # - name: Docker Authorization Services
  #   description: These services allow Synapse to act as an authorization service for
  #     a Docker Registry.
  # - name: Docker Commit Services
  #   description: These services relate to the 'commits' to Docker repositories.
  # - name: Docker Registry Event Services
  #   description: These services process events from the Docker Registry.
  - name: Doi Services
    description: Provides REST APIs for managing Synapse DOIs.
  # - name: Entity Bundle Services
  #   description: "."
  # - name: Entity Bundle V2 Services
  #   description: "."
  # - name: Entity Services
  #   description: "."
  - name: Evaluation Services
    description: |
      The Evaluation API is designed to support open-access data analysis and modeling
      challenges in Synapse. This framework provides tools for administrators to collect
      and analyze data models from Synapse users created for a specific goal or purpose.
  # - name: Form Services
  #   description: Collection of APIs from managing and submitting form data.
  # - name: Health Check Services
  # - name: Json Schema Services
  #   description: |
  #     This set of services provide project designers with tools to define their own
  #     schemas to control and validate metadata applied to Projects, Folders, and
  #     Files.
  # - name: Log Services
  #   description: https://sagebionetworks.
  - name: Membership Invitation Services
    description: |
      The Membership Invitation Services create, retrieve and delete
      membership invitations.
  # - name: Membership Request Services
  #   description: |
  #     The Membership Request Services create, retrieve and delete
  #     membership requests.
  # - name: Message Services
  #   description: "."
  # - name: Migration Services
  #   description: Services for Migrating data between stacks.
  # - name: Principal Services
  #   description: A.
  # - name: Project Settings Services
  #   description: The project settings services provide configuration options that can
  #     be applied to projects.
  # - name: Search Services
  #   description: Search for Entities on Synapse.
  # - name: Statistics Services
  #   description: Services that expose statistics computed by the backend.
  # - name: Storage Report Services
  #   description: Provides REST APIs for generating Storage Reports.
  # - name: Subscription Services
  #   description: "."
  # - name: Synapse Version Info Services
  # - name: Table Services
  #   description: "."
  - name: Team Services
    description: Teams are groups of users.
  - name: Trash Services
    description: |
      The recycle bin (or trash can) is the special folder that holds the
      deleted entities for users.
  # - name: User Group Service
  - name: User Profile Services
    description: Every Synapse user has an associated User Profile
  # - name: V2 Wiki Services
  #   description: "."
  # - name: Verification Services
  #   description: |
  #     Identity verification is a service offered by the Synapse Access and Compliance Team
  #     to add an additional layer of legitimacy to a user account, beyond the basic
  #     requirements for creating an account in Synapse.
  # - name: Wiki Services
  #   description: "."
paths:
  /challenge:
    $ref: paths/challenge.yaml
  /challenge/{challengeId}:
    $ref: paths/challenge@{challengeId}.yaml
  /challenge/{challengeId}/challengeTeam:
    $ref: paths/challenge@{challengeId}@challengeTeam.yaml
  /challenge/{challengeId}/challengeTeam/{challengeTeamId}:
    $ref: paths/challenge@{challengeId}@challengeTeam@{challengeTeamId}.yaml
  /challenge/{challengeId}/participant:
    $ref: paths/challenge@{challengeId}@participant.yaml
  /challenge/{challengeId}/registratableTeam:
    $ref: paths/challenge@{challengeId}@registratableTeam.yaml
  /challenge/{challengeId}/submissionTeams:
    $ref: paths/challenge@{challengeId}@submissionTeams.yaml
  /challengeTeam/{challengeTeamId}:
    $ref: paths/challengeTeam@{challengeTeamId}.yaml
  /doi:
    $ref: paths/doi.yaml
  /doi/association:
    $ref: paths/doi@association.yaml
  /doi/async/start:
    $ref: paths/doi@async@start.yaml
  /doi/async/get/{asyncToken}:
    $ref: paths/doi@async@get@{asyncToken}.yaml
  /doi/locate:
    $ref: paths/doi@locate.yaml
  /entity/{id}/challenge:
    $ref: paths/entity@{id}@challenge.yaml
  /evaluation:
    $ref: paths/evaluation.yaml
  /evaluation/{evalId}:
    $ref: paths/evaluation@{evalId}.yaml
  /evaluation/{evalId}/access:
    $ref: paths/evaluation@{evalId}@access.yaml
  /evaluation/{evalId}/acl:
    $ref: paths/evaluation@{evalId}@acl.yaml
  /evaluation/{evalId}/round:
    $ref: paths/evaluation@{evalId}@round.yaml
  /evaluation/{evalId}/round/{roundId}:
    $ref: paths/evaluation@{evalId}@round@{roundId}.yaml
  /evaluation/{evalId}/round/list:
    $ref: paths/evaluation@{evalId}@round@list.yaml
  /evaluation/{evalId}/statusBatch:
    $ref: paths/evaluation@{evalId}@statusBatch.yaml
  /evaluation/{evalId}/submission:
    $ref: paths/evaluation@{evalId}@submission.yaml
  /evaluation/{evalId}/submission/all:
    $ref: paths/evaluation@{evalId}@submission@all.yaml
  /evaluation/{evalId}/submission/bundle:
    $ref: paths/evaluation@{evalId}@submission@bundle.yaml
  /evaluation/{evalId}/submission/bundle/all:
    $ref: paths/evaluation@{evalId}@submission@bundle@all.yaml
  /evaluation/{evalId}/submission/count:
    $ref: paths/evaluation@{evalId}@submission@count.yaml
  /evaluation/{evalId}/submission/status/all:
    $ref: paths/evaluation@{evalId}@submission@status@all.yaml
  /evaluation/{evalId}/team/{id}/SubmissionEligibility:
    $ref: paths/evaluation@{evalId}@team@{id}@submissionEligibility.yaml
  /evaluation/acl:
    $ref: paths/evaluation@acl.yaml
  /evaluation/available:
    $ref: paths/evaluation@available.yaml
  /evaluation/name/{name}:
    $ref: paths/evaluation@name@{name}.yaml
  /evaluation/submission:
    $ref: paths/evaluation@submission.yaml
  /evaluation/submission/{subId}:
    $ref: paths/evaluation@submission@{subId}.yaml
  /evaluation/submission/{subId}/cancellation:
    $ref: paths/evaluation@submission@{subId}@cancellation.yaml
  /evaluation/submission/{subId}/file/{fileHandleId}:
    $ref: paths/evaluation@submission@{subId}@file@{fileHandleId}.yaml
  /evaluation/submission/{subId}/status:
    $ref: paths/evaluation@submission@{subId}@status.yaml
  /team:
    $ref: paths/team.yaml
  /teams:
    $ref: paths/teams.yaml
  /team/{id}:
    $ref: paths/team@{id}.yaml
  /team/{id}/accessApproval:
    $ref: paths/team@{id}@accessApproval.yaml
  /team/{id}/accessRequirement:
    $ref: paths/team@{id}@accessRequirement.yaml
  /team/{id}/acl:
    $ref: paths/team@{id}@acl.yaml
  /team/{id}/icon:
    $ref: paths/team@{id}@icon.yaml
  /team/{id}/icon/preview:
    $ref: paths/team@{id}@icon@preview.yaml
  /team/{id}/member/{principalId}:
    $ref: paths/team@{id}@member@{principalId}.yaml
  /team/{id}/member/{principalId}/membershipStatus:
    $ref: paths/team@{id}@member@{principalId}@membershipStatus.yaml
  /team/{id}/memberList:
    $ref: paths/team@{id}@memberList.yaml
  /team/{id}/openInvitation:
    $ref: paths/team@{id}@openInvitation.yaml
  /team/{id}/openRequest:
    $ref: paths/team@{id}@openRequest.yaml
  /team/acl:
    $ref: paths/team@acl.yaml
  /teamList:
    $ref: paths/teamList.yaml
  /teamMember:
    $ref: paths/teamMember.yaml
  /teamMembers/{id}:
    $ref: paths/teamMembers@{id}.yaml
  /teamMembers/count/{id}:
    $ref: paths/teamMembers@count@{id}.yaml
  /trashcan/purge/{id}:
    $ref: paths/trashcan@purge@{id}.yaml
  /trashcan/restore/{id}:
    $ref: paths/trashcan@restore@{id}.yaml
  /trashcan/restore/{id}/{parentId}:
    $ref: paths/trashcan@restore@{id}@{parentId}.yaml
  /trashcan/trash/{id}:
    $ref: paths/trashcan@trash@{id}.yaml
  /trashcan/view:
    $ref: paths/trashcan@view.yaml
  /user:
    $ref: paths/user.yaml
  /user/{id}/bundle:
    $ref: paths/user@{id}@bundle.yaml

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []