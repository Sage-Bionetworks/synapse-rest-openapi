openapi: 3.0.1
info:
  title: Platform Repository Service
  contact:
    email: thomas.yu@sagebionetworks.org
  license:
    name: Apache-2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  description: |
    Platform Repository Service - Sage Bionetworks Platform
  version: develop-SNAPSHOT
servers:
  - url: 'https://repo-prod.prod.sagebase.org/repo/v1'
tags:
  - name: Access Approval Services
    description: >
      The Access Approval services manage the fulfillment of Access
      Requirements,

      on a per-user basis.
  - name: Access Requirement Services
    description: >
      These services manage the Access Requirements/Restrictions (ARs) which may
      be placed on Entities,

      or Teams.
  - name: Certified User Services
    description: |
      To become a Synapse Certified User you must pass a test.
      The Synapse APIs include a service to provide the test and a service to
      submit a test result. There are also administrative services to retrieve
      the history of test submissions.
  - name: Challenge Services
    description: >
      A Challenge is a special object that supplements a project, providing
      additional features

      specific to challenges.
  - name: Discussion Services
    description: |
      Discussions in Synapse are captured in the Project's Forum.
      Each Project has a Forum. Each Forum has a set of Moderators.
      The Moderators manage the content of the Forum.
  - name: Docker Commit Services
    description: >
      These services relate to the 'commits' to Docker repositories.

      Note that create, update and delete of the Docker repositories themselves

      are done using the Entity Services, for external/unmanaged repositories,

      or by direct integration with the Docker registry, for managed Docker

      repositories. Tagged commits for both managed and external/unmanaged
      repositories

      may be retrieved using the 'listDockerTags' API included in this service.
  - name: Doi Services
    description: Provides REST APIs for managing Synapse DOIs.
  - name: Entity Bundle V2 Services
    description: >
      The Entity Bundle Services provide bundled access to Entities and their
      related data components.

      An EntityBundle can be used to create, fetch, or update an Entity and
      associated objects

      with a single web service request.
  - name: Entity Services
    description: >
      All data in Synapse is organize into Projects. These Projects can be
      further organized

      into hierarchical Folders. Finally, the data is then represented by
      FileEntities or

      Records (coming soon) that reside within Folders or directly within
      Projects.

      All these objects (Projects, Folders, FileEntities, and Records) are
      derived from

      a common object called Entity. The Entity Services provide the means to
      create, read,

      update, and delete Synapse Entities. There are also services for
      navigating the Entity

      hierarchies, setting Authorization rules, and Annotating Entities.
  - name: Evaluation Services
    description: >
      The Evaluation API is designed to support open-access data analysis and
      modeling

      challenges in Synapse. This framework provides tools for administrators to
      collect

      and analyze data models from Synapse users created for a specific goal or
      purpose.
  - name: Membership Invitation Services
    description: |
      The Membership Invitation Services create, retrieve and delete
      membership invitations.
  - name: Membership Request Services
    description: |
      The Membership Request Services create, retrieve and delete
      membership requests.
  - name: Message Services
    description: |
      Provides REST APIs for sending messages to other Synapse users and
      for commenting on Synapse entities.
  - name: Table Services
    description: >
      A Synapse TableEntity model object represents the metadata of a table.

      Each TableEntity is defined by a list of ColumnModel IDs. Use POST /column

      to create new ColumnModel objects. Each ColumnModel object is immutable,

      so to change a column of a table a new column must be added and the old
      column

      must be removed. TableEntities can be created, updated, read and deleted
      like

      any other entity.
  - name: Team Services
    description: Teams are groups of users.
  - name: Trash Services
    description: |
      The recycle bin (or trash can) is the special folder that holds the
      deleted entities for users.
  - name: User Profile Services
    description: Every Synapse user has an associated User Profile
paths:
  /challenge:
    post:
      tags:
        - Challenge Services
      summary: 'Create a Challenge object, associated with a Project.'
      description: >
        Create a Challenge object, associated with a Project.  A participant
        Team must

        be specified.  To create a Challenge one must have CREATE permission on
        the

        associated Project.
      operationId: createChallenge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Challenge'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
    get:
      tags:
        - Challenge Services
      summary: List the Challenges for which the given participant is registered.
      description: |
        List the Challenges for which the given participant is registered.
        To be in the returned list the caller must have READ permission on the
        project associated with the Challenge.
      operationId: listChallengesForParticipant
      parameters:
        - name: participantId
          in: query
          description: Synapse user id
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: Maximum number of results returned
          required: false
          schema:
            type: integer
            default: 10
            minimum: 10
            maximum: 100
        - name: offset
          in: query
          description: Index of the first result that must be returned
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengePagedResults'
  '/challenge/{challengeId}':
    parameters:
      - name: challengeId
        in: path
        description: The ID of the challenge.
        required: true
        schema:
          type: integer
    get:
      tags:
        - Challenge Services
      summary: Retrieve a Challenge given its ID.
      description: |
        Retrieve a Challenge given its ID.  To retrieve a
        Challenge one must have READ permission on the associated Project.
      operationId: getChallenge
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
    put:
      tags:
        - Challenge Services
      summary: Update a Challenge.
      description: |
        Update a Challenge.  The caller must have UPDATE permission on the
        project associated with the Challenge.  It is not permitted to
        change the project associated with a Challenge.
      operationId: updateChallenge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Challenge'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
    delete:
      tags:
        - Challenge Services
      summary: Delete a Challenge.
      description: |
        Delete a Challenge.  The caller must have DELETE permission on the
        project associated with the Challenge.
      operationId: deleteChallenge
      responses:
        '204':
          description: The resource was deleted successfully.
  '/challenge/{challengeId}/challengeTeam':
    parameters:
      - name: challengeId
        in: path
        description: The ID of the challenge.
        required: true
        schema:
          type: integer
    get:
      tags:
        - Challenge Services
      summary: List the Teams registered for a Challenge.
      description: >
        List the Teams registered for a Challenge.  You must have READ
        permission

        in the associated Project to make this request.
      operationId: listChallengeTeams
      parameters:
        - name: limit
          in: query
          description: Maximum number of results returned
          required: false
          schema:
            type: integer
            default: 10
            minimum: 10
            maximum: 100
        - name: offset
          in: query
          description: Index of the first result that must be returned
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeTeamPagedResults'
    post:
      tags:
        - Challenge Services
      summary: Register a Team with a Challenge.
      description: >
        Register a Team with a Challenge. You must be a member of the
        Challenge's

        participant Team (i.e. you must be already registered for the Challenge)

        and be an administrator on the Team being registered.
      operationId: createChallengeTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeTeam'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeTeam'
  '/challenge/{challengeId}/challengeTeam/{challengeTeamId}':
    parameters:
      - name: challengeId
        in: path
        description: The ID of the challenge.
        required: true
        schema:
          type: integer
      - name: challengeTeamId
        in: path
        required: true
        description: The ID of the challenge team.
        schema:
          type: integer
    put:
      tags:
        - Challenge Services
      summary: Update a Challenge Team.
      description: |
        Update a Challenge Team. You must be a member of the Challenge's
        participant Team (i.e. you must be already registered for the Challenge)
        and be an administrator on the associated Team.
      operationId: updateChallengeTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeTeam'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeTeam'
  '/challenge/{challengeId}/participant':
    parameters:
      - name: challengeId
        in: path
        description: The ID of the challenge.
        required: true
        schema:
          type: integer
    get:
      tags:
        - Challenge Services
      summary: List the participants registered for a Challenge.
      description: |-
        List the participants registered for a Challenge.
        The caller must have READ permission on the
        project associated with the Challenge.
      operationId: listParticipantsInChallenge
      parameters:
        - name: affiliated
          in: query
          description: >
            If affiliated=true, return just participants affiliated with some

            registered Team.  If false, return those not affiliated with any
            registered Team.

            If omitted return all participants.
          schema:
            type: boolean
        - name: limit
          in: query
          description: Maximum number of results returned
          required: false
          schema:
            type: integer
            default: 10
            minimum: 10
            maximum: 100
        - name: offset
          in: query
          description: Index of the first result that must be returned
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedIds'
  '/challenge/{challengeId}/registratableTeam':
    parameters:
      - name: challengeId
        in: path
        description: The ID of the challenge.
        required: true
        schema:
          type: integer
    get:
      tags:
        - Challenge Services
      summary: List the Teams that caller can register for the Challenge.
      description: >
        List the Teams that caller can register for the Challenge, i.e. Teams on
        which

        the caller is an administrator and which are not already registered.

        The caller must have READ permission on the

        project associated with the Challenge to make this request.
      operationId: listRegistratableTeams
      parameters:
        - name: limit
          in: query
          description: Maximum number of results returned
          required: false
          schema:
            type: integer
            default: 10
            minimum: 10
            maximum: 100
        - name: offset
          in: query
          description: Index of the first result that must be returned
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedIds'
  '/challenge/{challengeId}/submissionTeams':
    parameters:
      - name: challengeId
        in: path
        description: The ID of the challenge.
        required: true
        schema:
          type: integer
    get:
      tags:
        - Challenge Services
      summary: >-
        List the Teams under which the given submitter may submit to the
        Challenge.
      description: >
        List the Teams under which the given submitter may submit to the
        Challenge, i.e. the Teams on which

        the user is a member and which are registered for the Challenge.
      operationId: listSubmissionTeams
      parameters:
        - name: limit
          in: query
          description: Maximum number of results returned
          required: false
          schema:
            type: integer
            default: 10
            minimum: 10
            maximum: 100
        - name: offset
          in: query
          description: Index of the first result that must be returned
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedIds'
  '/challengeTeam/{challengeTeamId}':
    parameters:
      - name: challengeTeamId
        in: path
        required: true
        description: The ID of the challenge team.
        schema:
          type: integer
    delete:
      tags:
        - Challenge Services
      summary: De-register a Team from a Challenge.
      description: >
        De-register a Team from a Challenge. You must be a member of the
        Challenge's

        participant Team (i.e. you must be already registered for the Challenge)

        and be an administrator on the Team being de-registered.
      operationId: deleteChallengeTeam
      responses:
        '204':
          description: The resource was deleted successfully.
  /doi:
    get:
      description: >
        Retrieves the DOI for the object and its associated DOI metadata.

        Note: this call calls an external API, which may impact performance

        To just retrieve the DOI association, see: <a
        href="${GET.doi.association}">GET /doi/association</a>
      operationId: getDoiV2
      parameters:
        - description: The ID of the object to retrieve
          in: query
          name: id
          required: true
          schema:
            type: string
        - description: The type of the object
          in: query
          name: type
          required: true
          schema:
            $ref: '#/components/schemas/ObjectType'
        - description: The version number of the object
          in: query
          name: version
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doi'
          description: Success
      summary: Retrieves the DOI for the object and its associated DOI metadata.
      tags:
        - Doi Services
  /doi/association:
    get:
      description: >
        Retrieves the DOI for the object.

        Note: this call only retrieves the DOI association, if it exists. To
        retrieve

        the metadata for the object,

        see <a href="${GET.doi}">GET /doi</a>'
      operationId: getDoiAssociation
      parameters:
        - description: The ID of the object to retrieve
          in: query
          name: id
          required: true
          schema:
            type: string
        - description: The type of the object
          in: query
          name: type
          required: true
          schema:
            $ref: '#/components/schemas/ObjectType'
        - description: The version number of the object
          in: query
          name: version
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoiAssociation'
          description: Success
      summary: Retrieves the DOI for the object.
      tags:
        - Doi Services
  /doi/async/start:
    post:
      description: >
        Asynchronously creates or updates a DOI in Synapse, with input metadata.

        Retrieve the results with

        <a href="${GET.doi.async.get.asyncToken}">GET
        /doi/async/get/{asyncToken}</a>.

        This call may fail if the external

        DataCite API is down. If the failure is recoverable, it will retry
        automatically.'
      operationId: startCreateOrUpdateDoi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoiRequest'
        description: >
          A request containing a DOI and its metadata to associate with a
          Synapse

          object
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobId'
          description: Success
      summary: 'Asynchronously creates or updates a DOI in Synapse, with input metadata.'
      tags:
        - Doi Services
  '/doi/async/get/{asyncToken}':
    get:
      description: |
        Get the results of a call to POST /doi/async/start
      operationId: getCreateOrUpdateDoiResults
      parameters:
        - description: The async job token from the create/update call
          in: path
          name: asyncToken
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoiResponse'
          description: Success
      summary: Get the results of a call to POST /doi/async/start
      tags:
        - Doi Services
  /doi/locate:
    get:
      description: |
        Retrieves the Synapse web portal URL to the object entered.
        Note: This call does not check to see if the object exists in Synapse.
      operationId: locate
      parameters:
        - description: The ID of the object to retrieve
          in: query
          name: id
          required: true
          schema:
            type: string
        - description: Whether to return the URL or redirect to the URL
          in: query
          name: redirect
          schema:
            default: true
            type: boolean
        - description: The type of the object
          in: query
          name: type
          required: true
          schema:
            $ref: '#/components/schemas/ObjectType'
        - description: The version number of the object
          in: query
          name: version
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: Retrieves the Synapse web portal URL to the object entered.
      tags:
        - Doi Services
  /entity:
    post:
      description: >
        Create a new Entity. This method is used to create Projects, Folders,

        FileEntities and Records (coming soon). The passed request body should

        contain the following fields:


        <ul>


        <li>name - Give your new entity a Name. <b>Note:</b> A name must be
        unique

        within the given parent, similar to a file in a folder.</li>


        <li>parentId - The ID of the parent Entity, such as a Folder or Project.
        This

        field should be excluded when creating a Project.</li>


        <li>concreteType - Indicates the type of Entity to create. The value
        should

        be one of the following: org.sagebionetworks.repo.model.Project,

        org.sagebionetworks.repo.model.Folder, or

        org.sagebionetworks.repo.model.FileEntity</li>


        </ul>


        <p>


        Note: To create an Entity the caller must be granted the

        <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.CREATE</a>

        on the parent Entity. Any authenticated caller can

        create a new Project (with parentId=null).


        </p>


        <p>


        <b>Service Limits</b>


        <table border="1">


        <tr>


        <th>resource</th>


        <th>limit</th>


        </tr>


        <tr>


        <td>The maximum number of children for a single parent entity</td>


        <td>10 K</td>


        </tr>


        </table>


        </p>
      operationId: createEntity
      parameters:
        - description: >
            To track the Provenance of an Entity create, include the

            ID of the <a
            href="${org.sagebionetworks.repo.model.provenance.Activity}">Activity</a>

            that was created to track the change. For

            more information see: <a href="${POST.activity}">POST /activity</a>.

            You must be the creator of the <a
            href="${org.sagebionetworks.repo.model.provenance.Activity}">Activity</a>
            used here.'
          in: query
          name: generatedBy
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: Success
      summary: Create a new Entity.
      tags:
        - Entity Services
  '/entity/{id}':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    delete:
      description: >
        Moves an entity in the trash can, if the skipTrashCan is set to true

        will flag the entity for purge and it will be deleted as soon as
        possible.


        <p>


        Note: To delete an Entity the caller must be granted the


        <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.DELETE</a>
        on the Entity.


        </p>
      operationId: deleteEntity
      parameters:
        - description: |
            If true the entity will be flag for priority purge and
            deleted as soon as possible
          in: query
          name: skipTrashCan
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: false
      responses:
        '204':
          description: The resource has been deleted
      summary: Deletes an Entity
      tags:
        - Entity Services
    get:
      description: >
        Get an Entity using its ID.


        <p>

        Note: To get an Entity the caller must be granted the

        <a href="${org.sagebionetworks.repo.model.ACCESS_TYPE}"
        >ACCESS_TYPE.READ</a>

        on the Entity.


        </p>
      operationId: getEntity
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: Success
      summary: Get an Entity
      tags:
        - Entity Services
    put:
      description: >
        Update an entity.


        <p>


        If the Entity is a FileEntity and the dataFileHandleId fields is set to
        a new

        value, then a new version will automatically be created for this update
        if the

        MD5 of the new file handle does not match the MD5 of the existing file
        handle

        or if the file handles do not have an MD5 set. You can also force the
        creation of a

        new version using the newVersion parameter


        (see below).


        </p>


        <p>


        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle

        concurrent updates. Each time an Entity is updated a new etag will be
        issued

        to the Entity. When an update is request, Synapse will compare the etag
        of

        the passed Entity with the current etag of the Entity. If the etags do
        not

        match, then the update will be rejected with a PRECONDITION_FAILED (412)

        response. When this occurs the caller should get the latest copy of the

        Entity (see: <a href="${GET.entity.id}">GET /entity/{id}</a>) and
        re-apply

        any changes to the object, then re-attempt the Entity update. This
        ensure the

        caller has any changes applied by other users before applying their own

        changes.


        </p>


        <p>


        Note: To update an Entity the caller must be granted the

        <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.UPDATE</a>
        on the Entity.


        </p>


        <p>


        <b>Service Limits</b>


        <table border="1">


        <tr>


        <th>resource</th>


        <th>limit</th>


        </tr>


        <tr>


        <td>The maximum number of children for a single parent entity</td>


        <td>10 K</td>


        </tr>


        </table>


        </p>
      operationId: updateEntity
      parameters:
        - description: >
            To track the Provenance of an Entity update, include the

            ID of the <a
            href="${org.sagebionetworks.repo.model.provenance.Activity}">Activity</a>
            that was created to track the change. For

            more information see: <a href="${POST.activity}">POST /activity</a>.

            You must be the creator of the

            <a
            href="${org.sagebionetworks.repo.model.provenance.Activity}">Activity</a>
            used here.'
          in: query
          name: generatedBy
          schema:
            type: string
        - description: >
            To force the creation of a new version for a

            <a
            href="${org.sagebionetworks.repo.model.VersionableEntity}">versionable</a>

            entity such as a <a href=
            "${org.sagebionetworks.repo.model.FileEntity}">FileEntity</a>,

            include this optional parameter with a value set to true (i.e.
            newVersion=true).

            This parameter is ignored for entities of type


            <a href="${org.sagebionetworks.repo.model.table.Table}">Table</a>

            (See <a href="${POST.entity.id.table.snapshot}">POST
            /entity/{id}/table/snapshot</a>

            instead)
          in: query
          name: newVersion
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: Success
      summary: Update an entity.
      tags:
        - Entity Services
  '/entity/{id}/access':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Determine if the caller have a given permission on a given Entity.


        <p>


        A User's permission on an Entity is a calculation based several factors

        including the permission granted by the Entity's ACL and the User's
        group

        membership. There might also be extra requirement for an Entity, such as

        special terms-of-use or special restrictions for sensitive data. This
        means a

        client cannot accurately calculate a User's permission on an Entity
        simply by

        inspecting the Entity's ACL. Instead, all clients should use this method
        to

        get the calculated permission a User has on an Entity.

        </p>
      operationId: hasAccess
      parameters:
        - description: >
            The permission to check. Must be from: 

            <a
            href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE</a>'
          in: query
          name: accessType
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooleanResult'
          description: Success
      summary: Determine if the caller have a given permission on a given Entity.
      tags:
        - Entity Services
  '/entity/{id}/accessRequirement':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: |
        Retrieve paginated list of ALL Access Requirements associated with
        an entity.
      operationId: getEntityAccessRequirements
      parameters:
        - description: |
            Limits the size of the page returned. For example, a page size
            of 10 require limit = 10. The maximum limit for this call is 50.
          in: query
          name: limit
          schema:
            type: integer
            minimum: 10
            maximum: 50
        - description: >
            The index of the pagination offset. For a page size of 10, the

            first page would be at offset = 0, and the second page would be at
            offset =

            10.
          in: query
          name: offset
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfAccessRequirement'
          description: Success
      summary: >-
        Retrieve paginated list of ALL Access Requirements associated with an
        entity.
      tags:
        - Access Requirement Services
  '/entity/{id}/acl':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    delete:
      description: >
        Delete the Access Control List (ACL) for a given Entity.


        <p>


        By default, Entities such as FileEntity and Folder inherit their
        permission

        from their containing Project. For such Entities the Project is the
        Entity's

        'benefactor'. This permission inheritance can be overridden by creating
        an

        ACL for the Entity. When this occurs the Entity becomes its own
        benefactor

        and all permission are determined by its own ACL.


        </p>


        <p>


        If the ACL of an Entity is deleted, then its benefactor will
        automatically be

        set to its parent''s benefactor. The ACL for a Project cannot be
        deleted.


        </p>


        <p>


        Note: The caller must be granted

        <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.CHANGE_PERMISSIONS</a>

        on the Entity to call this method.


        </p>
      operationId: deleteEntityAcl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: false
      responses:
        '204':
          description: This resource has been deleted.
      summary: Delete the Access Control List (ACL) for a given Entity.
      tags:
        - Entity Services
    get:
      description: >
        Get the Access Control List (ACL) for a given entity.


        <p>

        Note: If this method is called on an Entity that is inheriting its
        permission

        from another Entity a NOT_FOUND (404) response will be generated. The
        error

        response message will include the Entity''s benefactor ID.

        </p>
      operationId: getEntityAcl
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessControlList'
          description: Success
      summary: Get the Access Control List (ACL) for a given entity.
      tags:
        - Entity Services
    post:
      description: >
        Create a new Access Control List (ACL), overriding inheritance.


        <p>

        By default, Entities such as FileEntity and Folder inherit their
        permission

        from their containing Project. For such Entities the Project is the
        Entity's

        'benefactor'. This permission inheritance can be overridden by creating
        an

        ACL for the Entity. When this occurs the Entity becomes its own
        benefactor

        and all permission are determined by its own ACL.


        </p>


        <p>


        If the ACL of an Entity is deleted, then its benefactor will
        automatically be

        set to its parent's benefactor.


        </p>


        <p>


        Note: The caller must be granted


        <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.CHANGE_PERMISSIONS</a>

        on the Entity to call this method.


        </p>
      operationId: createEntityAcl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessControlList'
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessControlList'
          description: Success
      summary: 'Create a new Access Control List (ACL), overriding inheritance.'
      tags:
        - Entity Services
    put:
      description: >
        Update an Entity's ACL.


        <p>


        Note: The caller must be granted


        <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.CHANGE_PERMISSIONS</a>

        on the Entity to call this method.


        </p>
      operationId: updateEntityAcl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessControlList'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessControlList'
          description: Success
      summary: Update an Entity's ACL.
      tags:
        - Entity Services
  '/entity/{id}/annotations2':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Get the annotations for an entity.


        <p>


        Note: The caller must be granted the

        <a href="${org.sagebionetworks.repo.model.ACCESS_TYPE}"
        >ACCESS_TYPE.READ</a>

        on the Entity, to get its annotations.


        </p>
      operationId: getEntityAnnotations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotations_v2'
          description: Success
      summary: Get the annotations for an entity.
      tags:
        - Entity Services
    put:
      description: >
        Update an Entity's annotations.


        <p>


        Note: The caller must be granted the

        <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.UPDATE</a>

        on the Entity, to update its annotations.

        </p>
      operationId: updateEntityAnnotations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Annotations_v2'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotations_v2'
          description: Success
      summary: Update an Entity's annotations.
      tags:
        - Entity Services
  '/entity/{id}/benefactor':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Get an Entity's benefactor.


        <p>


        The term 'benefactor' is used indicate which Entity an Entity inherits
        is ACL

        from. For example, a newly created Project will have its own ACL and

        therefore, it will be its own benefactor. A Folder will inherit its ACL
        (by

        default) from its containing Project so the Project will be the Folder's

        benefactor. This method will return the EntityHeader of an Entity's

        benefactor.

        </p>
      operationId: getEntityBenefactor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
          description: Success
      summary: Get an Entity's benefactor.
      tags:
        - Entity Services
  '/entity/{id}/bundle2':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    post:
      description: Get an entity and related data with a single POST.
      operationId: getEntityBundle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityBundleRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityBundle_v2'
          description: Success
      summary: Get an entity and related data with a single POST.
      tags:
        - Entity Bundle V2 Services
    put:
      description: |
        Update an entity and associated components with a single PUT.
        Specifically, this operation supports update of an Entity, its
        Annotations, and its ACL.
        Upon successful creation, an EntityBundle is returned containing the
        requested components, as defined by the partsMask in the request object.
      operationId: updateEntityBundle
      parameters:
        - in: query
          name: generatedBy
          description: Generated by
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityBundleCreate_v2'
        description: |
          The EntityBundleCreate object containing the Entity and Annotations
          to update.
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityBundle_v2'
          description: Success
      summary: Update an entity and associated components with a single PUT.
      tags:
        - Entity Bundle V2 Services
  '/entity/{id}/challenge':
    parameters:
      - name: id
        in: path
        description: Synapse Project id
        required: true
        schema:
          type: string
    get:
      tags:
        - Challenge Services
      summary: Retrieve a Challenge given the ID of its associated Project.
      description: >
        Retrieve a Challenge given the ID of its associated Project.  To
        retrieve a

        Challenge one must have READ permission on the Project.
      operationId: getChallengeByProjectId
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
  '/entity/{id}/column':
    parameters:
      - description: The ID of a Table.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Given the ID of a <a
        href="${org.sagebionetworks.repo.model.table.TableEntity}">TableEntity</a>,

        get its list of
        <ahref="${org.sagebionetworks.repo.model.table.ColumnModel}">ColumnModels</a>

        that are currently assigned to the table.


        <p>


        <b>Service Limits</b>


        <table border="1">


        <tr>


        <th>resource</th>


        <th>limit</th>


        </tr>


        <tr>


        <td>The maximum frequency this method can be called</td>


        <td>6 calls per minute</td>


        </tr>


        </table>


        </p>
      operationId: getColumnForTable
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedColumnModels'
          description: Success
      summary: Given the ID of a.
      tags:
        - Table Services
  '/entity/{id}/datatype':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    put:
      description: >
        Change the <a href="${org.sagebionetworks.repo.model.DataType}"
        >DataType</a>

        of the given entity. The entity's DataType controls how the entity can
        be

        accessed. For example, an entity's DataType must be set to 'open_data'
        in

        order for anonymous to be allowed to access its contents.


        <p>


        Note: The caller must be a member of the 'Synapse Access and Compliance
        Team'

        (id=464532) in order to change an Entity's type to 'OPEN_DATA'. The
        caller

        must be granted UPDATED on the Entity to change the its type to any
        other

        value.


        </p>'
      operationId: changeEntityDataType
      parameters:
        - in: query
          name: type
          required: true
          description: Type of data
          schema:
            enum:
              - OPEN_DATA
              - SENSITIVE_DATA
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataTypeResponse'
          description: Success
      summary: Change the.
      tags:
        - Entity Services
  '/entity/{id}/dockerCommit':
    parameters:
      - description: the ID of the Docker repository entity
        in: path
        name: id
        required: true
        schema:
          type: string
    post:
      description: >
        Add a commit (tag and digest) for an external/unmanaged Docker
        repository.

        (Commits for managed repositories are added via direct integration with
        the

        Synapse Docker registry.)
      operationId: addDockerCommit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerCommit'
        description: the new tag/digest pair for the repository
        required: false
      responses:
        '204':
          description: Success
      summary: >-
        Add a commit (tag and digest) for an external/unmanaged Docker
        repository.
      tags:
        - Docker Commit Services
  '/entity/{id}/dockerTag':
    parameters:
      - description: the ID of the Docker repository entity
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        List the tagged commits (tag/digest pairs) for the given Docker
        repository.  Only

        the most recent digest for each tag is returned since,

        following Docker's convention, a tag may be reassigned

        to a newer commit. The list may be sorted by date or tag.  The default
        is to sort

        by date, descending (newest first).'
      operationId: listDockerTags
      parameters:
        - in: query
          name: ascending
          description: Ascending
          schema:
            default: false
            type: boolean
        - description: 'pagination parameter, optional (default is 20)'
          in: query
          name: limit
          schema:
            default: 20
            type: integer
            minimum: 0
        - description: 'pagination parameter, optional (default is 0)'
          in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
        - in: query
          name: sort
          description: Sort results
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfDockerCommit'
          description: Success
      summary: >-
        List the tagged commits (tag/digest pairs) for the given Docker
        repository.
      tags:
        - Docker Commit Services
  '/entity/{id}/evaluation':
    parameters:
      - description: the ID of the project
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Gets Evaluations tied to a project.

        <b>Note:</b> The response will contain only those Evaluations on which
        the caller

        is granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ</a>

        permission, unless specified otherwise with the accessType parameter.
      operationId: getEvaluationsByContentSourcePaginated
      parameters:
        - description: >
            The type of access for the user to filter for, optional and defaults

            to <a
            href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ</a>
          in: query
          name: accessType
          schema:
            $ref: '#/components/schemas/ACCESS_TYPE'
        - description: |
            If 'true' then return only those evaluations with rounds defined
            and for which the current time is in one of the rounds.
          in: query
          name: activeOnly
          schema:
            default: false
            type: boolean
        - description: |
            an optional, comma-delimited list of evaluation IDs to which the
            response is limited
          in: query
          name: evaluationIds
          schema:
            type: string
        - description: |
            Limits the number of entities that will be fetched for this
            page. When null it will default to 10.
          in: query
          name: limit
          schema:
            default: 10
            type: integer
            minimum: 0
        - description: |
            The offset index determines where this page will start from.
            An index of 0 is the first entity. When null it will default
            to 0.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfEvaluation'
          description: Success
      summary: Gets Evaluations tied to a project.
      tags:
        - Evaluation Services
  '/entity/{id}/filehandles':
    parameters:
      - description: The ID of a File Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Get the FileHandles of the file currently associated with the current

        version of the Entity.


        <p>

        If a preview exists for the file then the handle of the preview and the
        file

        will be returned with this call.

        </p>
      operationId: getEntityFileHandles
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileHandleResults'
          description: Success
      summary: |
        Get the FileHandles of the file currently associated with the current
        version of the Entity.
      tags:
        - Entity Services
  '/entity/{id}/filepreview':
    parameters:
      - description: The ID of a File Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Get the URL of the preview file associated with the current version

        of a FileEntity.


        <p>

        Note: This call will result in a HTTP temporary redirect (307), to the
        actual

        file URL if the caller meets all of the download requirements.

        </p>
      operationId: getFilePreviewUrl
      parameters:
        - description: |
            When set to false, the URL will be returned as text/plain
            instead of redirecting.
          in: query
          name: redirect
          schema:
            type: boolean
        - in: query
          description: Status
          name: status
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: |
        Get the URL of the preview file associated with the current version of
        a FileEntity.
      tags:
        - Entity Services
  '/entity/{id}/generatedBy':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    delete:
      description: |
        Deletes the activity relationship for the current version of an
        Entity.
      operationId: deleteActivity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: false
      responses:
        '204':
          description: This resource has been deleted
      summary: Deletes the activity relationship for the current version of an Entity.
      tags:
        - Entity Services
    get:
      description: Get an existing activity for the current version of an Entity.
      operationId: getActivity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        description: Get an existing activity for the current version of an Entity.
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: Success
      summary: Get an existing activity for the current version of an Entity.
      tags:
        - Entity Services
    put:
      description: Sets the generatedBy relationship for the current version of an Entity.
      operationId: updateActivityForEntity
      parameters:
        - description: >
            The id of the activity to connect to the entity. You must

            be the creator of the

            <a
            href="${org.sagebionetworks.repo.model.provenance.Activity}">Activity</a>
            used here.'
          in: query
          name: generatedBy
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        description: >-
          Sets the generatedBy relationship for the current version of an
          Entity.
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: Success
      summary: Sets the generatedBy relationship for the current version of an Entity.
      tags:
        - Entity Services
  '/entity/{id}/json':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Get the raw JSON for the given entity. The resulting JSON can be used

        for the validation of a entity against a

        <a
        href="${org.sagebionetworks.repo.model.schema.JsonSchema}">JsonSchema</a>.


        <p>


        Note: The caller must be granted the

        <a href="${org.sagebionetworks.repo.model.ACCESS_TYPE}"
        >ACCESS_TYPE.READ</a>

        permission on the Entity.


        </p>
      operationId: getEntityJson
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONObject'
          description: Success
      summary: Get the raw JSON for the given entity.
      tags:
        - Entity Services
    put:
      description: >
        Update the annotations of an entity using the raw JSON of the entity.


        <p>


        See: <a href="${GET.entity.id.json}">GET entity/{id}/json</a> to get the
        JSON

        of an entity.


        </p>


        <p>

        Note: The caller must be granted the

        <a href="${org.sagebionetworks.repo.model.ACCESS_TYPE}"
        >ACCESS_TYPE.UPDATE and ACCESS_TYPE.READ</a>

        permission on the Entity.

        </p>'
      operationId: updateEntityWithJson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JSONObject'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONObject'
          description: Success
      summary: Update the annotations of an entity using the raw JSON of the entity.
      tags:
        - Entity Services
  '/entity/{id}/lockAccessRequirement':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    post:
      description: >
        Add a temporary access restriction that prevents access pending review

        by the Synapse Access and Compliance Team.

        This service may be used only by an administrator of the specified
        entity.
      operationId: createLockAccessRequirement
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequirement'
          description: Success
      summary: |
        Add a temporary access restriction that prevents access pending review
        by the Synapse ACT.
      tags:
        - Access Requirement Services
  '/entity/{id}/message':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    post:
      description: |
        Adds the owner of the given entity as an additional recipient of the
        message.
      operationId: sendMessageToEntityOwner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageToUser'
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageToUser'
          description: Success
      summary: >-
        Adds the owner of the given entity as an additional recipient of the
        message.
      tags:
        - Message Services
  '/entity/{id}/path':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Get the full path of an Entity as a List of EntityHeaders. The first

        EntityHeader will be the Root Entity, and the last EntityHeader will be
        the

        requested Entity.
      operationId: getEntityPath
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityPath'
          description: Success
      summary: Get the full path of an Entity as a List of EntityHeaders.
      tags:
        - Entity Services
  '/entity/{id}/permissions':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Get the list of permission that the caller has on a given Entity.


        A User's permission on an Entity is a calculation based several factors

        including the permission granted by the Entity's ACL and the User's
        group

        membership. There might also be extra requirement for an Entity, such as

        special terms-of-use or special restrictions for sensitive data. This
        means a

        client cannot accurately calculate a User's permission on an Entity
        simply by

        inspecting the Entity''s ACL. Instead, all clients should use this
        method to

        get the calculated permission a User has on an Entity.
      operationId: getUserEntityPermissions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntityPermissions'
          description: Success
      summary: Get the list of permission that the caller has on a given Entity.
      tags:
        - Entity Services
  '/entity/{id}/schema/binding':
    parameters:
      - in: path
        name: id
        description: The ID of an Entity.
        required: true
        schema:
          type: string
    delete:
      description: |
        Clear the bound JSON schema from this Entity. The schema will no longer
        be used to validate this Entity or its children.

        Note: The caller must be granted the DELETE permission on the Entity.
      operationId: clearBoundSchema
      responses:
        '204':
          description: The resource has been deleted
      summary: Clear the bound JSON schema from this Entity.
      tags:
        - Entity Services
    get:
      description: >
        Get information about a JSON schema bound to an Entity. Note: Any

        child Entity that does not have a bound schema will inherit the first
        bound schema

        found in its hierarchy.


        Note: The caller must be granted the READ permission on the Entity.
      operationId: getBoundJsonSchema
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchemaObjectBinding'
          description: Success
      summary: Get information about a JSON schema bound to an Entity.
      tags:
        - Entity Services
    put:
      description: >
        Bind a JSON schema to an Entity. The bound schema will be used to
        validate

        the Entity''s metadata (annotations). Any child Entity that does not
        have a

        bound schema will inherit the first bound schema found in its hierarchy.


        Only a single schema can be bound to an Entity at a time. If you have
        more

        than one schema to bind to an Entity you will need to create and bind a

        single composition schema using keywords such as 'anyOf', 'allOf' or
        'oneOf'

        that defines how the schemas should be used for validation.


        Note: The caller must be granted the UPDATE ermission on the Entity to
        bind.
      operationId: bindJsonSchemaToEntity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BindSchemaToEntityRequest'
        description: The request identifies the JSON schema to bind.
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchemaObjectBinding'
          description: Success
      summary: Bind a JSON schema to an Entity.
      tags:
        - Entity Services
  '/entity/{id}/schema/validation':
    parameters:
      - description: The ID of the Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Get the validation results of an Entity against its bound JSON schema.

        The validation of an Entity against its bound schema is automatic and
        eventually

        consistent. The validation results include the etag of the Entity at the
        time

        of the last validation. If the returned etag does not match the current
        etag

        of the Entity then the results should be considered out-of-date. If an
        Entity

        has not been validated for the first time, or if the Entity does not
        have a

        bound schema, this method will return a 404 (not-found). Keep checking
        for

        the latest validation results.


        Note: The caller must be granted the READ permission on the Entity.
      operationId: getEntitySchemaValidationResults
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResults'
          description: Success
      summary: Get the validation results of an Entity against its bound JSON schema.
      tags:
        - Entity Services
  '/entity/{id}/schema/validation/invalid':
    parameters:
      - description: The ID of the container Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    post:
      description: >
        Get a single page of invalid JSON schema validation results for a

        container Entity (Project or Folder). The validation of an Entity
        against its bound

        schema is automatic and eventually consistent. The validation results
        include

        the etag of the Entity at the time of the last validation. If the
        returned

        etag does not match the current etag of the Entity then the results
        should be

        considered out-of-date.


        Note: The caller must be granted the READ permission on the container
        Entity.

        The results will only include children that the caller has the READ
        permission on.
      operationId: getInvalidValidationResults
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListValidationResultsRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListValidationResultsResponse'
          description: Success
      summary: >
        Get a single page of invalid JSON schema validation results for a
        container

        Entity (Project or Folder).
      tags:
        - Entity Services
  '/entity/{id}/schema/validation/statistics':
    parameters:
      - description: The ID of the container Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Get the The summary statistics of the JSON schema validation results

        for a single container Entity such as a Project or Folder. Only direct
        children of

        the container are included in the results. The statistics include the
        total

        number of children in the container, and the counts for both the invalid
        and

        valid children. If an Entity has not been validated for the first time,
        or it

        does not have bound schema it will be counted as 'unknown'.


        The validation of an Entity against its bound schema is automatic and

        eventually consistent. Keep checking this method to get the latest
        validation

        statistics for the given container.


        Note: The caller must be granted the READ permission on the container
        Entity.

        The resulting statistics will only include children that the caller has
        the READ permission on.
      operationId: getEntitySchemaValidationStatistics
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationSummaryStatistics'
          description: Success
      summary: |
        Get the summary statistics of the JSON schema validation results for
        a single container Entity such as a Project or Folder.
      tags:
        - Entity Services
  '/entity/{id}/sts':
    parameters:
      - description: |
          The ID of the Folder with an STS-enabled storage location.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Gets the temporary S3 credentials from STS for the given entity. These

        credentials are only good for the bucket and base key specified by the

        returned credentials and expire 12 hours after this API is called.


        The specified entity must be a folder with an STS-enabled storage
        location.

        If that storage location is external storage, you may request read-only
        or

        read-write permissions. If that storage location is Synapse storage, you
        must

        request read-only permissions.
      operationId: getTemporaryCredentialsForEntity
      parameters:
        - description: |
            Read-only or read-write permissions.
          in: query
          name: permission
          required: true
          schema:
            enum:
              - read_only
              - read_write
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StsCredentials'
          description: Success
      summary: Gets the temporary S3 credentials from STS for the given entity.
      tags:
        - Entity Services
  '/entity/{id}/table/column/{columnId}/row/{rowId}/version/{versionNumber}/file':
    parameters:
      - in: path
        name: columnId
        description: The ID of the Table column
        required: true
        schema:
          type: string
      - description: The ID of the FileEntity to get.
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: path
        name: rowId
        description: The ID of the Table Row
        required: true
        schema:
          type: number
      - in: path
        name: versionNumber
        description: The version of the Table Row
        required: true
        schema:
          type: number
    get:
      description: |
        Get the actual URL of the file associated with a specific version
        of a row and file handle column.

        Note: This call will result in a HTTP temporary redirect (307), to the
        actual file URL if the caller meets all of the download requirements.
      operationId: fileRedirectUrlForRow
      parameters:
        - description: |
            When set to false, the URL will be returned as text/plain
            instead of redirecting.
          in: query
          name: redirect
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: |
        Get the actual URL of the file associated with a specific version of a
        row and file handle column.
      tags:
        - Table Services
  '/entity/{id}/table/column/{columnId}/row/{rowId}/version/{versionNumber}/filepreview':
    parameters:
      - in: path
        name: columnId
        description: The ID of the Table column
        required: true
        schema:
          type: string
      - description: The ID of the FileEntity to get.
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: path
        name: rowId
        description: The ID of the Table Row
        required: true
        schema:
          type: number
      - in: path
        name: versionNumber
        description: The version of the Table Row
        required: true
        schema:
          type: number
    get:
      description: |
        Get the preview URL of the file associated with a specific version
        of a row and file handle column.

        Note: This call will result in a HTTP temporary redirect (307), to the
        actual file URL if the caller meets all of the download requirements.
      operationId: filePreviewRedirectUrlForRow
      parameters:
        - description: |
            When set to false, the URL will be returned as text/plain
            instead of redirecting.
          in: query
          name: redirect
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: |
        Get the preview URL of the file associated with a specific version of
        a row and file handle column.
      tags:
        - Table Services
  '/entity/{id}/table/download/csv/async/get/{asyncToken}':
    parameters:
      - description: The ID of a TableEntity.
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: path
        description: Async Token
        name: asyncToken
        required: true
        schema:
          type: string
    get:
      description: >
        Asynchronously get the results of a csv download started with POST


        Note: When the result is not ready yet, this method will return a status

        code of 202 (ACCEPTED) and the response body will be a
        AsynchronousJobStatus
      operationId: csvDownloadAsyncGet
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadFromTableResult'
          description: Success
      summary: Asynchronously get the results of a csv download started with.
      tags:
        - Table Services
  '/entity/{id}/table/download/csv/async/start':
    parameters:
      - description: The ID of a TableEntity.
        in: path
        name: id
        required: true
        schema:
          type: string
    post:
      description: >
        Asynchronously start a csv download. Use the returned job id and 

        /entity/{id}/table/download/csv/async/get to get the results of the
        query
      operationId: csvDownloadAsyncStart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadFromTableRequest'
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobId'
          description: Success
      summary: Asynchronously start a csv download.
      tags:
        - Table Services
  '/entity/{id}/table/filehandles':
    parameters:
      - description: The ID of a TableEntity.
        in: path
        name: id
        required: true
        schema:
          type: string
    post:
      description: >
        This method is used to get file handle information for rows in a

        TableEntity. The columns in the passed in RowReferenceSet need to be

        FILEHANDLEID columns and the rows in the passed in RowReferenceSet need

        to exists (a 400 will be returned if a row ID is provided that does not

        actually exist). The order of the returned rows of file handles is the

        same as the order of the rows requested, and the order of the file

        handles in each row is the same as the order of the columns requested.


        Note: The caller must have the READ permission on the TableEntity to
        make this call.


        <b>Service Limits</b>


        <table border="1">


        <tr>


        <th>resource</th>


        <th>limit</th>


        </tr>


        <tr>


        <td>The maximum frequency this method can be called</td>


        <td>1 calls per second</td>


        </tr>


        </table>
      operationId: getFileHandles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowReferenceSet'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableFileHandleResults'
          description: Success
      summary: .
      tags:
        - Table Services
  '/entity/{id}/table/query/async/get/{asyncToken}':
    parameters:
      - in: path
        name: asyncToken
        description: Async Token
        required: true
        schema:
          type: string
      - description: The ID of the TableEntity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Asynchronously get the results of a query started with POST

        /entity/{id}/table/query/async/start


        Note: When the result is not ready yet, this method will return a status

        code of 202 (ACCEPTED) and the response body will be a
        AsynchronousJobStatus object.
      operationId: queryAsyncGet
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResultBundle'
          description: Success
      summary: Asynchronously get the results of a query started with.
      tags:
        - Table Services
  '/entity/{id}/table/query/async/start':
    parameters:
      - description: The ID of a TableEntity.
        in: path
        name: id
        required: true
        schema:
          type: string
    post:
      description: >
        Asynchronously start a query. Use the returned job id and GET

        /entity/{id}/table/query/async/get</a> to get the results of the query


        Using a 'SQL like' syntax, query the current version of the rows in a

        single table. The following pseudo-syntax is the basic supported format:



        SELECT <br>


        [ALL | DISTINCT] select_expr [, select_expr ...] <br>


        FROM synapse_table_id <br>


        [WHERE where_condition] <br>


        [GROUP BY {col_name [, [col_name * ...] } <br>


        [ORDER BY {col_name [ [ASC | DESC] [, col_name [ [ASC | DESC]]}<br>


        [LIMIT row_count [ OFFSET offset ]]<br>



        <p>


        Note: Sub-queries and joining tables is not supported.


        </p>


        <p>


        This services depends on an index that is created/update asynchronously

        from table creation and update events. This means there could be short

        window of time when the index is inconsistent with the true state of the

        table. When the index is out-of-synch, then a status code of 202

        (ACCEPTED) will be returned and the response body will be a TableStatus

        object. The TableStatus will indicates the current

        status of the index including how much work is remaining until the index

        is consistent with the truth of the table.


        The 'partsMask' is an integer "mask" that can be combined into to
        request

        any desired part. As of this writing, the mask is defined as follows
        QueryBundleRequest


        <ul>


        <li>Query Results <i>(queryResults)</i> = 0x1</li>


        <li>Query Count <i>(queryCount)</i> = 0x2</li>


        <li>Select Columns <i>(selectColumns)</i> = 0x4</li>


        <li>Max Rows Per Page <i>(maxRowsPerPage)</i> = 0x8</li>


        <li>The Table Columns <i>(columnModels)</i> = 0x10</li>


        <li>Facet statistics for each faceted column <i>(facetStatistics)</i> =
        0x20</li>


        <li>The sum of the file sizes <i>(sumFileSizesBytes)</i> = 0x40</li>


        </ul>


        </p>


        <p>


        For example, to request all parts, the request mask value should be:
        <br>

        0x1 OR 0x2 OR 0x4 OR 0x8 OR 0x10 OR 0x20 OR 0x40 = 0x7F.


        </p>


        <p>


        Note: The caller must have the READ permission on the TableEntity to
        make this call.


        </p>
      operationId: queryAsyncStart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryBundleRequest'
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobId'
          description: Success
      summary: Asynchronously start a query.
      tags:
        - Table Services
  '/entity/{id}/table/snapshot':
    parameters:
      - in: path
        description: The ID of a Table Entity.
        name: id
        required: true
        schema:
          type: string
    post:
      description: >
        Request to create a new snapshot of a table. The provided comment,

        label, and activity ID will be applied to the current version thereby
        creating a

        snapshot and locking the current version. After the snapshot is created
        a new

        version will be started with an 'in-progress' label.


        NOTE: This service is for TableEntity only. Snapshots of EntityView

        require asynchronous processing and can be created via:

        POST /entity/{id}/table/transaction/async/start
      operationId: createSnapshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnapshotRequest'
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotResponse'
          description: Success
      summary: Request to create a new snapshot of a table.
      tags:
        - Table Services
  '/entity/{id}/table/transaction/async/get/{asyncToken}':
    parameters:
      - description: The token returned when the job was started.
        in: path
        name: asyncToken
        required: true
        schema:
          type: string
      - description: The ID of a Table entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Asynchronously get the results of a table update transaction started

        with POST /entity/{id}/table/transaction/async/start</a>


        Note: When the result is not ready yet, this method will return a status

        code of 202 (ACCEPTED) and the response body will be a
        AsynchronousJobStatus object.
      operationId: getTableTransactionResult
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableUpdateTransactionResponse'
          description: Success
      summary: >-
        Asynchronously get the results of a table update transaction started
        with.
      tags:
        - Table Services
  '/entity/{id}/table/transaction/async/start':
    parameters:
      - description: The ID of a Table Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    post:
      description: >
        Start a table update job that will attempt to make all of the requested

        changes in a single transaction. All updates will either succeed or fail
        as a unit.  All

        update requests must be for the same table.


        <p>


        Note: The caller must have the UPDATE permission on the TableEntity to
        make this call.


        </p>


        <p>


        <b>Service Limits</b>


        <table border="1">


        <tr>


        <th>resource</th>


        <th>limit</th>


        </tr>


        <tr>


        <td>The maximum size of a PartialRow change </td>


        <td>2 MB</td>


        </tr>


        <tr>


        <td>The maximum size of a CSV that can be appended to a table</td>


        <td>1 GB</td>


        </tr>


        </table>


        </p>
      operationId: startTableTransactionJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableUpdateTransactionRequest'
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobId'
          description: Success
      summary: |
        Start a table update job that will attempt to make all of the requested
        changes in a single transaction.
      tags:
        - Table Services
  '/entity/{id}/threads':
    parameters:
      - description: The ID of an Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: |
        This API is used to get N number of threads that belongs to projects
        user can view and references the given entity.

        Target users: anyone who has READ permission to the entity.
      operationId: getThreadsForEntity
      parameters:
        - description: 'The direction of sort: true for ascending, and false for descending'
          in: query
          name: ascending
          schema:
            type: boolean
        - description: |
            Limits the size of the page returned. For example, a page size
            of 10 require limit = 10. The maximum Limit for this call is 20.'
          in: query
          name: limit
          schema:
            type: number
            default: 10
            minimum: 10
            maximum: 20
        - description: >
            The index of the pagination offset. For a page size of 10, the

            first page would be at offset = 0, and the second page would be at
            offset =

            10.'
          in: query
          name: offset
          schema:
            type: number
            default: 0
            minimum: 0
        - description: >
            The field to sort the resulting threads on. Available options
            DiscussionThreadOrder
          in: query
          name: sort
          schema:
            enum:
              - NUMBER_OF_REPLIES
              - NUMBER_OF_VIEWS
              - PINNED_AND_LAST_ACTIVITY
              - THREAD_TITLE
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfDiscussionThreadBundle'
          description: Success
      summary: >
        This API is used to get N number of threads that belongs to projects
        user

        can view and references the given entity.
      tags:
        - Discussion Services
  '/entity/{id}/type':
    parameters:
      - description: The ID of the Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Get the EntityHeader of an Entity given its ID. The EntityHeader is

        a light weight object with basic information about an Entity includes
        its type.
      operationId: getEntityType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
          description: Success
      summary: Get the EntityHeader of an Entity given its ID.
      tags:
        - Entity Services
  '/entity/{id}/version':
    parameters:
      - description: The ID of the Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: Get all versions of an Entity one page at a time.
      operationId: getAllVersionsOfEntity
      parameters:
        - description: |
            Limits the number of entities that will be fetched for
            this page. When null it will default to 10.
          in: query
          name: limit
          schema:
            default: 10
            type: integer
            minimum: 10
        - description: |
            The offset index determines where this page will start
            from. When null it will default to 0.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfVersionInfo'
          description: Success
      summary: Get all versions of an Entity one page at a time.
      tags:
        - Entity Services
  '/entity/{id}/version/{versionNumber}':
    parameters:
      - description: The ID of the Entity
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The version number of the Entity.
        in: path
        name: versionNumber
        required: true
        schema:
          type: integer
    delete:
      description: Delete a specific version of a FileEntity.
      operationId: deleteEntityVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: false
      responses:
        '204':
          description: The resource has been deleted.
      summary: Delete a specific version of a FileEntity.
      tags:
        - Entity Services
    get:
      description: >
        Get a specific version of an Entity.


        Note: Only the current version of the Entity can be used for an Entity

        update. Therefore, only the current version of the Entity will be
        returned

        with the actual etag. All older versions will be returned with an eTag

        '00000000-0000-0000-0000-000000000000'.
      operationId: getEntityForVersion
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: Success
      summary: Get a specific version of an Entity.
      tags:
        - Entity Services
  '/entity/{id}/version/{versionNumber}/annotations2':
    parameters:
      - description: The ID of the Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The version number of the Entity.
        in: path
        name: versionNumber
        required: true
        schema:
          type: integer
    get:
      description: Get an Entity's annotations for a specific version of a FileEntity.
      operationId: getEntityAnnotationsV2ForVersion
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotations_v2'
          description: Success
      summary: Get an Entity's annotations for a specific version of a FileEntity.
      tags:
        - Entity Services
  '/entity/{id}/version/{versionNumber}/bundle2':
    parameters:
      - description: The ID of the Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The version number of the Entity.
        in: path
        name: versionNumber
        required: true
        schema:
          type: integer
    post:
      description: >-
        Get an entity at a specific version and its related data with a single
        POST.
      operationId: getEntityBundle2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityBundleRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityBundle_v2'
          description: Success
      summary: |
        Get an entity at a specific version and its related data with a single
        POST.
      tags:
        - Entity Bundle V2 Services
  '/entity/{id}/version/{versionNumber}/filehandle':
    parameters:
      - description: The ID of the Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The version number of the Entity.
        in: path
        name: versionNumber
        required: true
        schema:
          type: integer
    put:
      description: |
        Updates the FileHandle associated with the FileEntity
        with the provided entity id and version.
      operationId: updateEntityFileHandle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileHandleUpdateRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: Updates the filehandle.
      tags:
        - Entity Services
  '/entity/{id}/version/{versionNumber}/filehandles':
    parameters:
      - description: The ID of the Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The version number of the Entity.
        in: path
        name: versionNumber
        required: true
        schema:
          type: integer
    get:
      description: >
        Get the FileHandles of the file associated with a specific version

        of a FileEntity.


        If a preview exists for the file then the handle of the preview and the
        file

        will be returned with this call.
      operationId: getEntityFileHandlesForVersion
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileHandleResults'
          description: Success
      summary: |
        Get the FileHandles of the file associated with a specific version of
        a FileEntity.
      tags:
        - Entity Services
  '/entity/{id}/version/{versionNumber}/filepreview':
    parameters:
      - description: The ID of the Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The version number of the Entity.
        in: path
        name: versionNumber
        required: true
        schema:
          type: integer
    get:
      description: >
        Get the URL of the preview file associated with a specific version

        of a FileEntity.


        Note: This call will result in a HTTP temporary redirect (307), to the
        actual

        file URL if the caller meets all of the download requirements.
      operationId: filePreviewRedirectUrlForVersion
      parameters:
        - description: |
            When set to false, the URL will be returned as
            text/plain instead of redirecting.
          in: query
          name: redirect
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: |
        Get the URL of the preview file associated with a specific version of
        a FileEntity.
      tags:
        - Entity Services
  '/entity/{id}/version/{versionNumber}/generatedBy':
    parameters:
      - description: The ID of the Entity.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The version number of the Entity.
        in: path
        name: versionNumber
        required: true
        schema:
          type: integer
    get:
      description: Get an existing activity for a specific version of an Entity.
      operationId: getActivityForEntityVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        description: Get an existing activity for a specific version of an Entity.
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: Success
      summary: Get an existing activity for a specific version of an Entity.
      tags:
        - Entity Services
  '/entity/alias/{alias}':
    parameters:
      - in: path
        name: alias
        description: Alias of an Entity
        required: true
        schema:
          type: string
    get:
      description: Lookup an Entity ID using an alias.
      operationId: getEntityIdByAlias
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityId'
          description: Success
      summary: Lookup an Entity ID using an alias.
      tags:
        - Entity Services
  /entity/bundle2/create:
    post:
      description: >
        Create an entity and associated components with a single POST.

        Specifically, this operation supports creation of an Entity, its

        Annotations, and its ACL.


        Upon successful creation, an EntityBundle is returned containing the

        requested components, as defined by the partsMask in the request
        object.'
      operationId: createEntityBundle2
      parameters:
        - in: query
          name: generatedBy
          description: Generated By
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityBundleCreate_v2'
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityBundle_v2'
          description: Success
      summary: Create an entity and associated components with a single POST.
      tags:
        - Entity Bundle V2 Services
  /entity/child:
    post:
      description: |
        Retrieve an entityId for a given parent ID and entity name. This service
        can also be used to lookup projectId by setting the parentId to NULL in
        EntityLookupRequest.
      operationId: lookupChild
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityLookupRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityId'
          description: Success
      summary: Retrieve an entityId for a given parent ID and entity name.
      tags:
        - Entity Services
  /entity/children:
    post:
      description: >
        Get a page of children for a given parent ID. This service can also

        be used to list projects by setting the parentId to NULL in
        EntityChildrenRequest.
      operationId: getChildren
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityChildrenRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityChildrenResponse'
          description: Success
      summary: Get a page of children for a given parent ID.
      tags:
        - Entity Services
  /entity/header:
    post:
      description: >
        Get the EntityHeader for a list of references with a POST. If any

        item in the batch fails (e.g., with a 404) it will be EXCLUDED in the
        result set.
      operationId: getEntityVersionedTypeBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferenceList'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfEntityHeader'
          description: Success
      summary: Get the EntityHeader for a list of references with a POST.
      tags:
        - Entity Services
  '/entity/md5/{md5}':
    parameters:
      - in: path
        description: File MD5
        name: md5
        required: true
        schema:
          type: string
    get:
      description: |
        Gets at most 200 FileEntities matching the given MD5 string which
        the user has read access to.
        NOTE: Another option is to create a file view that includes
        MD5 values. https://docs.synapse.org/articles/views.html
      operationId: getEntityHeaderByMd5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfEntityHeader'
          description: Success
      summary: |
        Gets FileEntities matching the given MD5 string which the
        user has read access to.
      tags:
        - Entity Services
  /entity/threadcounts:
    post:
      description: >
        This API is used to get list of entity and count pairs, with count

        is the number of threads that belong to projects user can view and
        references

        the given entity.


        Target users: anyone who has READ permission to the project.
      operationId: getThreadCounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityIdList'
        description: The requested list. Limit size 20.
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityThreadCounts'
          description: Success
      summary: >
        Get number of threads that belong to projects user can view and
        references

        the given entity.
      tags:
        - Discussion Services
  /entity/type:
    get:
      description: >
        Get a batch of EntityHeader given multile Entity IDs. The EntityHeader

        is a light weight object with basic information about an Entity includes
        its type.
      operationId: getEntityTypeBatch
      parameters:
        - description: |
            A comma separated list of Entity IDs to get EntityHeaders
            for.
          in: query
          name: batch
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfEntityHeader'
          description: Success
      summary: Get a batch of EntityHeader given multile Entity IDs.
      tags:
        - Entity Services
  /evaluation:
    get:
      description: >
        Gets a collection of Evaluations, within a given range.


        <p>


        <b>Note:</b> The response will contain only those Evaluations on which
        the caller

        is


        granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ</a>


        permission, unless specified otherwise with the accessType parameter.


        </p>
      operationId: getEvaluationsPaginated
      parameters:
        - name: accessType
          description: >
            The type of access for the user to filter for, optional and defaults

            to <a
            href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ</a>
          in: query
          schema:
            default: READ
            enum:
              - CHANGE_PERMISSIONS
              - CHANGE_SETTINGS
              - CREATE
              - DELETE
              - DELETE_SUBMISSION
              - DOWNLOAD
              - MODERATE
              - PARTICIPATE
              - READ
              - READ_PRIVATE_SUBMISSION
              - SEND_MESSAGE
              - SUBMIT
              - TEAM_MEMBERSHIP_UPDATE
              - UPDATE
              - UPDATE_SUBMISSION
              - UPLOAD
            type: string
        - name: activeOnly
          description: |
            If 'true' then return only those evaluations with rounds defined
            and for which the current time is in one of the rounds.
          in: query
          schema:
            default: false
            type: boolean
        - name: evaluationIds
          description: |
            an optional, comma-delimited list of evaluation IDs to which the
            response is limited
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results returned
          required: false
          schema:
            type: integer
            default: 10
            minimum: 10
            maximum: 100
        - name: offset
          in: query
          description: >
            The index of the pagination offset. For a page size of 10, the

            first page would be at offset = 0, and the second page would be at
            offset =

            10.
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfEvaluation'
          description: Success
      summary: 'Gets a collection of Evaluations, within a given range.'
      tags:
        - Evaluation Services
    post:
      description: >
        'Creates a new Evaluation. The passed request body should contain the

        following fields:


        <ul>


        <li>name - Give your new Evaluation a name.</li>


        <li>contentSource - The ID of the parent Entity, such as a Folder or
        Project.</li>


        <li>status - The initial state of the Evaluation, an


        <a
        href="${org.sagebionetworks.evaluation.model.EvaluationStatus}">EvaluationStatus</a></li>


        </ul>


        <p>


        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.CREATE</a>
        on the contentSource Entity.


        </p>
      operationId: createEvaluation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Evaluation'
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
          description: Success
      summary: Creates a new Evaluation.
      tags:
        - Evaluation Services
  '/evaluation/{evalId}':
    parameters:
      - description: The ID of the specified Evaluation.
        in: path
        name: evalId
        required: true
        schema:
          type: string
    delete:
      description: >
        Deletes an Evaluation.


        <p>


        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.DELETE</a>
        on the specified Evaluation.


        </p>
      operationId: deleteEvaluation
      responses:
        '204':
          description: The resource was deleted.
      summary: Deletes an Evaluation.
      tags:
        - Evaluation Services
    get:
      description: |
        Gets an Evaluation.


        <p>

        <b>Note:</b> The caller must be granted the <a

        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}"

        >ACCESS_TYPE.READ</a> on the specified Evaluation.

        </p>
      operationId: getEvaluation
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
          description: Success
      summary: Gets an Evaluation.
      tags:
        - Evaluation Services
    put:
      description: >
        'Updates an Evaluation.



        <p>


        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle


        concurrent updates. Each time an Evaluation is updated a new etag will
        be


        issued to the Evaluation. When an update is requested, Synapse will
        compare the


        etag of the passed Evaluation with the current etag of the Evaluation.
        If the


        etags do not match, then the update will be rejected with a


        PRECONDITION_FAILED (412) response. When this occurs, the caller should


        fetch the latest copy of the Evaluation and re-apply any changes, then
        re-attempt


        the Evaluation update.


        </p>



        <p>


        <b>Note:</b> The caller must be granted the <a


        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}"


        >ACCESS_TYPE.UPDATE</a> on the specified Evaluation.


        </p>
      operationId: updateEvaluation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Evaluation'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
          description: Success
      summary: Updates an Evaluation.
      tags:
        - Evaluation Services
  '/evaluation/{evalId}/access':
    parameters:
      - in: path
        name: evalId
        description: The ID of the specified Evaluation.
        required: true
        schema:
          type: string
    get:
      description: >
        Determines whether the logged in user has a certain

        <a href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE</a>
        on the specified Evaluation.
      operationId: hasAccess2
      parameters:
        - in: query
          name: accessType
          description: Synapse access type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooleanResult'
          description: Success
      summary: >-
        Determines whether a specified Synapse user has a certain access type on
        evaluation.
      tags:
        - Evaluation Services
  '/evaluation/{evalId}/acl':
    parameters:
      - in: path
        name: evalId
        description: The ID of the specified Evaluation.
        required: true
        schema:
          type: string
    delete:
      deprecated: true
      description: >
        This method is deprecated and should be removed from future versions

        of the API.


        Deletes the ACL (access control list) of the specified evaluation. The
        user should

        have the proper <a
        href="${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}">permissions</a>

        to delete the ACL.
      operationId: deleteAcl
      responses:
        '204':
          description: The resource was deleted
      summary: >-
        This method is deprecated and should be removed from future versions of
        the API.
      tags:
        - Evaluation Services
    get:
      description: >
        Gets the access control list (ACL) governing the given evaluation.

        The user should have the proper

        <a
        href="${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}">permissions</a>

        to read the ACL.
      operationId: getAcl
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessControlList'
          description: Success
      summary: Gets the access control list (ACL) governing the given evaluation.
      tags:
        - Evaluation Services
  '/evaluation/{evalId}/round':
    parameters:
      - in: path
        name: evalId
        description: The ID of the specified Evaluation.
        required: true
        schema:
          type: string
    post:
      deprecated: true
      summary: Create Evaluation Round
      description: Create Evaluation Round
      operationId: createEvaluationRound
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationRound'
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationRound'
          description: Success
      tags:
        - Evaluation Services
  '/evaluation/{evalId}/round/{roundId}':
    parameters:
      - in: path
        name: evalId
        description: The ID of the specified Evaluation.
        required: true
        schema:
          type: string
      - in: path
        name: roundId
        description: The ID of the evaluation round
        required: true
        schema:
          type: string
    delete:
      deprecated: true
      operationId: deleteEvaluationRound
      summary: Delete Evaluation Round
      description: Delete Evaluation Round
      responses:
        '204':
          description: The resouce has been deleted
      tags:
        - Evaluation Services
    get:
      deprecated: true
      summary: Get Evaluation Round
      description: Get Evaluation Round
      operationId: getEvaluationRound
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationRound'
          description: Success
      tags:
        - Evaluation Services
    put:
      summary: Update Evaluation Round
      description: Update Evaluation Round
      deprecated: true
      operationId: updateEvaluationRound
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationRound'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationRound'
          description: Success
      tags:
        - Evaluation Services
  '/evaluation/{evalId}/round/list':
    parameters:
      - in: path
        name: evalId
        description: The ID of the specified Evaluation.
        required: true
        schema:
          type: string
    post:
      summary: Get all rounds of an Evaluation
      description: Get all rounds of an Evaluation
      deprecated: true
      operationId: getAllEvaluationRounds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationRoundListRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationRoundListResponse'
          description: Success
      tags:
        - Evaluation Services
  '/evaluation/{evalId}/statusBatch':
    parameters:
      - in: path
        name: evalId
        description: The ID of the specified Evaluation.
        required: true
        schema:
          type: string
    put:
      description: >
        Update multiple SubmissionStatuses. The maximum batch size is 500.  To

        allow upload of more than this maximum, the system supports uploading of
        a <i>series</i> of

        batches. Synapse employs optimistic concurrency on the series in the
        form of a batch token.

        Each request (except the first) must include the ''batch token''
        returned in the

        response to the previous batch. If another client begins batch upload
        simultaneously,

        a PRECONDITION_FAILED (412) response will be generated and upload must
        restart

        from the first batch.  After the final batch is uploaded, the data for
        the Evaluation queue

        will be mirrored to the tables which support querying.  Therefore
        uploaded data will

        not appear in Evaluation queries until after the final batch is
        successfully uploaded.  It

        is the client''s responsibility to note in each batch request (1)
        whether it is the first

        batch in the series and (2) whether it is the last batch.  (For a single
        batch both

        are set to ''true''.)


        Failure to use the flags correctly risks corrupted data (due to
        simultaneous,

        conflicting uploads by multiple clients) or data not appearing in query
        results.



        <p>


        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.UPDATE_SUBMISSION</a>
        on the specified Evaluation.


        </p>
      operationId: updateSubmissionStatusBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionStatusBatch'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUploadResponse'
          description: Success
      summary: Update multiple SubmissionStatuses.
      tags:
        - Evaluation Services
  '/evaluation/{evalId}/submission':
    parameters:
      - in: path
        name: evalId
        description: The ID of the specified Evaluation.
        required: true
        schema:
          type: string
    get:
      description: |
        Gets the requesting user's Submissions to a specified Evaluation.
      operationId: getMySubmissions
      parameters:
        - description: >-
            Limits the number of entities that will be fetched for this page.
            When null it will default to 10.
          in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 10
            maximum: 100
        - description: |
            The offset index determines where this page will start from.
            An index of 0 is the first entity. When null it will default to 0.'
          in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfSubmission'
          description: Success
      summary: Gets the requesting user's Submissions to a specified Evaluation.
      tags:
        - Evaluation Services
  '/evaluation/{evalId}/submission/all':
    parameters:
      - in: path
        name: evalId
        description: The ID of the specified Evaluation.
        required: true
        schema:
          type: string
    get:
      description: >
        'Gets a collection of Submissions to a specified Evaluation.

        <p>

        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a>
        on the specified Evaluation.

        </p>
      operationId: getAllSubmissions
      parameters:
        - description: |
            Limits the number of entities that will be fetched for this
            page. When null it will default to 10, max value 100.
          in: query
          name: limit
          schema:
            default: 10
            minimum: 10
            maximum: 100
            type: integer
        - description: |
            The offset index determines where this page will start from.
            An index of 0 is the first entity. When null it will default
            to 0.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
        - in: query
          name: status
          description: Status of submission.
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfSubmission'
          description: Success
      summary: Gets a collection of Submissions to a specified Evaluation.
      tags:
        - Evaluation Services
  '/evaluation/{evalId}/submission/bundle':
    parameters:
      - in: path
        name: evalId
        description: The ID of the specified Evaluation.
        required: true
        schema:
          type: string
    get:
      description: |
        Gets the requesting user's bundled Submissions and SubmissionStatuses
        to a specified Evaluation.
      operationId: getMySubmissionBundles
      parameters:
        - description: |
            Limits the number of entities that will be fetched for this
            page. When null it will default to 10.'
          in: query
          name: limit
          schema:
            default: 10
            type: integer
            minimum: 10
            maximum: 100
        - description: |
            The offset index determines where this page will start from.
            An index of 0 is the first entity. When null it will default
            to 0.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfSubmissionBundle'
          description: Success
      summary: |
        Gets the requesting users bundled Submissions and SubmissionStatuses
        to a specified Evaluation.'
      tags:
        - Evaluation Services
  '/evaluation/{evalId}/submission/bundle/all':
    parameters:
      - in: path
        name: evalId
        description: The ID of the specified Evaluation.
        required: true
        schema:
          type: string
    get:
      description: >
        Gets a collection of bundled Submissions and SubmissionStatuses to

        a given Evaluation.


        <p>

        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a>
        on the specified Evaluation.

        </p>
      operationId: getAllSubmissionBundles
      parameters:
        - description: |
            Limits the number of entities that will be fetched for this
            page. When null it will default to 10.'
          in: query
          name: limit
          schema:
            default: 10
            type: integer
            minimum: 10
            maximum: 100
        - description: |
            The offset index determines where this page will start from.
            An index of 0 is the first entity. When null it will default
            to 0.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
        - in: query
          name: status
          description: Submission Status
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfSubmissionBundle'
          description: Success
      summary: >-
        Gets a collection of bundled Submissions and SubmissionStatuses to a
        given Evaluation.
      tags:
        - Evaluation Services
  '/evaluation/{evalId}/submission/count':
    parameters:
      - in: path
        name: evalId
        description: The ID of the specified Evaluation.
        required: true
        schema:
          type: string
    get:
      description: >
        Gets the number of Submissions to a specified Evaluation.

        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a>
        on the specified Evaluation.

        </p>
      operationId: getSubmissionCount
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integer'
          description: Success
      summary: Gets the number of Submissions to a specified Evaluation.
      tags:
        - Evaluation Services
  '/evaluation/{evalId}/submission/status/all':
    parameters:
      - in: path
        name: evalId
        description: The ID of the specified Evaluation.
        required: true
        schema:
          type: string
    get:
      description: >
        'Gets a collection of SubmissionStatuses to a specified Evaluation.


        <p>


        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ</a>
        on the specified Evaluation.

        Furthermore, the caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a>
        to see all

        data marked as "private" in the SubmissionStatuses.


        </p>
      operationId: getAllSubmissionStatuses
      parameters:
        - description: |
            Limits the number of entities that will be fetched for this
            page. When null it will default to 10.'
          in: query
          name: limit
          schema:
            default: 10
            type: integer
            minimum: 10
            maximum: 100
        - description: |
            The offset index determines where this page will start from.
            An index of 0 is the first entity. When null it will default
            to 0.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
        - in: query
          name: status
          description: Submission status
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfSubmissionStatus'
          description: Success
      summary: Gets a collection of SubmissionStatuses to a specified Evaluation.
      tags:
        - Evaluation Services
  '/evaluation/{evalId}/team/{id}/SubmissionEligibility':
    parameters:
      - in: path
        name: evalId
        description: The ID of the specified Evaluation.
        required: true
        schema:
          type: string
      - in: path
        name: id
        required: true
        description: The ID of a Team.
        schema:
          type: string
    get:
      description: >
        Find out whether a Team and its members are eligible to submit to

        a given Evaluation queue (at the current time).  The request must
        include

        an Evaluation ID and a Team ID.   The 'eligibilityStateHash'

        field of the returned object is a required parameter of the subsequent
        Team Submission

        request made for the given Evaluation and Team.

        (See: <a
        href="${POST.evaluation.submission}">POST/evaluation/submission</a>)'
      operationId: getTeamSubmissionEligibility
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamSubmissionEligibility'
          description: Success
      summary: >
        Find out whether a Team and its members are eligible to submit to a
        given

        Evaluation queue (at the current time).'
      tags:
        - Evaluation Services
  /evaluation/acl:
    put:
      description: >
        Updates the supplied access control list (ACL) for an evaluation.

        The <a
        href="${org.sagebionetworks.repo.model.AccessControlList}">ACL</a>

        to be updated should have the ID of the evaluation. The user should have
        the proper

        <a
        href="${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}">permissions</a>

        in order to update the ACL.
      operationId: updateAcl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessControlList'
        description: The ACL being updated.
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessControlList'
          description: Success
      summary: Updates the supplied access control list (ACL) for an evaluation.
      tags:
        - Evaluation Services
  /evaluation/available:
    get:
      description: >
        Gets a collection of Evaluations in which the user has SUBMIT
        permission,

        within a given range.

        <p>

        <b>Note:</b> The response will contain only those Evaluations on which
        the caller

        must is

        granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.SUBMIT</a>

        permission.

        </p>
      operationId: getAvailableEvaluationsPaginated
      parameters:
        - in: query
          name: activeOnly
          description: Retrieve active only evaluation queues
          schema:
            default: false
            type: boolean
        - description: |
            an optional, comma-delimited list of evaluation IDs to which the
            response is limited
          in: query
          name: evaluationIds
          schema:
            type: string
        - description: |
            Limits the number of entities that will be fetched for this
            page. When null it will default to 10.'
          in: query
          name: limit
          schema:
            default: 10
            type: integer
            minimum: 10
            maximum: 100
        - description: |
            The offset index determines where this page will start from.
            An index of 0 is the first entity. When null it will default
            to 0.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfEvaluation'
          description: Success
      summary: >
        Gets a collection of Evaluations in which the user has SUBMIT
        permission,

        within a given range.
      tags:
        - Evaluation Services
  '/evaluation/name/{name}':
    parameters:
      - in: path
        name: name
        description: The name of the desired Evaluation.
        required: true
        schema:
          type: string
    get:
      description: >
        Finds an Evaluation by name.

        <p>

        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ</a>
        on the specified Evaluation.

        </p>
      operationId: findEvaluation
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
          description: Success
      summary: Finds an Evaluation by name.
      tags:
        - Evaluation Services
  /evaluation/submission:
    post:
      description: >
        Creates a Submission and sends a submission notification email to

        the submitter's team members.


        The passed request body should contain the following fields:


        <ul>


        <li>evaluationId - The ID of the Evaluation to which this Submission
        belongs.</li>


        <li>entityId - The ID of the Entity being submitted.</li>


        <li>versionNumber - The specific version of the Entity being
        submitted.</li>


        </ul>


        <p>


        A Submission must be either a Team or an Individual submission.  A Team
        submission

        must include a Team ID in the teamId field and the request must include
        a submissionEligibilityHash

        request parameter.  A Team submission may also include a list of
        submission contributors.

        (The submitter is taken to be a contributor and need not be included in
        the list.)

        An individual submission must have a null teamId, a null or empty
        contributor

        list, and no submissionEligibilityHash parameter.


        </p>


        <p>


        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.SUBMIT</a>.


        </p>


        <p>


        This call also creates an associated <a
        href="${org.sagebionetworks.evaluation.model.SubmissionStatus}">SubmissionStatus</a>,

        initialized with a SubmissionStatusEnum value of RECEIVED.


        </p>
      operationId: createSubmission
      parameters:
        - description: >
            The portal endpoint prefix to the an entity/challenge page. The

            entity ID of the challenge project is appended to create the
            complete URL. In normal operation,

            this parameter should be omitted.'
          in: query
          name: challengeEndpoint
          schema:
            description: >
              The portal endpoint prefix to the an entity/challenge page.

              The entity ID of the challenge project is appended to create the
              complete URL.

              In normal operation, this parameter should be omitted.'
            type: string
        - description: The current eTag of the Entity being submitted
          in: query
          name: etag
          schema:
            type: string
        - description: >
            The portal endpoint prefix for one-click email unsubscription.

            A signed, serialized token is appended to create the complete URL:

            <a
            href="${org.sagebionetworks.repo.model.message.NotificationSettingsSignedToken}">NotificationSettingsSignedToken</a>.

            In normal operation, this parameter should be omitted.'
          in: query
          name: notificationUnsubscribeEndpoint
          schema:
            type: string
        - description: >
            The hash provided by the

            <a
            href="${org.sagebionetworks.evaluation.model.TeamSubmissionEligibility}">TeamSubmissionEligibility</a>

            object.
          in: query
          name: submissionEligibilityHash
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission_model'
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission_model'
          description: Success
      summary: >
        Creates a Submission and sends a submission notification email to the
        submitter's

        team members.
      tags:
        - Evaluation Services
  '/evaluation/submission/{subId}':
    parameters:
      - description: The ID of the Submission
        in: path
        name: subId
        required: true
        schema:
          type: string
    delete:
      description: >
        Deletes a Submission and its accompanying SubmissionStatus.


        <b>This service is intended to only be used by ChallengesInfrastructure
        service

        account.</b>


        <p>


        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.DELETE_SUBMISSION</a>
        on the specified Evaluation.


        </p>
      operationId: deleteSubmission
      responses:
        '204':
          description: The resource has been deleted.
      summary: Deletes a Submission and its accompanying SubmissionStatus.
      tags:
        - Evaluation Services
    get:
      description: >
        Gets a Submission.


        <p>


        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a>
        on the specified Evaluation.


        </p>
      operationId: getSubmission
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission_model'
          description: Success
      summary: Gets a Submission.
      tags:
        - Evaluation Services
  '/evaluation/submission/{subId}/cancellation':
    parameters:
      - description: The ID of the Submission
        in: path
        name: subId
        required: true
        schema:
          type: string
    put:
      description: |
        User requests to cancel their submission. Only the user who submitted
        a submission can make this request.
      operationId: requestToCancelSubmission
      responses:
        '204':
          description: The request has been made.
      summary: User requests to cancel their submission.
      tags:
        - Evaluation Services
  '/evaluation/submission/{subId}/file/{fileHandleId}':
    parameters:
      - description: the ID of the requested FileHandle contained in the Submission.
        in: path
        name: fileHandleId
        required: true
        schema:
          type: string
      - description: The ID of the Submission
        in: path
        name: subId
        required: true
        schema:
          type: string
    get:
      description: >
        Gets a pre-signed URL to access a requested File contained within

        a specified Submission.

        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a>
        on the specified Evaluation.

        </p>
      operationId: redirectUrlForFileHandle
      parameters:
        - in: query
          name: redirect
          description: To redirect
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: >
        Gets a pre-signed URL to access a requested File contained within a
        specified

        Submission.
      tags:
        - Evaluation Services
  '/evaluation/submission/{subId}/status':
    parameters:
      - description: The ID of the Submission
        in: path
        name: subId
        required: true
        schema:
          type: string
    get:
      description: >
        Gets the SubmissionStatus object associated with a specified Submission.

        <p>

        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ</a>
        on the specified Evaluation.

        Furthermore, the caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a>

        to see all data marked as "private" in the SubmissionStatus. 


        <b>Service Limits</b>


        <table border="1">


        <tr>


        <th>resource</th>


        <th>limit</th>


        </tr>


        <tr>


        <td>The maximum frequency this method can be called</td>


        <td>1 calls per second</td>


        </tr>


        </table>


        </p>
      operationId: getSubmissionStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionStatus_model'
          description: Success
      summary: Gets the SubmissionStatus object associated with a specified Submission.
      tags:
        - Evaluation Services
    put:
      description: >
        Updates a SubmissionStatus object.



        <p>


        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle

        concurrent updates. Each time an SubmissionStatus is updated a new etag
        will be

        issued to the SubmissionStatus. When an update is requested, Synapse
        will compare

        the etag of the passed SubmissionStatus with the current etag of the
        SubmissionStatus.

        If the etags do not match, then the update will be rejected with a

        PRECONDITION_FAILED (412) response. When this occurs, the caller should

        fetch the latest copy of the SubmissionStatus and re-apply any changes,
        then re-attempt

        the SubmissionStatus update.


        </p>


        <p>


        <b>Note:</b> The caller must be granted the <a
        href="${org.sagebionetworks.repo.model.ACCESS_TYPE}">ACCESS_TYPE.UPDATE_SUBMISSION</a>
        on the specified Evaluation.


        </p>


        </p>


        <p>


        <b>Service Limits</b>


        <table border="1">


        <tr>


        <th>resource</th>


        <th>limit</th>


        </tr>


        <tr>


        <td>The maximum frequency this method can be called</td>


        <td>1 calls per second</td>


        </tr>


        </table>


        </p>
      operationId: updateSubmissionStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionStatus_model'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionStatus_model'
          description: Success
      summary: Updates a SubmissionStatus object.
      tags:
        - Evaluation Services
  /team:
    post:
      description: >
        Create a new Team. The passed request body may contain the following

        fields:


        <ul>


        <li>name - Give your new Team a name.  The name must be unique, not used
        by an

        existing Team (required).</li>


        <li>description - a short text description of the Team''s purpose
        (optional).</li>


        <li>icon - a fileHandle ID for an icon image file previously uploaded to
        Synapse

        (optional).</li>


        </ul>


        <p>


        To specify a Team icon, the icon file must first be uploaded to Synapse
        as

        <a
        href="${org.sagebionetworks.repo.model.file.FileHandle}">FileHandle</a>
        (see

        <a href="${org.sagebionetworks.file.controller.UploadController}">File
        Services</a>).

        The FileHandle ID can then be put into the Team''s icon field.
      operationId: createTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Success
      summary: Create a new Team.
      tags:
        - Team Services
    put:
      description: |
        Update the Team metadata for the specified Team.
        Note: The client must be a Team administrator to make this request.
      operationId: updateTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: the new metadata for the Team
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Success
      summary: Update the Team metadata for the specified Team.
      tags:
        - Team Services
  /teams:
    get:
      description: >
        Retrieve a paginated list of Teams matching the supplied name fragment

        (optional), in alphabetical order by Team name.


        <br>


        Note:  This service has JSONP support:  If the request parameter
        "callback=jsMethod"

        is included (where 'jsMethod' is any function name you wish), then the
        response body will be wrapped

        in "jsMethod(...);".
      operationId: getTeamsByNameFragment
      parameters:
        - description: |
            a prefix of the Team name, or a prefix of any sub-string in the
            name preceded by a space. If omitted, all Teams are returned.
          in: query
          name: fragment
          schema:
            type: string
        - description: the maximum number of Teams to return.
          in: query
          name: limit
          schema:
            default: 10
            type: integer
            minimum: 10
            maximum: 50
        - description: the starting index of the returned results (default 0)
          in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfTeam'
          description: Success
      summary: Retrieve a paginated list of Teams in alphabetical order by Team name.
      tags:
        - Team Services
  '/team/{id}':
    parameters:
      - description: the ID of the Team.
        in: path
        name: id
        required: true
        schema:
          type: string
    delete:
      description: |
        Delete the Team.
        Note: The client must be a Team administrator to make this request.
      operationId: deleteTeam
      responses:
        '204':
          description: The resource has been deleted.
      summary: Delete the Team.
      tags:
        - Team Services
    get:
      description: |
        Retrieve the metadata for a specified Team.

        <p>

        <b>Service Limits</b>

        <table border="1">

        <tr>

        <th>resource</th>

        <th>limit</th>

        </tr>

        <tr>

        <td>The maximum frequency this method can be called</td>

        <td>1 calls per second</td>

        </tr>

        </table>

        </p>
      operationId: getTeam
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Success
      summary: Retrieve the metadata for a specified Team.
      tags:
        - Team Services
  '/team/{id}/accessApproval':
    parameters:
      - description: the ID of the Team.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      deprecated: true
      description: >-
        Retrieve the Access Approvals for the given Team.  This service is only
        available to the ACT.
      operationId: getTeamAccessApprovals
      parameters:
        - description: |
            Limits the size of the page returned. For example, a page size
            of 10 require limit = 10. The maximum limit for this call is 50.
          in: query
          name: limit
          schema:
            type: integer
            minimum: 10
            maximum: 50
            default: 10
        - description: >
            The index of the pagination offset. For a page size of 10, the

            first page would be at offset = 0, and the second page would be at
            offset =

            10.
          in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
        '410':
          content: {}
          description: Success
      summary: Retrieve the Access Approvals for the given Team.
      tags:
        - Access Approval Services
  '/team/{id}/accessRequirement':
    parameters:
      - description: the ID of the Team.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: |
        Retrieve paginated list of ALL Access Requirements associated with
        a Team.
      operationId: getTeamAccessRequirements
      parameters:
        - description: |
            Limits the size of the page returned. For example, a page size
            of 10 require limit = 10. The maximum limit for this call is 50.
          in: query
          name: limit
          schema:
            type: integer
            minimum: 10
            maximum: 50
            default: 10
        - description: >
            The index of the pagination offset. For a page size of 10, the

            first page would be at offset = 0, and the second page would be at
            offset =

            10.
          in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfAccessRequirement'
          description: Success
      summary: >-
        Retrieve paginated list of ALL Access Requirements associated with a
        Team.
      tags:
        - Access Requirement Services
  '/team/{id}/acl':
    parameters:
      - description: the ID of the Team.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: Retrieve the AccessControlList for a specified Team.
      operationId: getTeamAcl
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessControlList'
          description: Success
      summary: Retrieve the AccessControlList for a specified Team.
      tags:
        - Team Services
  '/team/{id}/icon':
    parameters:
      - description: the ID of the Team.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >-
        Retrieve the download URL for the Team icon, or receive a redirect
        response to said URL.
      operationId: fileRedirectUrlForTeamIcon
      parameters:
        - description: |
            if true or omitted, then redirect to the URL.  If false then simply
            return the URL.
          in: query
          name: redirect
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: >
        Retrieve the download URL for the Team icon, or receive a redirect
        response

        to said URL
      tags:
        - Team Services
  '/team/{id}/icon/preview':
    parameters:
      - description: the ID of the Team.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Retrieve the download URL for the Team icon preview, or receive a
        redirect

        response to said URL.
      operationId: filePreviewRedirectUrlForTeamIcon
      parameters:
        - description: |
            if true or omitted, then redirect to the URL.  If false then simply
            return the URL.
          in: query
          name: redirect
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: >
        Retrieve the download URL for the Team icon preview, or receive a
        redirect

        response to said URL.
      tags:
        - Team Services
  '/team/{id}/member/{principalId}':
    parameters:
      - description: the ID of the Team.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: the member's principal ID
        in: path
        name: principalId
        required: true
        schema:
          type: string
    delete:
      description: >
        Remove the given member from the specified Team.

        Note:  The client must either be a Team administrator or the member
        being removed.
      operationId: removeTeamMember
      responses:
        '204':
          description: The resource has been deleted.
      summary: Remove the given member from the specified Team.
      tags:
        - Team Services
    get:
      description: |
        '<p>

        <b>Service Limits</b>

        <table border="1">

        <tr>

        <th>resource</th>

        <th>limit</th>

        </tr>

        <tr>

        <td>The maximum frequency this method can be called</td>

        <td>1 calls per second</td>

        </tr>

        </table>

        </p>'
      operationId: getTeamMember
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMember'
          description: Success
      summary: .
      tags:
        - Team Services
    put:
      description: >
        Add a member to the Team.


        If the one making the request is the user to be added, then the user
        must have

        an open invitation from the Team.  If the one making the request is an
        administrator

        on the Team, then there must be a pending request from the user to the
        Team, asking

        to be added. If both teamEndpoint and notificationUnsubscribeEndpoint
        are provided,

        notification email(s) will be sent to the appropriate parties.
      operationId: addTeamMember
      parameters:
        - description: >
            the portal prefix for one-click email unsubscription.

            A signed, serialized token is appended to create the complete URL:

            <ahref="${org.sagebionetworks.repo.model.message.NotificationSettingsSignedToken}">NotificationSettingsSignedToken</a>'
          in: query
          name: notificationUnsubscribeEndpoint
          schema:
            type: string
        - description: >
            the portal prefix for the Team URL. The team ID is appended to
            create

            the complete URL.
          in: query
          name: teamEndpoint
          schema:
            type: string
      responses:
        '204':
          description: The resource has been added.
      summary: Add a member to the Team.
      tags:
        - Team Services
  '/team/{id}/member/{principalId}/membershipStatus':
    parameters:
      - description: the ID of the Team.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: the member's principal ID
        in: path
        name: principalId
        required: true
        schema:
          type: string
    get:
      description: >
        Retrieve the Team Membership Status bundle for a team and user.  This

        says whether a user is a member of a Team, whether there are outstanding

        membership requests or invitations, and whether the client making the
        request

        can add the given user to the given Team.
      operationId: getTeamMembershipStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMembershipStatus'
          description: Success
      summary: Retrieve the Team Membership Status bundle for a team and user.
      tags:
        - Team Services
  '/team/{id}/memberList':
    parameters:
      - description: the ID of the Team.
        in: path
        name: id
        required: true
        schema:
          type: string
    post:
      description: |
        Returns the TeamMember info for a team and a given list of members'
        principal IDs.
        Invalid IDs in the list are ignored:  The results list is simply
        smaller than the list of IDs passed in.
      operationId: listTeamMembersGivenTeamandUserList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdList'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWrapperOfTeamMember'
          description: Success
      summary: >
        Returns the TeamMember info for a team and a given list of members'
        principal

        IDs.
      tags:
        - Team Services
  '/team/{id}/openInvitation':
    parameters:
      - description: the ID of the Team.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Retrieve the open invitations from a Team, optionally filtering by

        the invitee.

        An invitation is only open if it has not expired and if the user has not
        joined

        the Team.

        Note: certain fields may be omitted when returned if the field value is
        null
      operationId: getOpenInvitationsByTeam
      parameters:
        - description: the ID of the Synapse user to which invitations have been extended
          in: query
          name: inviteeId
          schema:
            type: string
        - description: the maximum number of invitations to return
          in: query
          name: limit
          schema:
            default: 10
            type: integer
            minimum: 10
            maximum: 100
        - description: the starting index of the returned results
          in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfMembershipInvitation'
          description: Success
      summary: |
        Retrieve the open invitations from a Team, optionally filtering by the
        invitee.
      tags:
        - Membership Invitation Services
  '/team/{id}/openRequest':
    parameters:
      - description: the ID of the Team.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Retrieve the open requests submitted to a Team, optionally filtering

        by the requester.

        An request is only open if it has not expired and if the requester has
        not been

        added the Team.


        <p>


        <b>Service Limits</b>


        <table border="1">


        <tr>


        <th>resource</th>


        <th>limit</th>


        </tr>


        <tr>


        <td>The maximum frequency this method can be called</td>


        <td>40 calls per minute</td>


        </tr>


        </table>


        </p>'
      operationId: getOpenRequestsByTeam
      parameters:
        - description: the maximum number of requests to return (default 10)
          in: query
          name: limit
          schema:
            default: 10
            type: integer
            minimum: 10
            maximum: 100
        - description: the starting index of the returned results (default 0)
          in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
        - description: the ID of the user requesting admission to the Team
          in: query
          name: requestorId
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfMembershipRequest'
          description: Success
      summary: >-
        Retrieve the open requests submitted to a Team, optionally filtering by
        the requester.
      tags:
        - Membership Request Services
  /team/acl:
    put:
      description: Update the Access Control List for the specified Team.
      operationId: updateTeamAcl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessControlList'
        description: the updated Access Control List
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessControlList'
          description: Success
      summary: Update the Access Control List for the specified Team.
      tags:
        - Team Services
  /teamList:
    post:
      description: |
        Retrieve a list of Teams given their IDs.
        Invalid IDs in the list are ignored:  The results list is simply
        smaller than the list of IDs passed in.
      operationId: listTeams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdList'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWrapperOfTeam'
          description: Success
      summary: Retrieve a list of Teams given their IDs.
      tags:
        - Team Services
  /teamMember:
    put:
      description: >
        Add a member to the Team.  Note: The request is authenticated by a

        hash message authentication code in the request body, generated by
        Synapse.  The intended

        use of this service is by the portal, completing a round trip with a
        'one-click join-team'

        link provided to the user by Synapse via email. If both teamEndpoint and

        notificationUnsubscribeEndpoint are provided, notification email(s) will

        be sent to the appropriate parties.
      operationId: addTeamMemberViaSignedToken
      parameters:
        - in: query
          name: notificationUnsubscribeEndpoint
          description: notification unsubscribe endpoint
          schema:
            type: string
        - in: query
          name: teamEndpoint
          description: Team end point
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinTeamSignedToken'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Success
      summary: Add a member to the Team.
      tags:
        - Team Services
  '/teamMembers/{id}':
    parameters:
      - description: the ID of the Team.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Retrieve a paginated list of Team members matching the supplied name

        prefix.  If the prefix is omitted then all members are returned.


        <br>


        Note:  This service has JSONP support:  If the request parameter
        "callback=jsMethod"

        is included (where 'jsMethod' is any function name you wish), then the
        response body will be wrapped

        in "jsMethod(...);".
      operationId: getTeamMembers
      parameters:
        - description: a prefix of the user's first or last name or email address
          in: query
          name: fragment
          schema:
            type: string
        - description: the maximum number of members to return.
          in: query
          name: limit
          schema:
            default: 10
            type: integer
            minimum: 10
            maximum: 50
        - description: the type of team user to retrieve
          in: query
          name: memberType
          schema:
            enum:
              - ADMIN
              - ALL
              - MEMBER
            type: string
            default: ALL
        - description: the starting index of the returned results
          in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfTeamMember'
          description: Success
      summary: >-
        Retrieve a paginated list of Team members matching the supplied name
        prefix.
      tags:
        - Team Services
  '/teamMembers/count/{id}':
    parameters:
      - description: the ID of the Team.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Retrieve the number of Team members matching the supplied name prefix. 
        If

        the prefix is omitted then the number of members in the team is
        returned.


        <br>


        Note:  This service has JSONP support:  If the request parameter
        "callback=jsMethod"

        is included (where 'jsMethod' is any function name you wish), then the
        response body will be wrapped

        in "jsMethod(...);".
      operationId: getTeamMemberCount
      parameters:
        - description: |
            a prefix of the user's first or last name or email address
          in: query
          name: fragment
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
          description: Success
      summary: Retrieve the number of Team members matching the supplied name prefix.
      tags:
        - Team Services
  '/trashcan/purge/{id}':
    parameters:
      - description: The ID of an entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    put:
      description: |
        Flags the specified entity for priority purge. The entity will be
        deleted as soon as possible. Once purging is done, the entity
        will be permanently deleted from the system.
      operationId: flagForPurge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: Flags the specified entity for priority purge.
      tags:
        - Trash Services
  '/trashcan/restore/{id}':
    parameters:
      - description: The ID of an entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    put:
      description: >
        Moves an entity and its descendants out of the trash can back to its

        original parent. An exception is thrown if the original parent does not
        exist any more.

        In that case, please use <a href="#operation/restoreFromTrash">PUT
        /trashcan/restored/{id}/{parentId}</a>

        to restore to a new parent.  In such a case you must be a member of the
        Synapse Access

        and Compliance Team.
      operationId: restoreFromTrash
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: >
        Moves an entity and its descendants out of the trash can back to its
        original

        parent.
      tags:
        - Trash Services
  '/trashcan/restore/{id}/{parentId}':
    parameters:
      - description: The ID of a deleted entity.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the new parent entity.
        in: path
        name: parentId
        required: true
        schema:
          type: string
    put:
      description: >
        Moves an entity and its descendants out of the trash can to a new

        parent.


        NOTE:  This operation cannot be completed if the original parent has
        been

        deleted (unless the caller is a member of the Synapse Access and
        Compliance

        Team).

        The service will return a NotFoundException.  This is because of the
        potential

        security hole arising from allowing access requirements

        on folders:  If an entity is in a restricted folder and then deleted, it
        cannot

        be restored unless the new parent has the same restriction level as the
        original

        one.
      operationId: restoreFromTrashToParent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: >-
        Moves an entity and its descendants out of the trash can to a new
        parent.
      tags:
        - Trash Services
  '/trashcan/trash/{id}':
    parameters:
      - description: The ID of an entity.
        in: path
        name: id
        required: true
        schema:
          type: string
    put:
      description: Moves an entity and its descendants to the trash can.
      operationId: moveToTrash
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: Moves an entity and its descendants to the trash can.
      tags:
        - Trash Services
  /trashcan/view:
    get:
      description: |
        Retrieves the paginated list of trash entities deleted by the current
        user.
      operationId: viewTrash
      parameters:
        - description: The maximum number of entities to retrieve per page.
          in: query
          name: limit
          schema:
            default: 10
            type: integer
            minimum: 10
            maximum: 100
        - description: Paginated results. Offset to the current page.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfTrashedEntity'
          description: Success
      summary: >-
        Retrieves the paginated list of trash entities deleted by the current
        user.
      tags:
        - Trash Services
  /user:
    get:
      description: >
        Get all publicly available <a
        href="${org.sagebionetworks.repo.model.UserProfile}">UserProfile</a>

        data in the system
      operationId: getUserProfilesPaginated
      parameters:
        - description: Used to indicate whether the sort direction is ascending or not.
          in: query
          name: ascending
          schema:
            default: true
            type: boolean
        - description: |
            Limits the number of items that will be fetched for this page
          in: query
          name: limit
          schema:
            default: 100
            type: integer
        - description: >-
            The offset index determines where this page will start from. An
            index of 0 is the first item.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
        - description: Used to indicate upon which field(s) to sort.
          in: query
          name: sort
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        description: >
          Get all publicly available <a
          href="${org.sagebionetworks.repo.model.UserProfile}">UserProfile</a>

          data in the system
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfUserProfile'
          description: Success
      summary: Get all publicly available.
      tags:
        - User Profile Services
  '/user/{id}/bundle':
    parameters:
      - in: path
        name: id
        required: true
        description: The ID of the Synapse user.
        schema:
          type: string
    get:
      description: >
        Get the user bundle of a specified user.

        <p><b>Note:</b> Private fields (e.g. "rStudioUrl") are omitted unless
        the requester

        is the profile owner or an administrator.</p>
      operationId: getUserBundleByOwnerId
      parameters:
        - description: >
            integer flag defining which components to include in the bundle

            <p>

            This integer is used as a bit-string of flags to specify which parts
            to include

            in the UserBundle. The mask is defined as follows:

            <ul>

            <li> UserProfile  = 0x1 </li>

            <li> ORCID  = 0x2 </li>

            <li> VerificationSubmission = 0x4 </li>

            <li> Is Certified = 0x8 </li>

            <li> Is Verified  = 0x10 </li>

            <li> Is ACT Member = 0x20 </li>

            </ul>

            </p>
          in: query
          name: mask
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBundle'
          description: Success
      summary: Get the user bundle of a specified user.
      tags:
        - User Profile Services
  '/user/{id}/certificationStatus':
    parameters:
      - in: path
        name: id
        required: true
        description: The ID of the Synapse user.
        schema:
          type: string
    put:
      operationId: setUserCertificationStatus
      summary: Set certification status
      description: Setting certification status.
      responses:
        '204':
          description: Success
        '410':
          content: {}
          description: Success
      tags:
        - Certified User Services
  '/user/{id}/certifiedUserPassingRecord':
    parameters:
      - in: path
        name: id
        required: true
        description: The ID of the Synapse user.
        schema:
          type: string
    get:
      description: |
        Retrieve the Passing Record on the User Certification test for the
        given user.
      operationId: getPassingRecord
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassingRecord'
          description: Success
      summary: |
        Retrieve the Passing Record on the User Certification test for the given
        user.
      tags:
        - Certified User Services
  '/user/{id}/memberList':
    parameters:
      - description: The ID of the Synapse user.
        in: path
        name: id
        required: true
        schema:
          type: string
    post:
      description: >
        Returns the TeamMember info for a user and a given list of Team IDs.

        Not Found status is returned if the user ID is invalid, any of the Team
        IDs

        are invalid, or the user is not in any of the given teams.
      operationId: listTeamMembersGivenUserandTeamList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdList'
        description: Team IDs
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWrapperOfTeamMember'
          description: Success
      summary: Returns the TeamMember info for a user and a given list of Team IDs.
      tags:
        - Team Services
  '/user/{id}/openInvitation':
    parameters:
      - description: The ID of the Synapse user.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Retrieve the open invitations to a user, optionally filtering by the

        Team of origin.

        An invitation is only open if it has not expired and if the user has not
        joined

        the Team.

        Note: certain fields may be omitted when returned if the field value is
        null
      operationId: getOpenInvitationsByUser
      parameters:
        - description: the maximum number of invitations to return.
          in: query
          name: limit
          schema:
            default: 10
            type: integer
        - description: the starting index of the returned results.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
        - description: the ID of the Team extending the invitations
          in: query
          name: teamId
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfMembershipInvitation'
          description: Success
      summary: >
        Retrieve the open invitations to a user, optionally filtering by the
        Team

        of origin.
      tags:
        - Membership Invitation Services
  '/user/{id}/openRequest':
    parameters:
      - description: The ID of the Synapse user.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Retrieve the open requests submitted by a user, optionally filtering

        by the Team.

        An request is only open if it has not expired and if the requester has
        not been

        added the Team.

        Note:  The 'id' in the URI must be the same ID as that of the
        authenticated

        user issuing the request.
      operationId: getOpenRequestsByUser
      parameters:
        - description: the maximum number of requests to return
          in: query
          name: limit
          schema:
            default: 10
            type: integer
        - description: the starting index of the returned results.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
        - in: query
          name: teamId
          description: ID of a Synapse Team.
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfMembershipRequest'
          description: Success
      summary: |
        Retrieve the open requests submitted by a user, optionally filtering by
        the Team.
      tags:
        - Membership Request Services
  '/user/{id}/team':
    parameters:
      - description: The ID of the Synapse user.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: Retrieve a paginated list of Teams to which the given user belongs.
      operationId: getTeamsByMember
      parameters:
        - description: the maximum number of Teams to return (default 10)
          in: query
          name: limit
          schema:
            default: 10
            type: integer
        - description: the starting index of the returned results (default 0)
          in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfTeam'
          description: Success
      summary: Retrieve a paginated list of Teams to which the given user belongs.
      tags:
        - Team Services
  '/user/{id}/team/id':
    parameters:
      - description: The ID of the Synapse user.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      description: >
        Retrieve a paginated list of IDs of Teams to which the given user

        belongs. If sorting is desired, both sort and

        ascending must be specified. If they are omitted, results are not
        sorted.
      operationId: getTeamIdsByMember
      parameters:
        - description: 'the direction of sort: true for ascending, and false for descending'
          in: query
          name: ascending
          schema:
            type: boolean
        - description: controls pagination
          in: query
          name: nextPageToken
          schema:
            type: string
        - description: >
            the field to sort the team IDs on. Available options

            <a
            href="${org.sagebionetworks.repo.model.TeamSortOrder}">TeamSortOrder</a>
          in: query
          name: sort
          schema:
            enum:
              - TEAM_NAME
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTeamIds'
          description: Success
      summary: >-
        Retrieve a paginated list of IDs of Teams to which the given user
        belongs.
      tags:
        - Team Services
  /user/bundle:
    get:
      description: |
        Get the user bundle of the caller (my own bundle).
        <p><b>Note:</b> Private fields will be returned.</p>
      operationId: getMyOwnUserBundle
      parameters:
        - description: >
            integer flag defining which components to include in the bundle

            <p>

            This integer is used as a bit-string of flags to specify which parts
            to include

            in the UserBundle. The mask is defined as follows:

            <ul>

            <li> UserProfile  = 0x1 </li>

            <li> ORCID  = 0x2 </li>

            <li> VerificationSubmission = 0x4 </li>

            <li> Is Certified = 0x8 </li>

            <li> Is Verified  = 0x10 </li>

            <li> Is ACT Member = 0x20 </li>

            </ul>

            </p>
          in: query
          name: mask
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBundle'
          description: Success
      summary: Get the user bundle of the caller (my own bundle).
      tags:
        - User Profile Services
  /userGroup:
    get:
      description: Get the user-groups in the system
      operationId: getUserGroups
      parameters:
        - in: query
          description: Return results in ascending order.
          name: ascending
          schema:
            default: true
            type: boolean
        - description: the maximum number of results to return.
          in: query
          name: limit
          schema:
            default: 10
            type: integer
        - description: the starting index of the returned results.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
        - in: query
          name: sort
          description: Sort results.
          schema:
            default: NONE
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        description: Get the user-groups in the system
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultsOfUserGroup'
          description: Success
      summary: Get the user-groups in the system.
      tags:
        - User Profile Services
  /userGroupHeaders:
    get:
      description: Get Users and Groups that match the given prefix.
      operationId: getUserGroupHeadersByPrefix
      parameters:
        - description: |
            Limits the number of items that will be fetched for this page.
          in: query
          name: limit
          schema:
            default: 10
            type: integer
        - description: |
            The offset index determines where this page will start from.
            An index of 0 is the first item.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 10
        - description: The name to search for.
          in: query
          name: prefix
          schema:
            type: string
        - description: >
            Restrict the results to a type of principal.

            Available options: <a
            href="${org.sagebionetworks.repo.model.principal.TypeFilter}">TypeFilter</a>.'
          in: query
          name: typeFilter
          schema:
            enum:
              - ALL
              - TEAMS_ONLY
              - USERS_ONLY
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupHeaderResponsePage'
          description: Success
      summary: Get Users and Groups that match the given prefix.
      tags:
        - User Profile Services
  /userGroupHeaders/aliases:
    post:
      description: Get Users and Groups that match the given list of aliases.
      operationId: getUserGroupHeadersByAliases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AliasList'
        description: >
          The list of principal aliases to lookup. Each alias must be

          either a user name or team name. The maximum number of aliases per
          request is

          100.
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupHeaderResponse'
          description: Success
      summary: Get Users and Groups that match the given list of aliases.
      tags:
        - User Profile Services
  /userGroupHeaders/batch:
    get:
      description: >
        Batch get UserGroupHeaders.

        This fetches information about a collection of users or groups,
        specified by Synapse

        IDs.
      operationId: getUserGroupHeadersByIds
      parameters:
        - description: >
            IDs are specified as request parameters at the end of the URL,
            separated

            by commas. For example: ids=1001,819
          in: query
          name: ids
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        description: >
          Batch get UserGroupHeaders.

          This fetches information about a collection of users or groups,
          specified by

          Synapse IDs.
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupHeaderResponsePage'
          description: Success
      summary: Batch get UserGroupHeaders.
      tags:
        - User Profile Services
  /userProfile:
    get:
      description: |
        Get the profile of the caller (my profile).
        <p><b>Note:</b> Private user profile fields will be returned.</p>'
      operationId: getMyOwnUserProfile
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: Success
      summary: Get the profile of the caller (my profile).
      tags:
        - User Profile Services
    post:
      description: >
        Batch get UserGroupHeaders.

        This fetches information about a collection of users or groups,
        specified by Synapse

        IDs.'
      operationId: listUserProfiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdList'
        description: >
          IDs are specified as request parameters at the end of the URL,
          separated

          by commas. For example: ids=1001,819
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWrapperOfUserProfile'
          description: Success
      summary: Batch get UserGroupHeaders.
      tags:
        - User Profile Services
    put:
      description: >
        Update your own profile


        <p><b>Note: </b> The user associated with the UserProfile "ownerId" must
        match

        the identity of the caller,

        otherwise an Unauthorized response will occur.</p>
      operationId: updateUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: Success
      summary: Update your own profile.
      tags:
        - User Profile Services
  '/userProfile/{profileId}':
    parameters:
      - description: The ID of the Synapse user.
        in: path
        name: profileId
        required: true
        schema:
          type: string
    get:
      description: >
        Get the profile of a specified user.

        <p><b>Note:</b> Private fields (e.g. "rStudioUrl") are omitted unless
        the requester

        is the profile owner or an administrator.</p>'
      operationId: getUserProfile
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: Success
      summary: Get the profile of a specified user.
      tags:
        - User Profile Services
  '/userProfile/{profileId}/image':
    parameters:
      - description: The ID of the Synapse user.
        in: path
        name: profileId
        required: true
        schema:
          type: string
    get:
      description: |
        Get the actual URL of the image file associated with a user's profile.
        <p>
        Note: This call will result in a HTTP temporary redirect (307), to the
        actual file URL if the caller meets all of the download requirements.
        </p>
      operationId: imageRedirectUrlForUser
      parameters:
        - description: |
            When set to false, the URL will be returned as text/plain
            instead of redirecting.
          in: query
          name: redirect
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: Get the actual URL of the image file associated with a user's profile.
      tags:
        - User Profile Services
  '/userProfile/{profileId}/image/preview':
    parameters:
      - description: The ID of the Synapse user.
        in: path
        name: profileId
        required: true
        schema:
          type: string
    get:
      description: |
        Get the actual URL of the image file associated with a user''s profile.
        <p>
        Note: This call will result in a HTTP temporary redirect (307), to the
        actual file URL if the caller meets all of the download requirements.
        </p>
      operationId: imagePreviewRedirectUrlForUser
      parameters:
        - description: |
            When set to false, the URL will be returned as text/plain
            instead of redirecting.
          in: query
          name: redirect
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/String'
          description: Success
      summary: Get the actual URL of the image file associated with a user's profile.
      tags:
        - User Profile Services
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Challenge:
      title: Challenge
      type: object
      properties:
        etag:
          type: string
          description: >-
            Synapse employs an Optimistic Concurrency Control (OCC) scheme to
            handle concurrent updates. Since the E-Tag changes every time an
            entity is updated it is used to detect when a client's current
            representation of an entity is out-of-date.
        projectId:
          type: string
          description: The ID of the Project the challenge is used with.
        participantTeamId:
          type: string
          description: The ID of the Team which users join to participate in the Challenge
        id:
          type: string
          description: The ID of this Challenge object
      description: Settings for a Challenge Project.
      example:
        etag: 32439w3qsdfw
        projectId: syn22222
        participantTeamId: '333333'
        id: '4321'
    ChallengePagedResults:
      title: ChallengePagedResults
      type: object
      properties:
        totalNumberOfResults:
          type: integer
          description: The total number of results
        results:
          type: array
          description: The list of results for this page
          items:
            $ref: '#/components/schemas/Challenge'
      description: >-
        List the Challenges for which the given participant is registered. To be
        in the returned list the caller must have READ permission on the project
        associated with the Challenge.
      example:
        totalNumberOfResults: 12345
        results:
          - etag: 32439w3qsdfw
            projectId: syn22222
            participantTeamId: '333333'
            id: '4321'
          - etag: 32439w3qsdfwasd
            projectId: syn33333
            participantTeamId: '4444'
            id: '4322'
    ChallengeTeam:
      title: ChallengeTeam
      type: object
      properties:
        id:
          type: string
          description: The ID of this ChallengeTeam object
        teamId:
          type: string
          description: The ID of the Team
        challengeId:
          type: string
          description: The ID of the Challenge
        message:
          type: string
          description: >-
            A descriptive message for the Team in the context of the Challenge.
            Limited to 500 characters.
        etag:
          type: string
          description: >-
            Synapse employs an Optimistic Concurrency Control (OCC) scheme to
            handle concurrent updates. Since the E-Tag changes every time an
            entity is updated it is used to detect when a client's current
            representation of an entity is out-of-date.
      description: Relationship between a Challenge and registered Team
      example:
        id: '1111'
        teamId: '222222'
        challengeId: '3423'
        message: Testing
        etag: 33492273ssdf
    ChallengeTeamPagedResults:
      title: ChallengeTeamPagedResults
      type: object
      properties:
        totalNumberOfResults:
          type: integer
          description: The total number of results
        results:
          type: array
          description: The list of results for this page
          items:
            $ref: '#/components/schemas/ChallengeTeam'
      description: >-
        List the Teams registered for a Challenge. You must have READ permission
        in the associated Project to make this request.
      example:
        totalNumberOfResults: 12345
        results:
          - id: '1111'
            teamId: '222222'
            challengeId: '3423'
            message: Testing
            etag: 33492273ssdf
          - id: '1112'
            teamId: '222233'
            challengeId: '3421'
            message: Testing foo
            etag: 33492273ssdddf
    PaginatedIds:
      title: PaginatedIds
      type: object
      properties:
        totalNumberOfResults:
          type: integer
          description: The total number of results
        results:
          type: array
          description: The list of Object Ids for this page
          items:
            type: string
      description: Paginated results of strings
      example:
        totalNumberOfResults: 12345
        results:
          - test1
          - test2
    ObjectType:
      description: JSON enum for the types of objects in Synapse.
      enum:
        - ENTITY
        - ENTITY_CONTAINER
        - PRINCIPAL
        - ACTIVITY
        - EVALUATION
        - EVALUATION_ROUND
        - SUBMISSION
        - EVALUATION_SUBMISSIONS
        - FILE
        - MESSAGE
        - WIKI
        - FAVORITE
        - ACCESS_REQUIREMENT
        - ACCESS_APPROVAL
        - TEAM
        - TABLE
        - ACCESS_CONTROL_LIST
        - PROJECT_SETTING
        - VERIFICATION_SUBMISSION
        - CERTIFIED_USER_PASSING_RECORD
        - FORUM
        - THREAD
        - REPLY
        - FORM_GROUP
        - ORGANIZATION
        - FORM_DATA
        - ENTITY_VIEW
        - USER_PROFILE
        - DATA_ACCESS_REQUEST
        - DATA_ACCESS_SUBMISSION
        - DATA_ACCESS_SUBMISSION_STATUS
        - MEMBERSHIP_INVITATION
      title: ObjectType
      type: string
    DoiAssociation:
      description: >
        All fields that associate a Synapse object with a DOI.

        The objectId and objectType are required to create or mint a DOI in all
        circumstances.
      example:
        associatedBy: ...
        associatedOn: ...
        associationId: ...
        doiUri: ...
        doiUrl: ...
        etag: ...
        objectId: ...
        objectType: WIKI
        objectVersion: 12345
        updatedBy: ...
        updatedOn: ...
      properties:
        associatedBy:
          description: The ID of the user that creates this DOI. Provided by Synapse.
          type: string
        associatedOn:
          description: The date time this DOI is first created. Provided by Synapse.
          type: string
        associationId:
          description: The unique ID of this DOI stored in Synapse. Provided by Synapse.
          type: string
        doiUri:
          description: >-
            The unique URI of this DOI to which the resource can be resolved.
            Provided by Synapse.
          type: string
        doiUrl:
          description: >-
            The DOI URL that will point to the Synapse object. Provided by
            Synapse.
          type: string
        etag:
          description: >-
            For Optimistic Concurrency Control (OCC). Required to successfully
            update a DOI.
          type: string
        objectId:
          description: >-
            The ID of the digital object in Synapse for which this DOI is
            created.
          type: string
        objectType:
          $ref: '#/components/schemas/ObjectType'
        objectVersion:
          description: >-
            The version of the digital object. When null, the DOI is associated
            with the current version of the object.
          type: integer
        updatedBy:
          description: The ID of the user that last updated this DOI. Provided by Synapse.
          type: string
        updatedOn:
          description: The date time this DOI is last updated. Provided by Synapse.
          type: string
      required:
        - objectId
      title: DoiAssociation
      type: object
    NameIdentifierScheme:
      description: >-
        Describes the scheme of the nameIdentifier. Required if nameIdentifier
        is used.
      enum:
        - ORCID
        - ISNI
      title: NameIdentifierScheme
      type: string
    DoiNameIdentifier:
      description: >-
        Uniquely identifies an individual or legal entity, according to various
        schemas.
      example:
        identifier: ...
        nameIdentifierScheme: ISNI
      properties:
        identifier:
          description: The identifier belonging to the creator.
          type: string
        nameIdentifierScheme:
          $ref: '#/components/schemas/NameIdentifierScheme'
      required:
        - identifier
        - nameIdentifierScheme
      title: DoiNameIdentifier
      type: object
    DoiCreator:
      description: JSON schema for DOI Metadata Creator.
      example:
        creatorName: ...
        nameIdentifiers:
          - identifier: ...
            nameIdentifierScheme: ISNI
          - identifier: ...
            nameIdentifierScheme: ORCID
      properties:
        creatorName:
          description: 'May be a corporate/institutional or personal name ("Family, Given").'
          type: string
        nameIdentifiers:
          description: >-
            Uniquely identifies an individual or legal entity, according to
            various schemas.
          items:
            $ref: '#/components/schemas/DoiNameIdentifier'
          type: array
      required:
        - creatorName
      title: DoiCreator
      type: object
    DoiResourceTypeGeneral:
      description: Describes the general type of media that DOI Metadata refers to.
      enum:
        - Audiovisual
        - Collection
        - DataPaper
        - Dataset
        - Event
        - Image
        - InteractiveResource
        - Model
        - PhysicalObject
        - Service
        - Software
        - Sound
        - Text
        - Workflow
        - Other
      title: DoiResourceTypeGeneral
      type: string
    DoiResourceType:
      description: Describes the type of media that the DOI Metadata refers to.
      example:
        resourceTypeGeneral: Image
      properties:
        resourceTypeGeneral:
          $ref: '#/components/schemas/DoiResourceTypeGeneral'
      title: DoiResourceType
      type: object
    DoiTitle:
      description: JSON schema for DOI Metadata Title.
      example:
        title: ...
      properties:
        title:
          description: A name or title by which a resource is known
          type: string
      title: DoiTitle
      type: object
    Doi:
      allOf:
        - $ref: '#/components/schemas/DoiAssociation'
        - properties:
            creators:
              description: >
                The main researchers involved in producing the data, or the
                authors

                of the publication, in priority order.
              items:
                $ref: '#/components/schemas/DoiCreator'
              type: array
            publicationYear:
              description: >-
                The year that this resource became publicly accessible. Must be
                in YYYY format.
              type: integer
            resourceType:
              $ref: '#/components/schemas/DoiResourceType'
            titles:
              description: A name or title by which a resource is known.
              items:
                $ref: '#/components/schemas/DoiTitle'
              type: array
          type: object
      required:
        - publicationYear
        - titles
        - creators
      description: JSON schema for fields associated with a DOI and its metadata.
      title: Doi
    DoiRequest:
      description: An AsynchronousRequestBody to mint or modify DOIs.
      example:
        concreteType: ...
        doi:
          associatedBy: ...
          associatedOn: ...
          associationId: ...
          creators:
            - creatorName: ...
              nameIdentifiers:
                - identifier: ...
                  nameIdentifierScheme: ORCID
            - creatorName: ...
              nameIdentifiers:
                - identifier: ...
                  nameIdentifierScheme: ORCID
          doiUri: ...
          doiUrl: ...
          etag: ...
          objectId: ...
          objectType: FORUM
          objectVersion: 12345
          publicationYear: 12345
          resourceType:
            resourceTypeGeneral: Dataset
          titles:
            - title: ...
            - title: ...
          updatedBy: ...
          updatedOn: ...
      properties:
        concreteType:
          description: concrete type
          type: string
        doi:
          $ref: '#/components/schemas/Doi'
      title: DoiRequest
      type: object
    AsyncJobId:
      description: Object used to track the status of an asynchronous job.
      example:
        token: ...
      properties:
        token:
          description: Token
          type: string
      title: AsyncJobId
      type: object
    DoiResponse:
      description: An response to a DOI mint or update request.
      example:
        concreteType: ...
        doi:
          associatedBy: ...
          associatedOn: ...
          associationId: ...
          creators:
            - creatorName: ...
              nameIdentifiers:
                - identifier: ...
                  nameIdentifierScheme: ORCID
                - identifier: ...
                  nameIdentifierScheme: ORCID
            - creatorName: ...
              nameIdentifiers:
                - identifier: ...
                  nameIdentifierScheme: ORCID
          doiUri: ...
          doiUrl: ...
          etag: ...
          objectId: ...
          objectType: FORM_GROUP
          objectVersion: 12345
          publicationYear: 12345
          resourceType:
            resourceTypeGeneral: Sound
          titles:
            - title: ...
            - title: ...
          updatedBy: ...
          updatedOn: ...
      properties:
        concreteType:
          description: concrete type
          type: string
        doi:
          $ref: '#/components/schemas/Doi'
      title: DoiResponse
      type: object
    String:
      description: String value
      type: string
    Etag:
      description: >
        Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle

        concurrent updates. Since the E-Tag changes every time an entity is
        updated

        it is used to detect when a client's current representation of an entity
        is

        out-of-date.
      type: string
    Entity:
      description: This is the base interface that all Entities implement.
      example:
        concreteType: ...
        createdBy: ...
        createdOn: ...
        description: ...
        etag: ...
        id: ...
        modifiedBy: ...
        modifiedOn: ...
        name: Trial ' + (_) . 09
        parentId: ...
      properties:
        concreteType:
          description: >
            Indicates which implementation of Entity this object represents.

            It should be set to one of the following:
            org.sagebionetworks.repo.model.Project,

            org.sagebionetworks.repo.model.Folder, or
            org.sagebionetworks.repo.model.FileEntity.
          type: string
        createdBy:
          description: The ID of the user that created this entity.
          type: string
        createdOn:
          description: The date this entity was created.
          type: string
        description:
          description: The description of this entity.
          type: string
          maxLength: 1000
        etag:
          $ref: '#/components/schemas/Etag'
        id:
          description: >
            The unique immutable ID for this entity. A new ID will be generated
            for new Entities.

            Once issued, this ID is guaranteed to never change or be re-issued
          type: string
        modifiedBy:
          description: The ID of the user that last modified this entity.
          type: string
        modifiedOn:
          description: The date this entity was last modified.
          type: string
        name:
          description: >
            The name of this entity. Must be 256 characters or less. Names may

            only contain: letters, numbers, spaces, underscores, hyphens,
            periods,

            plus signs, apostrophes, and parentheses
          type: string
          maxLength: 256
          minLength: 1
          pattern: '^[a-zA-Z0-9 +.''(_)]*$'
        parentId:
          description: The ID of the Entity that is the parent of this Entity.
          type: string
      title: Entity
      type: object
    Empty:
      type: object
    BooleanResult:
      description: Boolean result
      example:
        result: true
      properties:
        result:
          description: Boolean result
          type: boolean
      title: BooleanResult
      type: object
    ACCESS_TYPE:
      title: ACCESS_TYPE
      type: string
      description: The enumeration of possible permission.
      enum:
        - CREATE
        - READ
        - UPDATE
        - DELETE
        - CHANGE_PERMISSIONS
        - DOWNLOAD
        - UPLOAD
        - PARTICIPATE
        - SUBMIT
        - READ_PRIVATE_SUBMISSION
        - UPDATE_SUBMISSION
        - DELETE_SUBMISSION
        - TEAM_MEMBERSHIP_UPDATE
        - SEND_MESSAGE
        - CHANGE_SETTINGS
        - MODERATE
    RestrictableObjectType:
      description: >-
        JSON enum for the types of objects which can be restricted by an
        AccessRequirement.
      enum:
        - ENTITY
        - EVALUATION
        - TEAM
      title: RestrictableObjectType
      type: string
    RestrictableObjectDescriptor:
      description: Restrictable object descriptor
      example:
        id: ...
        type: EVALUATION
      properties:
        id:
          description: Id
          type: string
        type:
          $ref: '#/components/schemas/RestrictableObjectType'
      title: RestrictableObjectDescriptor
      type: object
    AccessRequirement:
      description: >
        Interface for JSON schema for AccessRequirement. The Access Requirement
        mechanism is

        distinct from the access control list in that it is controlled not by
        the entity

        owner but by a separate authority: Access Requirements are created and
        maintained

        by the Synapse Access and Compliance Team (ACT). ACTAccessRequirements
        can only be

        approved by the ACT. Self-sign Access Requirements can be approved by
        the user

        desiring access, but said user first has to meet 'terms of use'
        associated with the requirement.
      example:
        accessType: SUBMIT
        concreteType: ...
        createdBy: ...
        createdOn: ...
        description: ...
        etag: ...
        id: 12345
        modifiedBy: ...
        modifiedOn: ...
        subjectIds:
          - id: ...
            type: EVALUATION
          - id: ...
            type: TEAM
        versionNumber: 12345
      properties:
        accessType:
          $ref: '#/components/schemas/ACCESS_TYPE'
        concreteType:
          description: >-
            Indicates which type of AccessRequirement this object represents.
            Provided by the system, the user may not set this field.
          type: string
        createdBy:
          description: >-
            The user that created this object. Provided by the system, the user
            may not set this field.
          type: string
        createdOn:
          description: >-
            The date this object was created. Provided by the system, the user
            may not set this field.
          type: string
        description:
          description: Short optional description for the AR. Limited to 50 characters.
          type: string
        etag:
          description: >
            Synapse employs an Optimistic Concurrency Control (OCC) scheme to
            handle concurrent

            updates. Since the E-Tag changes every time an entity is updated it
            is used to

            detect when a client's current representation of an object is
            out-of-date.
          type: string
        id:
          description: >-
            The unique immutable ID. Provided by the system, the user may not
            set this field.
          type: number
        modifiedBy:
          description: >-
            The user that last modified this object. Provided by the system, the
            user may not set this field.
          type: string
        modifiedOn:
          description: >-
            The date this object was last modified. Provided by the system, the
            user may not set this field.
          type: string
        subjectIds:
          description: >-
            The IDs of the items controlled by this Access Requirement. Required
            when creating or updating.
          items:
            $ref: '#/components/schemas/RestrictableObjectDescriptor'
          type: array
        versionNumber:
          description: The version number issued to this version on the object.
          type: integer
      title: AccessRequirement
      type: object
    PaginatedResultsOfAccessRequirement:
      description: >-
        Retrieve paginated list of ALL Access Requirements associated with a
        Team.
      example:
        results:
          - accessType: READ
            concreteType: ...
            createdBy: ...
            createdOn: ...
            description: ...
            etag: ...
            id: 12345
            modifiedBy: ...
            modifiedOn: ...
            subjectIds:
              - id: ...
                type: EVALUATION
              - id: ...
                type: TEAM
            versionNumber: 12345
          - accessType: UPLOAD
            concreteType: ...
            createdBy: ...
            createdOn: ...
            description: ...
            etag: ...
            id: 12345
            modifiedBy: ...
            modifiedOn: ...
            subjectIds:
              - id: ...
                type: ENTITY
              - id: ...
                type: TEAM
            versionNumber: 12345
        totalNumberOfResults: 12345
      properties:
        results:
          description: The the id of the entity to which this reference refers
          items:
            $ref: '#/components/schemas/AccessRequirement'
          type: array
        totalNumberOfResults:
          description: >
            Calculating the actual totalNumberOfResults is not longer supported.

            Therefore, for each page, the totalNumberOfResults is estimated
            using

            the current page, limit, and offset. When the page size equals the
            limit,

            the totalNumberOfResults will be offset+pageSize+ 1. Otherwise, the

            totalNumberOfResults will be offset+pageSize.
          type: integer
      title: PaginatedResultsOfAccessRequirement
      type: object
    ResourceAccess:
      title: ResourceAccess
      type: object
      description: JSON schema for a ResourceAccess POJO
      example:
        accessType:
          - UPDATE
          - DELETE_SUBMISSION
        principalId: 12345
      properties:
        accessType:
          description: A list of types of access granted to the given principal
          type: array
          items:
            $ref: '#/components/schemas/ACCESS_TYPE'
        principalId:
          description: The id of the principal who is granted access
          type: integer
    AccessControlList:
      title: AccessControlList
      type: object
      description: >-
        Contains list of principals who can access the data with the allowed
        types of access for each.
      properties:
        createdBy:
          description: >-
            UNUSED -- maintained only for backwards compatibility with archived
            objects
          type: string
        creationDate:
          description: Created Date
          type: string
        etag:
          description: Synapse etag value
          type: string
        id:
          description: The entity id
          type: string
        modifiedBy:
          description: >-
            UNUSED -- maintained only for backwards compatibility with archived
            objects
          type: string
        modifiedOn:
          description: >-
            UNUSED -- maintained only for backwards compatibility with archived
            objects
          type: string
        resourceAccess:
          description: >-
            The list of principals who can access the data with the allowed
            types of access for each.
          type: array
          items:
            $ref: '#/components/schemas/ResourceAccess'
      example:
        createdBy: ...
        creationDate: '12345'
        etag: ...
        id: ...
        modifiedBy: ...
        modifiedOn: '12345'
        resourceAccess:
          - accessType:
              - UPDATE_SUBMISSION
              - CHANGE_PERMISSIONS
            principalId: 12345
          - accessType:
              - UPDATE
              - SEND_MESSAGE
            principalId: 12345
    AnnotationsValueType:
      title: AnnotationsValueType
      type: string
      description: |
        describes the type of a AnnotationV2's value
      enum:
        - STRING
        - DOUBLE
        - LONG
        - TIMESTAMP_MS
    AnnotationsValue:
      description: |
        Contains a AnnotationV2's value and its type
      example:
        type: DOUBLE
        value:
          - ...
          - ...
      properties:
        type:
          $ref: '#/components/schemas/AnnotationsValueType'
        value:
          description: >
            List of values as strings. Clients should use the "type" field to
            determine how to

            interpret the strings. Single values Annotations are represented as
            a list of size 1,

            and multiple values size > 1. Empty list or null is not allowed
          items:
            type: string
          type: array
      title: AnnotationsValue
      type: object
    Annotations_v2:
      description: >-
        Annotations are additional key-value pair metadata that are associated
        with an object.
      example:
        annotations:
          property1:
            type: STRING
            value:
              - ...
              - ...
          property2:
            type: STRING
            value:
              - ...
              - ...
        etag: ...
        id: ...
      properties:
        annotations:
          additionalProperties:
            $ref: '#/components/schemas/AnnotationsValue'
          description: >-
            Additional metadata associated with the object. The key is the name
            of your desired annotations. The value is an object containing a
            list of string values (use empty list to represent no values for
            key) and the value type associated with all values in the list
          type: object
        etag:
          description: >-
            Etag of the object to which this annotation belongs. To update an
            AnnotationV2, this field must match the current etag on the object.
          type: string
        id:
          description: ID of the object to which this annotation belongs
          type: string
      title: Annotations
      type: object
    EntityHeader:
      description: JSON schema for EntityHeader POJO
      example:
        benefactorId: 12345
        createdBy: ...
        createdOn: ...
        id: ...
        modifiedBy: ...
        modifiedOn: ...
        name: ...
        type: ...
        versionLabel: ...
        versionNumber: 12345
      properties:
        benefactorId:
          description: |
            The ID of the entity that this Entity's ACL is inherited from.'
          type: number
        createdBy:
          description: The ID of the user that created this entity.
          type: string
        createdOn:
          description: The date this entity was created.
          type: string
        id:
          description: The id of the entity
          type: string
        modifiedBy:
          description: The ID of the user that last modified this entity.
          type: string
        modifiedOn:
          description: The date this entity was last modified.
          type: string
        name:
          description: The name of the entity
          type: string
        type:
          description: The type of the entity
          type: string
        versionLabel:
          description: The user defined version label of the entity
          type: string
        versionNumber:
          description: The version number of the entity
          type: number
      title: EntityHeader
      type: object
    EntityBundleCreate_v2:
      description: Used to create Entity and associated metadata in a single transaction
      example:
        accessControlList:
          createdBy: ...
          creationDate: ...
          etag: ...
          id: ...
          modifiedBy: ...
          modifiedOn: ...
          resourceAccess:
            - accessType:
                - PARTICIPATE
                - UPDATE_SUBMISSION
              principalId: 12345
            - accessType:
                - DELETE
                - UPLOAD
              principalId: 12345
        annotations:
          annotations:
            property1:
              type: STRING
              value:
                - ...
                - ...
            property2:
              type: STRING
              value:
                - ...
                - ...
          etag: ...
          id: ...
        entity:
          concreteType: ...
          createdBy: ...
          createdOn: ...
          description: ...
          etag: ...
          id: ...
          modifiedBy: ...
          modifiedOn: ...
          name: ...
          parentId: ...
      properties:
        accessControlList:
          $ref: '#/components/schemas/AccessControlList'
        annotations:
          $ref: '#/components/schemas/Annotations_v2'
        entity:
          $ref: '#/components/schemas/Entity'
      title: EntityBundleCreate
      type: object
    EntityType:
      description: Type of the Entity
      enum:
        - project
        - folder
        - file
        - table
        - link
        - entityview
        - dockerrepo
        - submissionview
      title: EntityType
      type: string
    FileHandle:
      description: >-
        The FileHandle interface defines all of the fields that are common to
        all implementations.
      example:
        concreteType: ...
        contentMd5: ...
        contentSize: 12345
        contentType: ...
        createdBy: ...
        createdOn: ...
        etag: ...
        fileName: ...
        id: ...
        storageLocationId: 12345
      properties:
        concreteType:
          description: >
            This is used to indicate the implementation of this interface.

            For example, an S3FileHandle should be set to:
            org.sagebionetworks.repo.model.file.S3FileHandle
          type: string
        contentMd5:
          description: |
            The file's content MD5.
          type: string
        contentSize:
          description: The size of the file in bytes.
          type: integer
        contentType:
          description: |
            Must be: http://en.wikipedia.org/wiki/Internet_media_type
          type: string
        createdBy:
          description: The ID Of the user that created this file.
          type: string
        createdOn:
          description: The date when this file was uploaded.
          type: string
        etag:
          $ref: '#/components/schemas/Etag'
        fileName:
          description: 'The short, user visible name for this file.'
          type: string
        id:
          description: >
            The ID of this FileHandle. All references to this FileHandle will
            use this ID.

            Synapse will generate this ID when the FileHandle is created.
          type: string
        storageLocationId:
          description: The optional storage location descriptor
          type: integer
      title: FileHandle
      type: object
    EntityPath:
      description: |
        All entities in this Entity's path
      example:
        path:
          - benefactorId: 12345
            createdBy: ...
            createdOn: ...
            id: ...
            modifiedBy: ...
            modifiedOn: ...
            name: ...
            type: ...
            versionLabel: ...
            versionNumber: 12345
          - benefactorId: 12345
            createdBy: ...
            createdOn: ...
            id: ...
            modifiedBy: ...
            modifiedOn: ...
            name: ...
            type: ...
            versionLabel: ...
            versionNumber: 12345
      properties:
        path:
          description: >
            The list of all entities in this entites path.

            The first element is the root parent and the last element (n) is the
            entity.
          items:
            $ref: '#/components/schemas/EntityHeader'
          type: array
      title: EntityPath
      type: object
    UserEntityPermissions:
      description: The permission a User has for a given Entity
      example:
        canAddChild: true
        canCertifiedUserAddChild: true
        canCertifiedUserEdit: true
        canChangePermissions: true
        canChangeSettings: true
        canDelete: true
        canDownload: true
        canEdit: true
        canEnableInheritance: true
        canModerate: true
        canPublicRead: true
        canUpload: true
        canView: true
        isCertificationRequired: true
        isCertifiedUser: true
        ownerPrincipalId: 12345
      properties:
        canAddChild:
          description: Can the user add a child entity to this entity?
          type: boolean
        canCertifiedUserAddChild:
          description: >-
            Can the user add a child entity to this entity once they become a
            Certified User?
          type: boolean
        canCertifiedUserEdit:
          description: Can the user edit this entity once they become a Certified User?
          type: boolean
        canChangePermissions:
          description: Can the user change the permissions of this entity?
          type: boolean
        canChangeSettings:
          description: Can the user change the settings of this entity?
          type: boolean
        canDelete:
          description: Can the user delete this entity?
          type: boolean
        canDownload:
          description: >-
            Are there any access requirements precluding the user from
            downloading this entity?
          type: boolean
        canEdit:
          description: Can the user edit this entity?
          type: boolean
        canEnableInheritance:
          description: >
            Can the user delete the entity's access control list (so it inherits
            settings from an ancestor)?'
          type: boolean
        canModerate:
          description: >-
            Can the user moderate the forum associated with this entity? Note
            that only project entity has forum.
          type: boolean
        canPublicRead:
          description: Is this entity considered public?
          type: boolean
        canUpload:
          description: >-
            Are there any access requirements precluding the user from uploading
            into this entity (folder or project)?
          type: boolean
        canView:
          description: Can the user view this entity?
          type: boolean
        isCertificationRequired:
          description: >-
            Is the certification requirement enabled for the project of the
            entity?
          type: boolean
        isCertifiedUser:
          description: Is this user certified?
          type: boolean
        ownerPrincipalId:
          description: >
            The principal ID of the entity's owner (i.e. the entity's
            'createdBy')'
          type: number
      title: UserEntityPermissions
      type: object
    RestrictionLevel:
      description: ACT restriction levels
      enum:
        - OPEN
        - RESTRICTED_BY_TERMS_OF_USE
        - CONTROLLED_BY_ACT
      title: RestrictionLevel
      type: string
    RestrictionInformationResponse:
      description: The information about restriction level on a restrict-able object.
      example:
        hasUnmetAccessRequirement: true
        restrictionLevel: CONTROLLED_BY_ACT
      properties:
        hasUnmetAccessRequirement:
          description: >-
            True if user has at least one unmet access requirement on this
            restrict-able object; false otherwise.
          type: boolean
        restrictionLevel:
          $ref: '#/components/schemas/RestrictionLevel'
      title: RestrictionInformationResponse
      type: object
    ColumnType:
      description: >
        The column type determines the type of data that can be stored in a
        column.

        Switching between types (using a transaction with
        TableUpdateTransactionRequest

        in the "changes" list) is generally allowed except for switching to
        "_LIST" suffixed types.

        In such cases, a new column must be created and data must be copied over
        manually


        <table border="1">


        <tr>


        <th>name</th>


        <th>description</th>


        </tr>


        <tr>


        <td>STRING</td>


        <td>The STRING data type is a small text strings with between 1 and
        1,000 characters. Each STRING column will have a declared maximum size
        between 1 and 1,000 characters (with 50 characters as the default when
        maximumSize = null). The maximum STRING size is applied to the budget of
        the maximum table width, therefore it is best to use the smallest
        possible maximum size for the data. For strings larger than 250
        characters, consider using the LARGETEXT column type for improved
        performance. Each STRING column counts as maxSize*4 (4 bytes per
        character) towards the total width of a table.</td>


        </tr>


        <tr>


        <td>DOUBLE</td>


        <td>The DOUBLE data type is a double-precision 64-bit IEEE 754 floating
        point. Its range of values is approximately +/-1.79769313486231570E+308
        (15 significant decimal digits). Each DOUBLE column counts as 23 bytes
        towards the total width of a table.</td>


        </tr>


        <tr>


        <td>INTEGER</td>


        <td>The INTEGER data type is a 64-bit two's complement integer. The
        signed integer has a minimum value of -2^63 and a maximum value of
        2^63-1. Each INTEGER column counts as 20 bytes towards the total width
        of a table.</td>


        </tr>


        <tr>


        <td>BOOLEAN</td>


        <td>The BOOLEAN data type has only two possible values: 'true' and
        'false'. Each BOOLEAN column counts as 5 bytes towards the total width
        of a table.</td>


        </tr>


        <tr>


        <td>DATE</td>


        <td>The DATE data type represent the specified number of milliseconds
        since the standard base time known as 'the epoch', namely January 1,
        1970, 00:00:00 GM. Each DATE column counts as 20 bytes towards the total
        width of a table.</td>


        </tr>


        <tr>


        <td>FILEHANDLEID</td>


        <td>The FILEHANDLEID data type represents a file stored within a table.
        To store a file in a table, first use the 'File Services' to upload a
        file to generate a new FileHandle, then apply the fileHandle.id as the
        value for this column. Note: This column type works best for files that
        are binary (non-text) or text files that are 1 MB or larger. For text
        files that are smaller than 1 MB consider using the LARGETEXT column
        type to improve download performance. Each FILEHANDLEID column counts as
        20 bytes towards the total width of a table.</td>


        </tr>


        <tr>


        <td>ENTITYID</td>


        <td>The ENTITYID type represents a reference to a Synapse Entity. Values
        will include the 'syn' prefix, such as 'syn123'. Each ENTITYID column
        counts as 44 bytes towards the total width of a table.</td>


        </tr>


        <tr>


        <td>SUBMISSIONID</td>


        <td>The SUBMISSIONID type represents a reference to an evaluation
        submission. The value should be the ID of the referenced submission.
        Each SUBMISSIONID column counts as 20 bytes towards the total width of a
        table.</td>


        </tr>


        <tr>


        <td>EVALUATIONID</td>


        <td>The EVALUATIONID type represents a reference to an evaluation. The
        value should be the ID of the referenced evaluation. Each EVALUATIONID
        column counts as 20 bytes towards the total width of a table.</td>


        </tr>


        <tr>


        <td>LINK</td>


        <td>The LINK data type represents any URL with 1,000 characters or less.
        Each LINK column counts as maxSize*4 (4 bytes per character) towards the
        total width of a table.</td>


        </tr>


        <tr>


        <td>LARGETEXT</td>


        <td>The LARGETEXT data type represents a string that is greater than 250
        characters but less than 524,288 characters (2 MB of UTF-8 4 byte
        chars). For smaller strings consider using the STRING column type. For
        larger strings, consider using the FILEHANDELID column type. Each
        LARGE_TEXT column counts as 2133 bytes towards the total width of a
        table.</td>


        </tr>


        <tr>


        <td>USERID</td>


        <td>The USERID data type represents a reference to a Synapse User. The
        value should be the ID of the referenced User. Each USERID column counts
        as 20 bytes towards the total width of a table.</td>


        </tr>


        <tr>


        <td>STRING_LIST</td>


        <td>Multiple values of STRING</td>


        </tr>


        <tr>


        <td>INTEGER_LIST</td>


        <td>Multiple values of INTEGER.</td>


        </tr>


        <tr>


        <td>BOOLEAN_LIST</td>


        <td>Multiple values of BOOLEAN.</td>


        </tr>


        <tr>


        <td>DOUBLE</td>


        <td></td>


        </tr>

        <tr>


        <td>DATE_LIST</td>


        <td>Multiple values of DATE.</td>


        </tr>


        <tr>


        <td>ENTITYID_LIST</td>


        <td>Multiple values of ENTITYID.</td>


        </tr>


        <tr>


        <td>USERID_LIST</td>


        <td>Multiple values of USERID.</td>


        </tr>


        </table>
      enum:
        - STRING
        - DOUBLE
        - INTEGER
        - BOOLEAN
        - DATE
        - FILEHANDLEID
        - ENTITYID
        - SUBMISSIONID
        - EVALUATIONID
        - LINK
        - LARGETEXT
        - USERID
        - STRING_LIST
        - INTEGER_LIST
        - BOOLEAN_LIST
        - DATE_LIST
        - ENTITYID_LIST
        - USERID_LIST
      title: ColumnType
      type: string
    FacetType:
      description: Table Facet Type
      enum:
        - enumeration
        - range
      title: FacetType
      type: string
    ColumnModel:
      description: A column model contains the metadata of a single column of a TableEntity
      example:
        columnType: INTEGER_LIST
        defaultValue: ...
        enumValues:
          - ...
          - ...
        facetType: enumeration
        id: ...
        maximumListLength: 100
        maximumSize: 12345
        name: ...
      properties:
        columnType:
          $ref: '#/components/schemas/ColumnType'
        defaultValue:
          description: >
            The default value for this column. Columns of type ENTITYID,
            FILEHANDLEID, USERID,

            and LARGETEXT are not allowed to have default values.
          type: string
        enumValues:
          description: >
            Columns of type STRING can be constrained to an enumeration values
            set on this list.

            The maximum number of entries for an enum is 100
          items:
            type: string
          type: array
        facetType:
          $ref: '#/components/schemas/FacetType'
        id:
          description: The immutable ID issued to new columns
          type: string
        maximumListLength:
          description: >
            Required if using a columnType with a "_LIST" suffix.

            Describes the maximum number of values that will appear in that
            list.
          type: integer
          default: 100
          minimum: 1
          maximum: 100
        maximumSize:
          description: >
            A parameter for columnTypes with a maximum size. For example,
            ColumnType. STRINGs

            have a default maximum size of 50 characters, but can be set to a
            maximumSize of

            1 to 1000 characters. For columnType of STRING_LIST, this limits the
            size of

            individual string elements in the list
          type: number
        name:
          description: The display name of the column
          type: string
      title: ColumnModel
      type: object
    TableBundle:
      description: Metadata about a TableEntity that can be included in an EntityBundle
      example:
        columnModels:
          - columnType: EVALUATIONID
            defaultValue: ...
            enumValues:
              - ...
              - ...
            facetType: enumeration
            id: ...
            maximumListLength: 100
            maximumSize: 12345
            name: ...
          - columnType: STRING
            defaultValue: ...
            enumValues:
              - ...
              - ...
            facetType: range
            id: ...
            maximumListLength: 100
            maximumSize: 12345
            name: ...
        maxRowsPerPage: 12345
      properties:
        columnModels:
          description: The list of ColumnModels currently used by this table.
          items:
            $ref: '#/components/schemas/ColumnModel'
          type: array
        maxRowsPerPage:
          description: >
            The maximum number of rows that can be requested or posted for this
            table in a single call.

            This is a function of the columns that are currently assigned to
            this table.
          type: number
      title: TableBundle
      type: object
    EntityBundle_v2:
      description: Bundle to transport an Entity and related data objects
      example:
        accessControlList:
          createdBy: ...
          creationDate: ...
          etag: ...
          id: ...
          modifiedBy: ...
          modifiedOn: ...
          resourceAccess:
            - accessType:
                - CHANGE_PERMISSIONS
                - UPDATE_SUBMISSION
              principalId: 12345
            - accessType:
                - DOWNLOAD
                - MODERATE
              principalId: 12345
        annotations:
          annotations:
            property1:
              type: STRING
              value:
                - ...
                - ...
            property2:
              type: TIMESTAMP_MS
              value:
                - ...
                - ...
          etag: ...
          id: ...
        benefactorAcl:
          createdBy: ...
          creationDate: ...
          etag: ...
          id: ...
          modifiedBy: ...
          modifiedOn: ...
          resourceAccess:
            - accessType:
                - UPLOAD
                - DELETE
              principalId: 12345
            - accessType:
                - CHANGE_SETTINGS
                - CREATE
              principalId: 12345
        doiAssociation:
          associatedBy: ...
          associatedOn: ...
          associationId: ...
          doiUri: ...
          doiUrl: ...
          etag: ...
          objectId: ...
          objectType: VERIFICATION_SUBMISSION
          objectVersion: 12345
          updatedBy: ...
          updatedOn: ...
        entity:
          concreteType: ...
          createdBy: ...
          createdOn: ...
          description: ...
          etag: ...
          id: ...
          modifiedBy: ...
          modifiedOn: ...
          name: ...
          parentId: ...
        entityType: entityview
        fileHandles:
          - concreteType: ...
            contentMd5: ...
            contentSize: 12345
            contentType: ...
            createdBy: ...
            createdOn: ...
            etag: ...
            fileName: ...
            id: ...
            storageLocationId: 12345
          - concreteType: ...
            contentMd5: ...
            contentSize: 12345
            contentType: ...
            createdBy: ...
            createdOn: ...
            etag: ...
            fileName: ...
            id: ...
            storageLocationId: 12345
        fileName: ...
        hasChildren: true
        path:
          path:
            - benefactorId: 12345
              createdBy: ...
              createdOn: ...
              id: ...
              modifiedBy: ...
              modifiedOn: ...
              name: ...
              type: ...
              versionLabel: ...
              versionNumber: 12345
            - benefactorId: 12345
              createdBy: ...
              createdOn: ...
              id: ...
              modifiedBy: ...
              modifiedOn: ...
              name: ...
              type: ...
              versionLabel: ...
              versionNumber: 12345
        permissions:
          canAddChild: true
          canCertifiedUserAddChild: true
          canCertifiedUserEdit: true
          canChangePermissions: true
          canChangeSettings: true
          canDelete: true
          canDownload: true
          canEdit: true
          canEnableInheritance: true
          canModerate: true
          canPublicRead: true
          canUpload: true
          canView: true
          isCertificationRequired: true
          isCertifiedUser: true
          ownerPrincipalId: 12345
        restrictionInformation:
          hasUnmetAccessRequirement: true
          restrictionLevel: RESTRICTED_BY_TERMS_OF_USE
        rootWikiId: ...
        tableBundle:
          columnModels:
            - columnType: STRING
              defaultValue: ...
              enumValues:
                - ...
                - ...
              facetType: enumeration
              id: ...
              maximumListLength: 100
              maximumSize: 12345
              name: ...
            - columnType: USERID_LIST
              defaultValue: ...
              enumValues:
                - ...
                - ...
              facetType: range
              id: ...
              maximumListLength: 100
              maximumSize: 12345
              name: ...
          maxRowsPerPage: 12345
        threadCount: 12345
      properties:
        accessControlList:
          $ref: '#/components/schemas/AccessControlList'
        annotations:
          $ref: '#/components/schemas/Annotations_v2'
        benefactorAcl:
          $ref: '#/components/schemas/AccessControlList'
        doiAssociation:
          $ref: '#/components/schemas/DoiAssociation'
        entity:
          $ref: '#/components/schemas/Entity'
        entityType:
          $ref: '#/components/schemas/EntityType'
        fileHandles:
          description: FileHandles associated with this Entity
          items:
            $ref: '#/components/schemas/FileHandle'
          type: array
        fileName:
          description: 'If this Entity is a FileEntity, this is its filename'
          type: string
        hasChildren:
          description: Whether or not this Entity has children
          type: boolean
        path:
          $ref: '#/components/schemas/EntityPath'
        permissions:
          $ref: '#/components/schemas/UserEntityPermissions'
        restrictionInformation:
          $ref: '#/components/schemas/RestrictionInformationResponse'
        rootWikiId:
          description: Id of the root Wiki associated with this Entity
          type: string
        tableBundle:
          $ref: '#/components/schemas/TableBundle'
        threadCount:
          description: Number of disucssion threads that reference this Entity
          type: number
      title: EntityBundle
      type: object
    EntityBundleRequest:
      description: Specifies what fields to include in an EntityBundle
      example:
        includeAccessControlList: true
        includeAnnotations: true
        includeBenefactorACL: true
        includeDOIAssociation: true
        includeEntity: true
        includeEntityPath: true
        includeFileHandles: true
        includeFileName: true
        includeHasChildren: true
        includePermissions: true
        includeRestrictionInformation: true
        includeRootWikiId: true
        includeTableBundle: true
        includeThreadCount: true
      properties:
        includeAccessControlList:
          description: Include the AccessControlList for this Entity
          type: boolean
        includeAnnotations:
          description: Include Annotations associated with the Entity in the response.
          type: boolean
        includeBenefactorACL:
          description: >-
            Include the ACL of the Entity from which this Entity inherits its
            AccessControlList
          type: boolean
        includeDOIAssociation:
          description: Include DOIs associated with this Entity
          type: boolean
        includeEntity:
          description: Include the Entity in the response.
          type: boolean
        includeEntityPath:
          description: |
            Include EntityHeaders for all Entities in this Entity's path
          type: boolean
        includeFileHandles:
          description: Include all FileHandles associated with this Entity.
          type: boolean
        includeFileName:
          description: 'If this Entity is a FileEntity, include its filename'
          type: boolean
        includeHasChildren:
          description: Include boolean indicating whether this Entity has children
          type: boolean
        includePermissions:
          description: Include permissions of the current user on the entity.
          type: boolean
        includeRestrictionInformation:
          description: Include the RestrictionLevel of this Entity
          type: boolean
        includeRootWikiId:
          description: Include the id of the root Wiki associated with this Entity
          type: boolean
        includeTableBundle:
          description: 'If the Entity is a TableEntity, include Table specific metadata.'
          type: boolean
        includeThreadCount:
          description: Include the number of discussion threads that mention this Entity
          type: boolean
      title: EntityBundleRequest
      type: object
    PaginatedColumnModels:
      description: Paginated results of a ColumnModel
      example:
        results:
          - columnType: LINK
            defaultValue: ...
            enumValues:
              - ...
              - ...
            facetType: range
            id: ...
            maximumListLength: 100
            maximumSize: 12345
            name: ...
          - columnType: SUBMISSIONID
            defaultValue: ...
            enumValues:
              - ...
              - ...
            facetType: range
            id: ...
            maximumListLength: 100
            maximumSize: 12345
            name: ...
        totalNumberOfResults: 12345
      properties:
        results:
          description: The list of ColumnModels for this page
          items:
            $ref: '#/components/schemas/ColumnModel'
          type: array
        totalNumberOfResults:
          description: The total number of results
          type: integer
      title: PaginatedColumnModels
      type: object
    DataType:
      description: >
        Enumeration of data types the describe the contents of objects like
        Tables and Files.


        * SENSITIVE_DATA: The default type assigned to all Tables and Files.
        Sensitive_data indicates

        that the contents 'might' contain Protected Health Data (PHI), data with
        access restriction,

        data with special terms-of-use, or data that should not be released to
        the public.


        * OPEN_DATA: Open_data is data that is safe to release to the public.
        Open_data must not

        include Protected Health Data (PHI), data with access restrictions, or
        any type of terms-of-use.
      enum:
        - SENSITIVE_DATA
        - OPEN_DATA
      title: DataType
      type: string
    DataTypeResponse:
      description: |
        Response for an Object's DataType.
      example:
        dataType: OPEN_DATA
        objectId: ...
        objectType: FORM_GROUP
        updatedBy: ...
        updatedOn: ...
      properties:
        dataType:
          $ref: '#/components/schemas/DataType'
        objectId:
          description: The ID of the object.
          type: string
        objectType:
          $ref: '#/components/schemas/ObjectType'
        updatedBy:
          description: |
            The user that last updated this object's DataType.
          type: string
        updatedOn:
          description: |
            The date this object's DataType was last updated.
          type: string
      title: DataTypeResponse
      type: object
    DockerCommit:
      description: 'Metadata for an image in a Docker Repository: A digest and optional tag.'
      example:
        createdOn: ...
        digest: ...
        tag: ...
      properties:
        createdOn:
          description: The date this commit was created.
          type: string
        digest:
          description: 'A unique id for the commit, generated by hashing its content.'
          type: string
        tag:
          description: A user supplied name for a specific version of a repository.
          type: string
      title: DockerCommit
      type: object
    TotalNumberOfResults:
      description: >
        Calculating the actual totalNumberOfResults is not longer supported.

        Therefore, for each page, the totalNumberOfResults is estimated using
        the current page,

        limit, and offset. When the page size equals the limit, the
        totalNumberOfResults will

        be offset+pageSize+ 1. Otherwise, the totalNumberOfResults will be
        offset+pageSize.
      type: integer
    PaginatedResultsOfDockerCommit:
      description: JSON schema for Row POJO
      example:
        results:
          - createdOn: ...
            digest: ...
            tag: ...
          - createdOn: ...
            digest: ...
            tag: ...
        totalNumberOfResults: 12345
      properties:
        results:
          description: List of Docker commits.
          items:
            $ref: '#/components/schemas/DockerCommit'
          type: array
        totalNumberOfResults:
          $ref: '#/components/schemas/TotalNumberOfResults'
      title: PaginatedResultsOfDockerCommit
      type: object
    SubmissionQuota:
      title: SubmissionQuota
      type: object
      description: >-
        Maximum submissions per team/participant per submission round. If round
        information is omitted, then this indicates the overall submission limit
        per team/participant.
      example:
        firstRoundStart: '33333333'
        numberOfRounds: 1
        roundDurationMillis: 12345
        submissionLimit: 2
      properties:
        firstRoundStart:
          description: The date/time at which the first round begins.
          type: string
        numberOfRounds:
          description: 'The number of rounds, or null if there is no end.'
          type: integer
        roundDurationMillis:
          description: The duration of each round in milliseconds
          type: integer
        submissionLimit:
          description: the maximum number of submissions per team/participant per round.
          type: integer
    EvaluationStatus:
      title: EvaluationStatus
      type: string
      description: The possible states of a Synapse Evaluation.
      enum:
        - PLANNED
        - OPEN
        - CLOSED
        - COMPLETED
    Evaluation:
      title: Evaluation
      type: object
      description: >-
        An Evaluation is the core object of the Evaluation API, used to support
        collaborative data analysis challenges in Synapse.
      example:
        contentSource: syn234444
        createdOn: '12345'
        description: Evaluation Queue
        etag: aaaaa
        id: '12345'
        name: Test Evaluation
        ownerId: '22222'
        quota:
          firstRoundStart: '12345'
          numberOfRounds: 12345
          roundDurationMillis: 12345
          submissionLimit: 12345
        status: PLANNED
        submissionInstructionsMessage: Instructions
        submissionReceiptMessage: Received
      properties:
        contentSource:
          description: >-
            The Synapse ID of the Entity to which this Evaluation belongs, e.g.
            a reference to a Synapse project.
          type: string
        createdOn:
          description: The date on which Evaluation was created.
          type: string
        description:
          description: A text description of this Evaluation.
          type: string
        etag:
          description: >
            Synapse employs an Optimistic Concurrency Control (OCC) scheme to
            handle concurrent updates.

            The eTag changes every time an Evaluation is updated; it is used to
            detect when a client's

            copy of an Evaluation is out-of-date.
          type: string
        id:
          description: The unique immutable ID for this Evaluation.
          type: string
        name:
          description: The name of this Evaluation
          type: string
        ownerId:
          description: The ID of the Synapse user who created this Evaluation.
          type: string
        quota:
          $ref: '#/components/schemas/SubmissionQuota'
        status:
          $ref: '#/components/schemas/EvaluationStatus'
        submissionInstructionsMessage:
          description: >-
            Message to display to users detailing acceptable formatting for
            Submissions to this Evaluation.
          type: string
        submissionReceiptMessage:
          description: >-
            Message to display to users upon successful submission to this
            Evaluation.
          type: string
    PaginatedResultsOfEvaluation:
      title: PaginatedResultsOfEvaluation
      type: object
      description: 'Gets a collection of Evaluations, within a given range.'
      properties:
        results:
          type: array
          description: List of evaluations
          items:
            $ref: '#/components/schemas/Evaluation'
        totalNumberOfResults:
          description: Number of results per page
          type: integer
    FileHandleResults:
      description: List of file handles
      example:
        list:
          - concreteType: ...
            contentMd5: ...
            contentSize: 12345
            contentType: ...
            createdBy: ...
            createdOn: ...
            etag: ...
            fileName: ...
            id: ...
            storageLocationId: 12345
          - concreteType: ...
            contentMd5: ...
            contentSize: 12345
            contentType: ...
            createdBy: ...
            createdOn: ...
            etag: ...
            fileName: ...
            id: ...
            storageLocationId: 12345
      properties:
        list:
          description: List of file handles
          items:
            $ref: '#/components/schemas/FileHandle'
          type: array
      title: FileHandleResults
      type: object
    Used:
      description: Interface for JSON schema for a Used record in Provenance
      example:
        concreteType: ...
        wasExecuted: true
      properties:
        concreteType:
          description: Concrete Type
          type: string
        wasExecuted:
          description: The enclosed entity was used and also executed in the Activity
          type: boolean
      title: Used
      type: object
    Activity:
      description: Interface for JSON schema for Activity POJO.
      example:
        createdBy: ...
        createdOn: ...
        description: ...
        etag: ...
        id: ...
        modifiedBy: ...
        modifiedOn: ...
        name: ...
        used:
          - concreteType: ...
            wasExecuted: true
          - concreteType: ...
            wasExecuted: true
      properties:
        createdBy:
          description: The user that created this object.
          type: string
        createdOn:
          description: The date this object was created.
          type: string
        description:
          description: A description of this Activity.
          type: string
        etag:
          $ref: '#/components/schemas/Etag'
        id:
          description: The unique immutable ID
          type: string
        modifiedBy:
          description: The user that last modified this object.
          type: string
        modifiedOn:
          description: The date this object was last modified.
          type: string
        name:
          description: A name for this Activity.
          type: string
        used:
          description: The entities used by this Activity.
          items:
            $ref: '#/components/schemas/Used'
          type: array
      title: Activity
      type: object
    JSONObject:
      description: Json Object
      example: {}
      title: JSONObject
      type: object
    MessageToUser:
      description: JSON schema for a message to another user
      example:
        bcc: ...
        cc: ...
        createdBy: ...
        createdOn: ...
        fileHandleId: ...
        id: ...
        inReplyTo: ...
        inReplyToRoot: ...
        isNotificationMessage: true
        notificationUnsubscribeEndpoint: ...
        recipients:
          - ...
          - ...
        subject: ...
        to: ...
        userProfileSettingEndpoint: ...
        withProfileSettingLink: true
        withUnsubscribeLink: true
      properties:
        bcc:
          description: |
            The email addresses in the 'bcc' field of the email message
          type: string
        cc:
          description: |
            The email addresses in the 'cc' field of the email message
          type: string
        createdBy:
          description: The unique identifier of the sender of this message
          type: string
        createdOn:
          description: When this message was created
          type: string
        fileHandleId:
          description: >
            The S3 file handle storing the body of this message. Note: The
            file's mime type

            should be 'text/plain' or 'text/html'. If no character encoding is
            specified,

            then UTF-8 is assumed.
          type: string
        id:
          description: The unique identifier of the message or comment
          type: string
        inReplyTo:
          description: The unique identifier of the message being replied to. Can be null
          type: string
        inReplyToRoot:
          description: The unique identifier of the root message being replied to
          type: string
        isNotificationMessage:
          description: >-
            A notification message is sent from a noreply email address,
            delivery failures are not sent back to the sender
          type: boolean
        notificationUnsubscribeEndpoint:
          description: |
            the portal prefix for one-click email unsubscription.
            A signed, serialized token is appended to create the complete URL.
            If omitted, the default endpoint will be used.
          type: string
        recipients:
          description: The unique identifiers of the intended recipients of a message
          items:
            type: string
          type: array
        subject:
          description: Topic of this message. Optional
          type: string
        to:
          description: |
            The email addresses in the 'to' field of the email message
          type: string
        userProfileSettingEndpoint:
          description: >-
            the portal link to user profile setting page. If omitted, the
            default endpoint will be used.
          type: string
        withProfileSettingLink:
          description: should the user profile setting link be included in the email?
          type: boolean
        withUnsubscribeLink:
          description: should the unsubscribe link be included in the email?
          type: boolean
      title: MessageToUser
      type: object
    JsonSchemaVersionInfo:
      description: Information about a single version of a JSON schema.
      example:
        $id: ...
        createdBy: ...
        createdOn: ...
        jsonSHA256Hex: ...
        organizationId: ...
        organizationName: ...
        schemaId: ...
        schemaName: ...
        semanticVersion: ...
        versionId: ...
      properties:
        $id:
          description: |
            The full '$id' of this schema version
          type: string
        createdBy:
          description: The ID of the user that created this JSON schema version.
          type: string
        createdOn:
          description: The date this JSON schema version was created.
          type: string
        jsonSHA256Hex:
          description: The SHA-256 hexadecimal hash of the UTF-8 encoded JSON schema.
          type: string
        organizationId:
          description: The Synapse issued numeric identifier for the organization.
          type: string
        organizationName:
          description: The name of the organization to which this schema belongs.
          type: string
        schemaId:
          description: The Synapse issued numeric identifier for the schema.
          type: string
        schemaName:
          description: The name of the this schema.
          type: string
        semanticVersion:
          description: >
            The semantic version label provided when this version was created.

            Can be null if a semantic version was not provided when this version
            was created.
          type: string
        versionId:
          description: The Synapse issued numeric identifier for this version.
          type: string
      title: JsonSchemaVersionInfo
      type: object
    BoundObjectType:
      description: Object types that can be bound to a JSON schema.
      enum:
        - entity
      title: BoundObjectType
      type: string
    JsonSchemaObjectBinding:
      description: Describes the binding of a JSON schema to an object
      example:
        createdBy: ...
        createdOn: ...
        jsonSchemaVersionInfo:
          $id: ...
          createdBy: ...
          createdOn: ...
          jsonSHA256Hex: ...
          organizationId: ...
          organizationName: ...
          schemaId: ...
          schemaName: ...
          semanticVersion: ...
          versionId: ...
        objectId: 12345
        objectType: entity
      properties:
        createdBy:
          description: The ID of the user that bound this object to the schema.
          type: string
        createdOn:
          description: The date this binding was created.
          type: string
        jsonSchemaVersionInfo:
          $ref: '#/components/schemas/JsonSchemaVersionInfo'
        objectId:
          description: The numeric identifier of the object bound to a JSON schema
          type: integer
        objectType:
          $ref: '#/components/schemas/BoundObjectType'
      title: JsonSchemaObjectBinding
      type: object
    BindSchemaToEntityRequest:
      description: Request to bind an Entity to a JSON schema.
      example:
        entityId: ...
        schema$id: ...
      properties:
        entityId:
          description: The ID of the the entity.
          type: string
        schema$id:
          description: >
            The $id of the JSON schema to bind to the entity.

            Note: If the $id includes a semantic version then entity will be

            bound to that specific version. If the $id excludes the semantic

            version then the entity will be bound to the latest version of that
            schema.
          type: string
      title: BindSchemaToEntityRequest
      type: object
    ObjectType_schema:
      description: Type of Synapse objects that can have a JSON schema.
      enum:
        - entity
      title: ObjectType
      type: string
    ValidationException:
      description: >-
        A recursive ValidationException that describes all schema violations for
        an entire schema tree.
      example:
        causingExceptions:
          - causingExceptions:
              - {}
              - {}
            keyword: ...
            message: ...
            pointerToViolation: ...
            schemaLocation: ...
          - causingExceptions:
              - {}
              - {}
            keyword: ...
            message: ...
            pointerToViolation: ...
            schemaLocation: ...
        keyword: ...
        message: ...
        pointerToViolation: ...
        schemaLocation: ...
      properties:
        causingExceptions:
          description: An array of sub-exceptions.
          items:
            $ref: '#/components/schemas/ValidationException'
          type: array
        keyword:
          description: The JSON schema keyword which was violated.
          type: string
        message:
          description: The description of the validation failure.
          type: string
        pointerToViolation:
          description: >-
            A JSON Pointer denoting the path from the input document root to its
            fragment which caused the validation failure.
          type: string
        schemaLocation:
          description: >-
            A JSON Pointer denoting the path from the schema JSON root to the
            violated keyword.
          type: string
      title: ValidationException
      type: object
    ValidationResults:
      description: Results of validating an object against a schema
      example:
        allValidationMessages:
          - ...
          - ...
        isValid: true
        objectEtag: ...
        objectId: ...
        objectType: entity
        schema$id: ...
        validatedOn: ...
        validationErrorMessage: ...
        validationException:
          causingExceptions:
            - {}
            - {}
          keyword: ...
          message: ...
          pointerToViolation: ...
          schemaLocation: ...
      properties:
        allValidationMessages:
          description: >
            If the object is not valid according to the schema, a the flat list

            of error messages will be provided with one error message per
            sub-schema.
          items:
            type: string
          type: array
        isValid:
          description: True if the object is currently valid according to the schema.
          type: boolean
        objectEtag:
          description: >
            The etag of the object at the time of validation.

            Note: If this etag does not match the current etag of the object
            then

            these validation results should be considered out of date.
          type: string
        objectId:
          description: The identifier of the object that was validated.
          type: string
        objectType:
          $ref: '#/components/schemas/ObjectType_schema'
        schema$id:
          description: The $id of the schema that the object was validated against.
          type: string
        validatedOn:
          description: The date-time this object was validated
          type: string
        validationErrorMessage:
          description: |
            If the object is not valid according to the schema, a simple one
            line error message will be provided.
          type: string
        validationException:
          $ref: '#/components/schemas/ValidationException'
      title: ValidationResults
      type: object
    ListValidationResultsRequest:
      description: >-
        Request to get a single page of JSON schema validation results for a
        given Entity container.
      example:
        containerId: ...
        nextPageToken: ...
      properties:
        containerId:
          description: The ID of the Entity container to get.
          type: string
        nextPageToken:
          description: >
            Forward the returned 'nextPageToken' to get the next page of
            results.
          type: string
      title: ListValidationResultsRequest
      type: object
    ListValidationResultsResponse:
      description: A single page of the JSON schema validation results.
      example:
        nextPageToken: ...
        page:
          - allValidationMessages:
              - ...
              - ...
            isValid: true
            objectEtag: ...
            objectId: ...
            objectType: entity
            schema$id: ...
            validatedOn: ...
            validationErrorMessage: ...
            validationException:
              causingExceptions:
                - {}
                - {}
              keyword: ...
              message: ...
              pointerToViolation: ...
              schemaLocation: ...
          - allValidationMessages:
              - ...
              - ...
            isValid: true
            objectEtag: ...
            objectId: ...
            objectType: entity
            schema$id: ...
            validatedOn: ...
            validationErrorMessage: ...
            validationException:
              causingExceptions:
                - {}
                - {}
              keyword: ...
              message: ...
              pointerToViolation: ...
              schemaLocation: ...
      properties:
        nextPageToken:
          description: Forward this token to get the next page of results.
          type: string
        page:
          description: Page of results
          items:
            $ref: '#/components/schemas/ValidationResults'
          type: array
      title: ListValidationResultsResponse
      type: object
    ValidationSummaryStatistics:
      description: >-
        Summary statistics for the JSON schema validation results for the
        children of an Entity container (Project or Folder)
      example:
        containerId: ...
        generatedOn: ...
        numberOfInvalidChildren: 12345
        numberOfUnknownChildren: 12345
        numberOfValidChildren: 12345
        totalNumberOfChildren: 12345
      properties:
        containerId:
          description: The ID of the container Entity.
          type: string
        generatedOn:
          description: The date-time when the statistics were calculated.
          type: string
        numberOfInvalidChildren:
          description: >-
            The total number of children that are invalid according to their
            bound JSON schema.
          type: integer
        numberOfUnknownChildren:
          description: >-
            The total number of children that do not have validation results.
            This can occur when a child does not have a bound JSON schema or
            when a child has not been validated yet.
          type: integer
        numberOfValidChildren:
          description: >-
            The total number of children that are valid according to their bound
            JSON schema.
          type: integer
        totalNumberOfChildren:
          description: The total number of children in the container.
          type: integer
      title: ValidationSummaryStatistics
      type: object
    StsCredentials:
      description: Temporary AWS credentials vended by STS (Security Token Service).
      example:
        accessKeyId: ...
        baseKey: ...
        bucket: ...
        expiration: ...
        secretAccessKey: ...
        sessionToken: ...
      properties:
        accessKeyId:
          description: AWS access key ID.
          type: string
        baseKey:
          description: The S3 key prefix that these credentials have access to.
          type: string
        bucket:
          description: The bucket that these credentials have access to.
          type: string
        expiration:
          description: The date-time that these credentials expire.
          type: string
        secretAccessKey:
          description: AWS secret access key.
          type: string
        sessionToken:
          description: AWS temporary session token.
          type: string
      title: StsCredentials
      type: object
    SelectColumn:
      description: A column model contains the metadata of a single column of a TableEntity
      example:
        columnType: BOOLEAN
        id: ...
        name: ...
      properties:
        columnType:
          $ref: '#/components/schemas/ColumnType'
        id:
          description: >-
            The optional ID of the select column, if this is a direct column
            selected
          type: string
        name:
          description: The required display name of the column
          type: string
      title: SelectColumn
      type: object
    DownloadFromTableResult:
      description: The response body of an asynchronous CSV table download job.
      example:
        concreteType: ...
        etag: ...
        headers:
          - columnType: LINK
            id: ...
            name: ...
          - columnType: STRING_LIST
            id: ...
            name: ...
        resultsFileHandleId: ...
        tableId: ...
      properties:
        concreteType:
          description: Concrete Type
          type: string
        etag:
          description: >
            Any RowSet returned from Synapse will contain the current etag of
            the change set.

            To update any rows from a RowSet the etag must be provided with the
            POST.
          type: string
        headers:
          description: The list of SelectColumns that describes the rows of this set.
          items:
            $ref: '#/components/schemas/SelectColumn'
          type: array
        resultsFileHandleId:
          description: >
            The resulting file handle ID can be used to download the CSV file

            created by this job. The file will contain all of the data requested
            in the

            query SQL provided when the job was started.
          type: string
        tableId:
          description: >-
            The ID of the table identified in the from clause of the table
            query.
          type: string
      title: DownloadFromTableResult
      type: object
    QueryFilter:
      description: Query filter
      example: {}
      title: QueryFilter
      type: object
    FacetColumnRequest:
      description: >-
        A set of values that have been selected for filtering in a faceted
        column
      example:
        columnName: ...
        concreteType: ...
      properties:
        columnName:
          description: The name of the faceted column
          type: string
        concreteType:
          description: Conrete Type
          type: string
      title: FacetColumnRequest
      type: object
    SortDirection:
      description: >-
        Optional sort direction. Default is the default mysql sort direction for
        that type.
      enum:
        - ASC
        - DESC
      title: SortDirection
      type: string
    SortItem:
      description: Sort schema
      example:
        column: ...
        direction: ASC
      properties:
        column:
          description: The column to sort on.
          type: string
        direction:
          $ref: '#/components/schemas/SortDirection'
      title: SortItem
      type: object
    Query:
      description: Query
      example:
        additionalFilters:
          - {}
          - {}
        includeEntityEtag: true
        limit: 12345
        offset: 12345
        selectedFacets:
          - columnName: ...
            concreteType: ...
          - columnName: ...
            concreteType: ...
        sort:
          - column: ...
            direction: ASC
          - column: ...
            direction: DESC
        sql: ...
      properties:
        additionalFilters:
          description: >
            Appends additional filters to the SQL query. These are applied
            before facets.

            Filters within the list have an AND relationship. If a WHERE clause
            already

            exists on the SQL query or facets are selected, it will also be
            ANDed with

            the query generated by these additional filters.
          items:
            $ref: '#/components/schemas/QueryFilter'
          type: array
        includeEntityEtag:
          description: >
            Optional, default false. When true, a query results against views
            will

            include the Etag of each entity in the results. Note: The etag is
            necessary

            to update Entities in the view.
          type: boolean
        limit:
          description: The optional limit to the results
          type: integer
        offset:
          description: The optional offset into the results
          type: integer
        selectedFacets:
          description: The selected facet filters.
          items:
            $ref: '#/components/schemas/FacetColumnRequest'
          type: array
        sort:
          description: To sort values
          items:
            $ref: '#/components/schemas/SortItem'
          type: array
        sql:
          description: The SQL query string.
          type: string
      title: Query
      type: object
    CsvTableDescriptor:
      description: The description of a csv for upload or download.
      example:
        escapeCharacter: ...
        isFirstLineHeader: true
        lineEnd: ...
        quoteCharacter: ...
        separator: ...
      properties:
        escapeCharacter:
          description: >
            The escape character to be used for escaping a separator or quote in
            the

            resulting file. The default character '\\' will be used if this is
            not

            provided by the caller.
          type: string
        isFirstLineHeader:
          description: |
            Is the first line a header? The default value of 'true' will
            be used if this is not provided by the caller.
          type: boolean
        lineEnd:
          description: >
            The line feed terminator to be used for the resulting file.

            The default value of '\n' will be used if this is not provided by
            the caller.
          type: string
        quoteCharacter:
          description: >
            The character to be used for quoted elements in the resulting file.

            The default character '"' will be used if this is not provided by
            the caller.
          type: string
        separator:
          description: >
            The delimiter to be used for separating entries in the resulting
            file.

            The default character ',' will be used if this is not provided by
            the caller.

            For tab-separated values use '\t'
          type: string
      title: CsvTableDescriptor
      type: object
    DownloadFromTableRequest:
      allOf:
        - $ref: '#/components/schemas/Query'
        - properties:
            concreteType:
              description: Concrete Type
              type: string
            csvTableDescriptor:
              $ref: '#/components/schemas/CsvTableDescriptor'
            entityId:
              description: Entity Id
              type: string
            includeRowIdAndRowVersion:
              description: |
                Should the first two columns contain the row ID and row version?
                The default value is 'true'.
              type: boolean
              default: true
            writeHeader:
              description: >
                Should the first line contain the columns names as a header in
                the resulting file?

                Set to 'true' to include the headers else, 'false'. The default
                value is 'true'.
              type: boolean
              default: true
          type: object
      description: A CSV table download request.
      title: DownloadFromTableRequest
    RowReference:
      description: Reference for a single Row of a TableEntity
      example:
        rowId: 12345
        versionNumber: 12345
      properties:
        rowId:
          description: The immutable ID issued to a new row.
          type: integer
        versionNumber:
          description: >-
            The version number of this row. Each row version is immutable, so
            when a row is updated a new version is created.
          type: integer
      title: RowReference
      type: object
    RowReferenceSet:
      description: Represents a set of RowReferences of a TableEntity
      example:
        etag: ...
        headers:
          - columnType: DATE
            id: ...
            name: ...
          - columnType: USERID
            id: ...
            name: ...
        rows:
          - rowId: 12345
            versionNumber: 12345
          - rowId: 12345
            versionNumber: 12345
        tableId: ...
      properties:
        etag:
          description: >-
            When a RowReferenceSet is returned from a table update, this will be
            set to the current etag of the table.
          type: string
        headers:
          description: The list of ColumnModels ID that describes the rows of this set.
          items:
            $ref: '#/components/schemas/SelectColumn'
          type: array
        rows:
          description: >-
            Each RowReference of this list refers to a single version of a
            single row of a TableEntity.
          items:
            $ref: '#/components/schemas/RowReference'
          type: array
        tableId:
          description: The ID of the TableEntity than owns these rows
          type: string
      title: RowReferenceSet
      type: object
    TableFileHandleResults:
      description: JSON schema for TableFileHandleResults.
      example:
        headers:
          - columnType: EVALUATIONID
            id: ...
            name: ...
          - columnType: DATE_LIST
            id: ...
            name: ...
        rows:
          - list:
              - concreteType: ...
                contentMd5: ...
                contentSize: 12345
                contentType: ...
                createdBy: ...
                createdOn: ...
                etag: ...
                fileName: ...
                id: ...
                storageLocationId: 12345
              - concreteType: ...
                contentMd5: ...
                contentSize: 12345
                contentType: ...
                createdBy: ...
                createdOn: ...
                etag: ...
                fileName: ...
                id: ...
                storageLocationId: 12345
          - list:
              - concreteType: ...
                contentMd5: ...
                contentSize: 12345
                contentType: ...
                createdBy: ...
                createdOn: ...
                etag: ...
                fileName: ...
                id: ...
                storageLocationId: 12345
              - concreteType: ...
                contentMd5: ...
                contentSize: 12345
                contentType: ...
                createdBy: ...
                createdOn: ...
                etag: ...
                fileName: ...
                id: ...
                storageLocationId: 12345
        tableId: ...
      properties:
        headers:
          description: The list of ColumnModels ID that describes the rows of this set.
          items:
            $ref: '#/components/schemas/SelectColumn'
          type: array
        rows:
          description: For each row a list of file handles for each requested column
          items:
            $ref: '#/components/schemas/FileHandleResults'
          type: array
        tableId:
          description: The ID of the TableEntity than owns these rows
          type: string
      title: TableFileHandleResults
      type: object
    FacetColumnResult:
      description: Resulting information about a faceted column
      example:
        columnName: ...
        concreteType: ...
        facetType: enumeration
      properties:
        columnName:
          description: The name of the faceted column
          type: string
        concreteType:
          description: Concrete Type
          type: string
        facetType:
          $ref: '#/components/schemas/FacetType'
      title: FacetColumnResult
      type: object
    QueryNextPageToken:
      description: Next page token for query
      example:
        concreteType: ...
        entityId: ...
        token: ...
      properties:
        concreteType:
          description: Concrete Type
          type: string
        entityId:
          description: The ID of an Entity.
          type: string
        token:
          description: The token for the next page.
          type: string
      title: QueryNextPageToken
      type: object
    Row_table:
      description: Represents a single row of a TableEntity
      example:
        etag: ...
        rowId: 12345
        values:
          - ...
          - ...
        versionNumber: 12345
      properties:
        etag:
          description: >-
            For queries against EntityViews with query.includeEtag=true, this
            field will contain the etag of the entity. Will be null for all
            other cases.
          type: string
        rowId:
          description: The immutable ID issued to a new row.
          type: integer
        values:
          description: >-
            The values for each column of this row. To delete a row, set this to
            an empty list: []
          items:
            type: string
          type: array
        versionNumber:
          description: >-
            The version number of this row. Each row version is immutable, so
            when a row is updated a new version is created.
          type: integer
      title: Row
      type: object
    RowSet:
      description: Represents a set of row of a TableEntity
      example:
        concreteType: ...
        etag: ...
        headers:
          - columnType: FILEHANDLEID
            id: ...
            name: ...
          - columnType: SUBMISSIONID
            id: ...
            name: ...
        rows:
          - etag: ...
            rowId: 12345
            values:
              - ...
              - ...
            versionNumber: 12345
          - etag: ...
            rowId: 12345
            values:
              - ...
              - ...
            versionNumber: 12345
        tableId: ...
      properties:
        concreteType:
          description: Concrete Type
          type: string
        etag:
          description: >-
            Any RowSet returned from Synapse will contain the current etag of
            the change set. To update any rows from a RowSet the etag must be
            provided with the POST.
          type: string
        headers:
          description: The list of SelectColumns that describes the rows of this set.
          items:
            $ref: '#/components/schemas/SelectColumn'
          type: array
        rows:
          description: >-
            The Rows of this set. The index of each row value aligns with the
            index of each header.
          items:
            $ref: '#/components/schemas/Row_table'
          type: array
        tableId:
          description: The ID of the TableEntity than owns these rows
          type: string
      title: RowSet
      type: object
    QueryResult:
      description: A page of query result.
      example:
        concreteType: ...
        nextPageToken:
          concreteType: ...
          entityId: ...
          token: ...
        queryResults:
          concreteType: ...
          etag: ...
          headers:
            - columnType: BOOLEAN_LIST
              id: ...
              name: ...
            - columnType: USERID_LIST
              id: ...
              name: ...
          rows:
            - etag: ...
              rowId: 12345
              values:
                - ...
                - ...
              versionNumber: 12345
            - etag: ...
              rowId: 12345
              values:
                - ...
                - ...
              versionNumber: 12345
          tableId: ...
      properties:
        concreteType:
          description: Concrete Type
          type: string
        nextPageToken:
          $ref: '#/components/schemas/QueryNextPageToken'
        queryResults:
          $ref: '#/components/schemas/RowSet'
      title: QueryResult
      type: object
    SumFileSizes:
      description: |
        The sum of the file size for all files in the given view query.
        Use mask = 0x40 to include in the bundle.
      example:
        greaterThan: true
        sumFileSizesBytes: 12345
      properties:
        greaterThan:
          description: >
            When true, the actual sum of the files sizes is greater than the
            value

            provided with 'sumFileSizesBytes'. When false, the actual sum of the

            files sizes is equlas the value provided with 'sumFileSizesBytes'
          type: boolean
        sumFileSizesBytes:
          description: The sum of the file size in bytes.
          type: integer
      title: SumFileSizes
      type: object
    QueryResultBundle:
      description: A bundle of information about a query result.
      example:
        columnModels:
          - columnType: DATE_LIST
            defaultValue: ...
            enumValues:
              - ...
              - ...
            facetType: enumeration
            id: ...
            maximumListLength: 100
            maximumSize: 12345
            name: ...
          - columnType: DOUBLE
            defaultValue: ...
            enumValues:
              - ...
              - ...
            facetType: range
            id: ...
            maximumListLength: 100
            maximumSize: 100
            name: ...
        concreteType: ...
        facets:
          - columnName: ...
            concreteType: ...
            facetType: enumeration
          - columnName: ...
            concreteType: ...
            facetType: enumeration
        lastUpdatedOn: ...
        maxRowsPerPage: 12345
        queryCount: 12345
        queryResult:
          concreteType: ...
          nextPageToken:
            concreteType: ...
            entityId: ...
            token: ...
          queryResults:
            concreteType: ...
            etag: ...
            headers:
              - {}
              - {}
            rows:
              - {}
              - {}
            tableId: ...
        selectColumns:
          - columnType: USERID_LIST
            id: ...
            name: ...
          - columnType: EVALUATIONID
            id: ...
            name: ...
        sumFileSizes:
          greaterThan: true
          sumFileSizesBytes: 12345
      properties:
        columnModels:
          description: >-
            The list of ColumnModels for the table. Use mask = 0x10 to include
            in the bundle.
          items:
            $ref: '#/components/schemas/ColumnModel'
          type: array
        concreteType:
          description: Concrete Type
          type: string
        facets:
          description: The list of facets for the search results
          items:
            $ref: '#/components/schemas/FacetColumnResult'
          type: array
        lastUpdatedOn:
          description: >
            The date-time when this table/view was last updated.

            Note: Since views are eventually consistent a view might still be

            out-of-date even if it was recently updated. Use mask = 0x80 to
            include in the bundle.
          type: string
        maxRowsPerPage:
          description: >-
            The maximum number of rows that can be retrieved in a single call.
            This is a function of the columns that are selected in the query.
            Use mask = 0x8 to include in the bundle.
          type: integer
        queryCount:
          description: >-
            The total number of rows that match the query. Use mask = 0x2 to
            include in the bundle.
          type: integer
        queryResult:
          $ref: '#/components/schemas/QueryResult'
        selectColumns:
          description: >-
            The list of SelectColumns from the select clause. Use mask = 0x4 to
            include in the bundle.
          items:
            $ref: '#/components/schemas/SelectColumn'
          type: array
        sumFileSizes:
          $ref: '#/components/schemas/SumFileSizes'
      title: QueryResultBundle
      type: object
    QueryBundleRequest:
      description: Query Bundle Request
      example:
        concreteType: ...
        entityId: ...
        partMask: 1
        query:
          additionalFilters:
            - {}
            - {}
          includeEntityEtag: true
          limit: 12345
          offset: 12345
          selectedFacets:
            - columnName: ...
              concreteType: ...
            - columnName: ...
              concreteType: ...
          sort:
            - column: ...
              direction: DESC
            - column: ...
              direction: ASC
          sql: ...
      properties:
        concreteType:
          description: Concrete Type
          type: string
        entityId:
          description: Entity Id
          type: string
        partMask:
          description: >
            Optional, default all. The 'partsMask' is an integer mask that can
            be combined into to request any desired part.

            The mask is defined as follows:

            * Query Results (queryResults) = 0x1

            * Query Count (queryCount) = 0x2

            * Select Columns (selectColumns) = 0x4

            * Max Rows Per Page (maxRowsPerPage) = 0x8

            * The Table Columns (columnModels) = 0x10

            * Facet statistics for each faceted column (facetStatistics) = 0x20

            * The sum of the file sizes (sumFileSizesBytes) = 0x40
          type: integer
        query:
          $ref: '#/components/schemas/Query'
      title: QueryBundleRequest
      type: object
    SnapshotRequest:
      description: >
        Request to create a new snapshot of a table or view. The provided
        comment,

        label, and activity ID will be applied to the current version thereby
        creating

        a snapshot and locking the current version. After the snapshot is
        created a

        new version will be started with an 'in-progress' label.
      example:
        snapshotActivityId: ...
        snapshotComment: ...
        snapshotLabel: ...
      properties:
        snapshotActivityId:
          description: >
            Optional. If createNewSnapshot=true, the Activity ID to be applied
            to the

            snapshot version. Null by default
          type: string
        snapshotComment:
          description: >
            Optional. If createNewSnapshot=true, the comment to be applied to
            the

            snapshot version. Null by default
          type: string
        snapshotLabel:
          description: |
            Optional. If createNewSnapshot=true, the label to be applied to the
            snapshot version. Null by default
          type: string
      title: SnapshotRequest
      type: object
    SnapshotResponse:
      description: Response to creating a snapshot of a table of view.
      example:
        snapshotVersionNumber: 12345
      properties:
        snapshotVersionNumber:
          description: The version number of the resulting snapshot.
          type: integer
      title: SnapshotResponse
      type: object
    TableUpdateResponse:
      description: Abstraction for a response to update a table.
      example:
        concreteType: ...
      properties:
        concreteType:
          description: Concrete Type
          type: string
      title: TableUpdateResponse
      type: object
    TableUpdateTransactionResponse:
      description: An AsynchronousResponseBody returned from a table update transaction.
      example:
        concreteType: ...
        results:
          - concreteType: ...
          - concreteType: ...
        snapshotVersionNumber: 12345
      properties:
        concreteType:
          description: Concrete Type
          type: string
        results:
          description: >-
            List of responses. There will be one response for each request in
            the transaction.
          items:
            $ref: '#/components/schemas/TableUpdateResponse'
          type: array
        snapshotVersionNumber:
          description: >-
            The version number of the snapshot. Returned only, if a new snapshot
            was requested.
          type: number
      title: TableUpdateTransactionResponse
      type: object
    TableUpdateRequest:
      description: Abstraction for a request to update a table.
      example:
        concreteType: ...
        entityId: ...
      properties:
        concreteType:
          description: Concrete Type
          type: string
        entityId:
          description: Entity Id
          type: string
      title: TableUpdateRequest
      type: object
    TableUpdateTransactionRequest:
      description: >
        An AsynchronousRequestBody to used make multiple changes to a table as a
        single 'transaction'.

        All changes will either succeed or fail as a unit.
      example:
        changes:
          - concreteType: ...
            entityId: ...
          - concreteType: ...
            entityId: ...
        concreteType: ...
        createSnapshot: true
        entityId: ...
        snapshotOptions:
          snapshotActivityId: ...
          snapshotComment: ...
          snapshotLabel: ...
      properties:
        changes:
          description: List of changes that describes schema and/or row changes to a table.
          items:
            $ref: '#/components/schemas/TableUpdateRequest'
          type: array
        concreteType:
          description: Concrete Type
          type: string
        createSnapshot:
          description: >
            When set to 'true', a snapshot of the table will be created after
            the change

            from this transaction request are applied to the table.
          type: boolean
        entityId:
          description: Entity Id
          type: string
        snapshotOptions:
          $ref: '#/components/schemas/SnapshotRequest'
      title: TableUpdateTransactionRequest
      type: object
    DiscussionThreadBundle:
      description: The Thread model object represents a single Thread.
      example:
        activeAuthors:
          - ...
          - ...
        createdBy: ...
        createdOn: ...
        etag: ...
        forumId: ...
        id: ...
        isDeleted: true
        isEdited: true
        isPinned: true
        lastActivity: ...
        messageKey: ...
        modifiedOn: ...
        numberOfReplies: 12345
        numberOfViews: 12345
        projectId: ...
        title: ...
      properties:
        activeAuthors:
          description: The list of userId whose most active on this Thread
          items:
            type: string
          type: array
        createdBy:
          description: The id of the user that created this Thread
          type: string
        createdOn:
          description: The timestamp when this Thread was created
          type: string
        etag:
          $ref: '#/components/schemas/Etag'
        forumId:
          description: The ID of the forum this Thread belongs to
          type: string
        id:
          description: The ID of the Thread
          type: string
        isDeleted:
          description: Has this Thread been deleted?
          type: boolean
        isEdited:
          description: Has the author edited this Thread?
          type: boolean
        isPinned:
          description: Has this Thread been pinned?
          type: boolean
        lastActivity:
          description: The timestamp when the last activity occurs on this Thread
          type: string
        messageKey:
          description: The S3 key where the actual message stored
          type: string
        modifiedOn:
          description: The timestamp when this Thread was last modified
          type: string
        numberOfReplies:
          description: The number of replies to this thread
          type: integer
        numberOfViews:
          description: The number of unique users who has viewed this thread
          type: integer
        projectId:
          description: The ID of the project this Thread belongs to
          type: string
        title:
          description: The title of the Thread
          type: string
      title: DiscussionThreadBundle
      type: object
    PaginatedResultsOfDiscussionThreadBundle:
      description: Page of Discussion Thread Bundles
      example:
        results:
          - activeAuthors:
              - ...
              - ...
            createdBy: ...
            createdOn: ...
            etag: ...
            forumId: ...
            id: ...
            isDeleted: true
            isEdited: true
            isPinned: true
            lastActivity: ...
            messageKey: ...
            modifiedOn: ...
            numberOfReplies: 12345
            numberOfViews: 12345
            projectId: ...
            title: ...
          - activeAuthors:
              - ...
              - ...
            createdBy: ...
            createdOn: ...
            etag: ...
            forumId: ...
            id: ...
            isDeleted: true
            isEdited: true
            isPinned: true
            lastActivity: ...
            messageKey: ...
            modifiedOn: ...
            numberOfReplies: 12345
            numberOfViews: 12345
            projectId: ...
            title: ...
        totalNumberOfResults: 12345
      properties:
        results:
          description: Page of discussion thread bundles
          items:
            $ref: '#/components/schemas/DiscussionThreadBundle'
          type: array
        totalNumberOfResults:
          $ref: '#/components/schemas/TotalNumberOfResults'
      title: PaginatedResultsOfDiscussionThreadBundle
      type: object
    VersionInfo:
      description: JSON schema for VersionInfo POJO
      example:
        contentMd5: ...
        contentSize: ...
        id: ...
        modifiedBy: ...
        modifiedByPrincipalId: ...
        modifiedOn: ...
        versionComment: ...
        versionLabel: ...
        versionNumber: 12345
      properties:
        contentMd5:
          description: >-
            Calculated md5 of the associated file (when applicable and
            available).
          type: string
        contentSize:
          description: The size of the associated file (when applicable and available).
          type: string
        id:
          description: The id of the entity
          type: string
        modifiedBy:
          description: The display name of the user that last modified this entity.
          type: string
        modifiedByPrincipalId:
          description: The user that last modified this entity.
          type: string
        modifiedOn:
          description: The date this entity was last modified.
          type: string
        versionComment:
          description: The user defined version label of the entity
          type: string
        versionLabel:
          description: The user defined version label of the entity
          type: string
        versionNumber:
          description: The version number of the entity
          type: integer
      title: VersionInfo
      type: object
    PaginatedResultsOfVersionInfo:
      description: JSON schema for Row POJO
      example:
        results:
          - contentMd5: ...
            contentSize: ...
            id: ...
            modifiedBy: ...
            modifiedByPrincipalId: ...
            modifiedOn: ...
            versionComment: ...
            versionLabel: ...
            versionNumber: 12345
          - contentMd5: ...
            contentSize: ...
            id: ...
            modifiedBy: ...
            modifiedByPrincipalId: ...
            modifiedOn: ...
            versionComment: ...
            versionLabel: ...
            versionNumber: 12345
        totalNumberOfResults: 12345
      properties:
        results:
          description: Page of version info
          items:
            $ref: '#/components/schemas/VersionInfo'
          type: array
        totalNumberOfResults:
          $ref: '#/components/schemas/TotalNumberOfResults'
      title: PaginatedResultsOfVersionInfo
      type: object
    FileHandleUpdateRequest:
      description: Reuqest that can be used to update the file handle of an FileEntity
      example:
        newFileHandleId: ...
        oldFileHandleId: ...
      properties:
        newFileHandleId:
          description: >
            The id of the new file handle to be associated with the FileEntity.

            The user performing the request must be the owner of the file
            handle.
          type: string
        oldFileHandleId:
          description: >
            The id of the file handle currently associated to the FileEntity.

            Used to avoid conflicting cuncurrent updates, if the id does not
            match

            the current file handle id the request will be rejected with a

            PRECONDITION_FAILED (412) response.
          type: string
      title: FileHandleUpdateRequest
      type: object
    EntityId:
      description: JSON schema for EntityId POJO
      example:
        id: ...
      properties:
        id:
          description: The id of an entity.
          type: string
      title: EntityId
      type: object
    EntityLookupRequest:
      description: A request to look up an entity given parentId and the entity name.
      example:
        entityName: ...
        parentId: ...
      properties:
        entityName:
          description: The entity name
          type: string
        parentId:
          description: The parentID
          type: string
      title: EntityLookupRequest
      type: object
    SortBy:
      description: How results should be sorted.
      enum:
        - NAME
        - CREATED_ON
        - MODIFIED_ON
      title: SortBy
      type: string
    EntityChildrenRequest:
      description: Request for EntityHeaders of the children of a given parent Entity
      example:
        includeSumFileSizes: true
        includeTotalChildCount: true
        includeTypes:
          - entityview
          - project
        nextPageToken: ...
        parentId: ...
        sortBy: CREATED_ON
        sortDirection: DESC
      properties:
        includeSumFileSizes:
          description: >-
            When true, the sum of the files sizes (bytes) with the given
            parentId and types will be included. False by default
          type: boolean
          default: false
        includeTotalChildCount:
          description: >-
            When true, the total number of children with the givenparentId and
            types will be included. False by default
          type: boolean
          default: false
        includeTypes:
          description: The types of children to be include. Must include at least one type.
          items:
            $ref: '#/components/schemas/EntityType'
          type: array
        nextPageToken:
          description: >-
            Optional parameter used to fetch the next page of results. When
            NULL, the first page will be returned. The nextPageToken is provided
            with the results if there is another page of results.
          type: string
        parentId:
          description: The ID of the parent. Set to null to list projects.
          type: string
        sortBy:
          $ref: '#/components/schemas/SortBy'
        sortDirection:
          $ref: '#/components/schemas/SortDirection'
      title: EntityChildrenRequest
      type: object
    EntityChildrenResponse:
      description: Response of EntityHeaders for the children of a given parent Entity
      example:
        nextPageToken: ...
        page:
          - benefactorId: 12345
            createdBy: ...
            createdOn: ...
            id: ...
            modifiedBy: ...
            modifiedOn: ...
            name: ...
            type: ...
            versionLabel: ...
            versionNumber: 12345
          - benefactorId: 12345
            createdBy: ...
            createdOn: ...
            id: ...
            modifiedBy: ...
            modifiedOn: ...
            name: ...
            type: ...
            versionLabel: ...
            versionNumber: 12345
        sumFileSizesBytes: 12345
        totalChildCount: 12345
      properties:
        nextPageToken:
          description: >-
            Token that can be used to get the next page. Null if there are no
            more results.
          type: string
        page:
          description: The headers of each child.
          items:
            $ref: '#/components/schemas/EntityHeader'
          type: array
        sumFileSizesBytes:
          description: >-
            The sum of the file sizes (bytes) with the requested parentId and
            types. Only returned if requested.
          type: integer
        totalChildCount:
          description: >-
            The total number of children with the requested parentId and types.
            Only returned if requested.
          type: integer
      title: EntityChildrenResponse
      type: object
    Reference:
      description: JSON schema for Reference POJO
      example:
        targetId: ...
        targetVersionNumber: 12345
      properties:
        targetId:
          description: The the id of the entity to which this reference refers
          type: string
        targetVersionNumber:
          description: The version number of the entity to which this reference refers
          type: number
      title: Reference
      type: object
    ReferenceList:
      description: An array of Reference objects
      example:
        references:
          - targetId: ...
            targetVersionNumber: 12345
          - targetId: ...
            targetVersionNumber: 12345
      properties:
        references:
          description: The list of references
          items:
            $ref: '#/components/schemas/Reference'
          type: array
      title: ReferenceList
      type: object
    PaginatedResultsOfEntityHeader:
      description: Page of Entity Headers.
      example:
        results:
          - benefactorId: 12345
            createdBy: ...
            createdOn: ...
            id: ...
            modifiedBy: ...
            modifiedOn: ...
            name: ...
            type: ...
            versionLabel: ...
            versionNumber: 12345
          - benefactorId: 12345
            createdBy: ...
            createdOn: ...
            id: ...
            modifiedBy: ...
            modifiedOn: ...
            name: ...
            type: ...
            versionLabel: ...
            versionNumber: 12345
        totalNumberOfResults: 12345
      properties:
        results:
          description: A page of entity headers.
          items:
            $ref: '#/components/schemas/EntityHeader'
          type: array
        totalNumberOfResults:
          $ref: '#/components/schemas/TotalNumberOfResults'
      title: PaginatedResultsOfEntityHeader
      type: object
    EntityIdList:
      description: List of Entity Ids
      example:
        idList:
          - ...
          - ...
      properties:
        idList:
          description: List of Entity Ids
          items:
            type: string
          type: array
      title: EntityIdList
      type: object
    EntityThreadCount:
      description: >-
        The model object represents the number of threads that mentioned a
        particular entity.
      example:
        count: 12345
        entityId: ...
      properties:
        count:
          description: The number of threads that the current user can view.
          type: number
        entityId:
          description: The ID of an Entity.
          type: string
      title: EntityThreadCount
      type: object
    EntityThreadCounts:
      description: The model object represents a list of EntityThreadCounts
      example:
        list:
          - count: 12345
            entityId: ...
          - count: 12345
            entityId: ...
      properties:
        list:
          description: List of Entity Thread Counts.
          items:
            $ref: '#/components/schemas/EntityThreadCount'
          type: array
      title: EntityThreadCounts
      type: object
    EvaluationRoundLimitType:
      title: EvaluationRoundLimitType
      type: string
      description: Round limit type
      enum:
        - TOTAL
        - DAILY
        - WEEKLY
        - MONTHLY
    EvaluationRoundLimit:
      title: EvaluationRoundLimit
      type: object
      description: Round limit
      example:
        limitType: MONTHLY
        maximumSubmissions: 2
      properties:
        limitType:
          $ref: '#/components/schemas/EvaluationRoundLimitType'
        maximumSubmissions:
          description: Max number of submissions
          type: integer
    EvaluationRound:
      title: EvaluationRound
      type: object
      description: Evaluation Round
      example:
        etag: ...
        evaluationId: ...
        id: ...
        limits:
          - limitType: TOTAL
            maximumSubmissions: 12345
          - limitType: WEEKLY
            maximumSubmissions: 12345
        roundEnd: '12345'
        roundStart: '12345'
      properties:
        etag:
          description: Synapse etag
          type: string
        evaluationId:
          description: The unique immutable ID for this Evaluation.
          type: string
        id:
          description: Evaluation round Id
          type: string
        limits:
          description: List of round limits
          type: array
          items:
            $ref: '#/components/schemas/EvaluationRoundLimit'
        roundEnd:
          description: End of round
          type: string
        roundStart:
          description: Start of round
          type: string
    EvaluationRoundListRequest:
      title: EvaluationRoundListRequest
      type: object
      description: Round list request
      example:
        nextPageToken: ...
      properties:
        nextPageToken:
          description: The token required to be sent with the subsequent batch.
          type: string
    EvaluationRoundListResponse:
      title: EvaluationRoundListResponse
      type: object
      description: List of evaluation rounds
      example:
        nextPageToken: ...
        page:
          - etag: ...
            evaluationId: ...
            id: ...
            limits:
              - limitType: TOTAL
                maximumSubmissions: 12345
              - limitType: TOTAL
                maximumSubmissions: 12345
            roundEnd: '12345'
            roundStart: '12345'
          - etag: ...
            evaluationId: ...
            id: ...
            limits:
              - limitType: TOTAL
                maximumSubmissions: 12345
              - limitType: MONTHLY
                maximumSubmissions: 12345
            roundEnd: '12345'
            roundStart: '12345'
      properties:
        nextPageToken:
          description: The token required to be sent with the subsequent batch.
          type: string
        page:
          description: Evaluation round
          items:
            $ref: '#/components/schemas/EvaluationRound'
          type: array
    DoubleAnnotation:
      description: An Annotation containing a Float value
      example:
        isPrivate: true
        key: ...
        value: 1.2
      properties:
        isPrivate:
          description: Flag denoting whether this Annotation should be private.
          type: boolean
        key:
          description: The key of this Annotation
          type: string
        value:
          description: The value of this Annotation
          type: number
      title: DoubleAnnotation
      type: object
    LongAnnotation:
      description: An Annotation containing a Integer value
      example:
        isPrivate: true
        key: ...
        value: 12345
      properties:
        isPrivate:
          description: Flag denoting whether this Annotation should be private.
          type: boolean
        key:
          description: The key of this Annotation
          type: string
        value:
          description: The value of this Annotation
          type: integer
      title: LongAnnotation
      type: object
    StringAnnotation:
      title: StringAnnotation
      type: object
      description: An Annotation containing a String value
      example:
        isPrivate: true
        key: ...
        value: ...
      properties:
        isPrivate:
          description: Flag denoting whether this Annotation should be private.
          type: boolean
        key:
          description: The key of this Annotation
          type: string
        value:
          description: The value of this Annotation
          type: string
    Annotations_annotation:
      title: Annotations
      type: object
      description: Primary container object for Annotations on a Synapse object
      example:
        doubleAnnos:
          - isPrivate: true
            key: ...
            value: 12345
          - isPrivate: true
            key: ...
            value: 12345
        longAnnos:
          - isPrivate: true
            key: ...
            value: 12345
          - isPrivate: true
            key: ...
            value: 12345
        objectId: ...
        scopeId: ...
        stringAnnos:
          - isPrivate: true
            key: ...
            value: ...
          - isPrivate: true
            key: ...
            value: ...
        version: 12345
      properties:
        doubleAnnos:
          description: A list of DoubleAnnnotations
          items:
            $ref: '#/components/schemas/DoubleAnnotation'
          type: array
        longAnnos:
          description: A list of LongAnnnotations
          items:
            $ref: '#/components/schemas/LongAnnotation'
          type: array
        objectId:
          description: >-
            The Synapse ID of the object with which these Annotations are
            associated
          type: string
        scopeId:
          description: >-
            The Synapse ID of the umbrella object above the object with which
            these Annotations are associated
          type: string
        stringAnnos:
          description: A list of StringAnnnotations
          items:
            $ref: '#/components/schemas/StringAnnotation'
          type: array
        version:
          description: The system controlled version of this collection of annotations
          type: integer
    SubmissionStatusEnum:
      description: The possible states of a Synapse Submission.
      enum:
        - OPEN
        - CLOSED
        - SCORED
        - INVALID
        - VALIDATED
        - EVALUATION_IN_PROGRESS
        - RECEIVED
        - REJECTED
        - ACCEPTED
      title: SubmissionStatusEnum
      type: string
    SubmissionStatus_model:
      description: >
        A SubmissionStatus is a secondary, mutable object associated with a
        Submission.

        This object should be used to contain scoring data about the Submission.
      example:
        annotations:
          doubleAnnos:
            - isPrivate: true
              key: ...
              value: 12345
            - isPrivate: true
              key: ...
              value: 12345
          longAnnos:
            - isPrivate: true
              key: ...
              value: 12345
            - isPrivate: true
              key: ...
              value: 12345
          objectId: ...
          scopeId: ...
          stringAnnos:
            - isPrivate: true
              key: ...
              value: ...
            - isPrivate: true
              key: ...
              value: ...
          version: 12345
        canCancel: true
        cancelRequested: true
        entityId: ...
        etag: ...
        id: ...
        modifiedOn: '12345'
        status: ACCEPTED
        statusVersion: 12345
        submissionAnnotations:
          annotations:
            property1:
              type: TIMESTAMP_MS
              value:
                - ...
                - ...
            property2:
              type: TIMESTAMP_MS
              value:
                - ...
                - ...
          etag: ...
          id: ...
        versionNumber: 12345
      properties:
        annotations:
          $ref: '#/components/schemas/Annotations_annotation'
        canCancel:
          description: >
            Can this submission be cancelled? By default, this will be set to
            False.

            Users can read this value. Only the queue's scoring application can
            change this value.
          type: boolean
        cancelRequested:
          description: >-
            Has user requested to cancel this submission? By default, this will
            be set to False. Submission owner can read and request to change
            this value.
          type: boolean
        entityId:
          description: The Synapse ID of the Entity in this Submission.
          type: string
        etag:
          description: >
            Synapse employs an Optimistic Concurrency Control (OCC) scheme to
            handle concurrent updates.

            The eTag changes every time an SubmissionStatus is updated; it is
            used to detect when a client's

            copy of an SubmissionStatus is out-of-date.
          type: string
        id:
          description: 'The unique, immutable Synapse ID of the Submission.'
          type: string
        modifiedOn:
          description: The date on which this SubmissionStatus was last modified.
          type: string
        status:
          $ref: '#/components/schemas/SubmissionStatusEnum'
        statusVersion:
          description: >-
            A version of the status, auto-generated and auto-incremented by the
            system and read-only to the client.
          type: number
        submissionAnnotations:
          $ref: '#/components/schemas/Annotations_v2'
        versionNumber:
          description: The version number of the Entity in this Submission.
          type: integer
      title: SubmissionStatus
      type: object
    SubmissionStatusBatch:
      description: 'A batch of status objects, to be updated en masse.'
      example:
        batchToken: ...
        isFirstBatch: true
        isLastBatch: true
        statuses:
          - annotations:
              doubleAnnos:
                - {}
                - {}
              longAnnos:
                - {}
                - {}
              objectId: ...
              scopeId: ...
              stringAnnos:
                - {}
                - {}
              version: 12345
            canCancel: true
            cancelRequested: true
            entityId: ...
            etag: ...
            id: ...
            modifiedOn: '12345'
            status: RECEIVED
            statusVersion: 12345
            submissionAnnotations:
              annotations:
                property1: {}
                property2: {}
              etag: ...
              id: ...
            versionNumber: 12345
          - annotations:
              doubleAnnos:
                - {}
                - {}
              longAnnos:
                - {}
                - {}
              objectId: ...
              scopeId: ...
              stringAnnos:
                - {}
                - {}
              version: 12345
            canCancel: true
            cancelRequested: true
            entityId: ...
            etag: ...
            id: ...
            modifiedOn: '12345'
            status: CLOSED
            statusVersion: 12345
            submissionAnnotations:
              annotations:
                property1: {}
                property2: {}
              etag: ...
              id: ...
            versionNumber: 12345
      properties:
        batchToken:
          description: >-
            A token required to accept a batch submission for all but the first
            batch.
          type: string
        isFirstBatch:
          description: true if and only if this is the first batch to upload
          type: boolean
        isLastBatch:
          description: true if and only if this is the last batch to upload
          type: boolean
        statuses:
          description: A collection of Submission Statuses
          items:
            $ref: '#/components/schemas/SubmissionStatus_model'
          type: array
      title: SubmissionStatusBatch
      type: object
    BatchUploadResponse:
      title: BatchUploadResponse
      type: object
      description: The response for a batch SubmissionStatus upload.
      example:
        nextUploadToken: ...
      properties:
        nextUploadToken:
          description: The token required to be sent with the subsequent batch.
          type: string
    SubmissionContributor:
      description: A contributor to an evaluation Submission
      example:
        createdOn: ...
        principalId: ...
      properties:
        createdOn:
          description: >
            'date when contributor was added to Submission.

            Normally this will match the creation date of the Submission, but
            administrative override is allowed.'
          type: string
        principalId:
          description: ID of the contributor
          type: string
      title: SubmissionContributor
      type: object
    Submission_model:
      description: >
        A Submission to a Synapse Evaluation is a pointer to a versioned Entity.

        Submissions are immutable, so we archive a copy of the EntityBundle at
        the time of submission.
      example:
        contributors:
          - createdOn: ...
            principalId: ...
          - createdOn: ...
            principalId: ...
        createdOn: ...
        dockerDigest: ...
        dockerRepositoryName: ...
        entityBundleJSON: ...
        entityId: ...
        evaluationId: ...
        evaluationRoundId: ...
        id: ...
        name: ...
        submitterAlias: ...
        teamId: ...
        userId: ...
        versionNumber: 12345
      properties:
        contributors:
          description: >
            User ids of the submitter and (if a team submission) the team
            members involved in creating the submission.
          items:
            $ref: '#/components/schemas/SubmissionContributor'
          type: array
        createdOn:
          description: The date on which Submission was created.
          type: string
        dockerDigest:
          description: >-
            For Docker repositories, the digest from the commit. Null for other
            entity types.
          type: string
        dockerRepositoryName:
          description: >-
            For Docker repositories, the name of the submitted repository. Null
            for other entity types.
          type: string
        entityBundleJSON:
          description: The Bundled Entity and Annotations JSON at the time of submission.
          type: string
        entityId:
          description: The Synapse ID of the Entity in this Submission.
          type: string
        evaluationId:
          description: The Synapse ID of the Evaluation this Submission is for.
          type: string
        evaluationRoundId:
          description: >-
            The Synapse ID of the EvaluationRound to which this was submitted.
            DO NOT specify a value for this. It will be filled in automatically
            upon creation of the Submission if the Evaluation is configured with
            an EvaluationRound.
          type: string
        id:
          description: 'The unique, immutable Synapse ID of this Submission.'
          type: string
        name:
          description: The title of this Submission.
          type: string
        submitterAlias:
          description: The alias for the user or team creating the submission.
          type: string
        teamId:
          description: optional Team which collaborated on the submission
          type: string
        userId:
          description: The Synapse ID of the user who created this Submission.
          type: string
        versionNumber:
          description: The submitted version number of the Entity.
          type: integer
      title: Submission
      type: object
    PaginatedResultsOfSubmission:
      title: PaginatedResultsOfSubmission
      type: object
      description: Paginated Results of submissions
      example:
        results:
          - contributors:
              - createdOn: ...
                principalId: ...
              - createdOn: ...
                principalId: ...
            createdOn: ...
            dockerDigest: ...
            dockerRepositoryName: ...
            entityBundleJSON: ...
            entityId: ...
            evaluationId: ...
            evaluationRoundId: ...
            id: ...
            name: ...
            submitterAlias: ...
            teamId: ...
            userId: ...
            versionNumber: 12345
          - contributors:
              - createdOn: ...
                principalId: ...
              - createdOn: ...
                principalId: ...
            createdOn: ...
            dockerDigest: ...
            dockerRepositoryName: ...
            entityBundleJSON: ...
            entityId: ...
            evaluationId: ...
            evaluationRoundId: ...
            id: ...
            name: ...
            submitterAlias: ...
            teamId: ...
            userId: ...
            versionNumber: 12345
        totalNumberOfResults: 12345
      properties:
        results:
          description: Submission results
          items:
            $ref: '#/components/schemas/Submission_model'
          type: array
        totalNumberOfResults:
          description: >
            Calculating the actual totalNumberOfResults is not longer supported.

            Therefore, for each page, the totalNumberOfResults is estimated
            using the current page,

            limit, and offset. When the page size equals the limit,

            the totalNumberOfResults will be offset+pageSize+ 1. Otherwise,

            the totalNumberOfResults will be offset+pageSize.'
          type: integer
    SubmissionBundle:
      description: >-
        A bundle object to contain a Submission and its accompanying
        SubmissionStatus.
      example:
        submission:
          contributors:
            - createdOn: ...
              principalId: ...
            - createdOn: ...
              principalId: ...
          createdOn: ...
          dockerDigest: ...
          dockerRepositoryName: ...
          entityBundleJSON: ...
          entityId: ...
          evaluationId: ...
          evaluationRoundId: ...
          id: ...
          name: ...
          submitterAlias: ...
          teamId: ...
          userId: ...
          versionNumber: 12345
        submissionStatus:
          annotations:
            doubleAnnos:
              - {}
              - {}
            longAnnos:
              - {}
              - {}
            objectId: ...
            scopeId: ...
            stringAnnos:
              - {}
              - {}
            version: 12345
          canCancel: true
          cancelRequested: true
          entityId: ...
          etag: ...
          id: ...
          modifiedOn: ...
          status: RECEIVED
          statusVersion: 12345
          submissionAnnotations:
            annotations:
              property1: {}
              property2: {}
            etag: ...
            id: ...
          versionNumber: 12345
      properties:
        submission:
          $ref: '#/components/schemas/Submission_model'
        submissionStatus:
          $ref: '#/components/schemas/SubmissionStatus_model'
      title: SubmissionBundle
      type: object
    PaginatedResultsOfSubmissionBundle:
      description: |
        Gets the requesting user's bundled Submissions and SubmissionStatuses
        to a specified Evaluation.
      example:
        results:
          - submission:
              contributors:
                - {}
                - {}
              createdOn: ...
              dockerDigest: ...
              dockerRepositoryName: ...
              entityBundleJSON: ...
              entityId: ...
              evaluationId: ...
              evaluationRoundId: ...
              id: ...
              name: ...
              submitterAlias: ...
              teamId: ...
              userId: ...
              versionNumber: 12345
            submissionStatus:
              annotations: {}
              canCancel: true
              cancelRequested: true
              entityId: ...
              etag: ...
              id: ...
              modifiedOn: ...
              status: REJECTED
              statusVersion: 12345
              submissionAnnotations: {}
              versionNumber: 12345
          - submission:
              contributors:
                - {}
                - {}
              createdOn: ...
              dockerDigest: ...
              dockerRepositoryName: ...
              entityBundleJSON: ...
              entityId: ...
              evaluationId: ...
              evaluationRoundId: ...
              id: ...
              name: ...
              submitterAlias: ...
              teamId: ...
              userId: ...
              versionNumber: 12345
            submissionStatus:
              annotations: {}
              canCancel: true
              cancelRequested: true
              entityId: ...
              etag: ...
              id: ...
              modifiedOn: ...
              status: VALIDATED
              statusVersion: 12345
              submissionAnnotations: {}
              versionNumber: 12345
        totalNumberOfResults: 12345
      properties:
        results:
          description: The the id of the entity to which this reference refers
          items:
            $ref: '#/components/schemas/SubmissionBundle'
          type: array
        totalNumberOfResults:
          description: >
            Calculating the actual totalNumberOfResults is not longer supported.
            Therefore,

            for each page, the totalNumberOfResults is estimated using the
            current page,

            limit, and offset. When the page size equals the limit, the
            totalNumberOfResults

            will be offset+pageSize+ 1. Otherwise, the totalNumberOfResults will
            be offset+pageSize.
          type: integer
      title: PaginatedResultsOfSubmissionBundle
      type: object
    Integer:
      description: Integer value
      type: integer
    PaginatedResultsOfSubmissionStatus:
      description: Gets a collection of SubmissionStatuses to a specified Evaluation.
      example:
        results:
          - annotations:
              doubleAnnos:
                - {}
                - {}
              longAnnos:
                - {}
                - {}
              objectId: ...
              scopeId: ...
              stringAnnos:
                - {}
                - {}
              version: 12345
            canCancel: true
            cancelRequested: true
            entityId: ...
            etag: ...
            id: ...
            modifiedOn: ...
            status: ACCEPTED
            statusVersion: 12345
            submissionAnnotations:
              annotations:
                property1: {}
                property2: {}
              etag: ...
              id: ...
            versionNumber: 12345
          - annotations:
              doubleAnnos:
                - {}
                - {}
              longAnnos:
                - {}
                - {}
              objectId: ...
              scopeId: ...
              stringAnnos:
                - {}
                - {}
              version: 12345
            canCancel: true
            cancelRequested: true
            entityId: ...
            etag: ...
            id: ...
            modifiedOn: ...
            status: ACCEPTED
            statusVersion: 12345
            submissionAnnotations:
              annotations:
                property1: {}
                property2: {}
              etag: ...
              id: ...
            versionNumber: 12345
        totalNumberOfResults: 12345
      properties:
        results:
          description: The the id of the entity to which this reference refers
          items:
            $ref: '#/components/schemas/SubmissionStatus_model'
          type: array
        totalNumberOfResults:
          description: >
            Calculating the actual totalNumberOfResults is not longer supported.

            Therefore, for each page, the totalNumberOfResults is estimated
            using

            the current page, limit, and offset. When the page size equals the
            limit,

            the totalNumberOfResults will be offset+pageSize+ 1.

            Otherwise, the totalNumberOfResults will be offset+pageSize.
          type: integer
      title: PaginatedResultsOfSubmissionStatus
      type: object
    MemberSubmissionEligibility:
      description: >
        Describes the eligibility of an indivdiual to submit to an Evaluation
        queue,

        reflecting the queue's submission quotas and current submissions.
      example:
        hasConflictingSubmission: true
        isEligible: true
        isQuotaFilled: true
        isRegistered: true
        principalId: 12345
      properties:
        hasConflictingSubmission:
          description: true if the individual has submitted alone or with another team
          type: boolean
        isEligible:
          description: true if all criteria are met
          type: boolean
        isQuotaFilled:
          description: >-
            true if team/individual has reached the submission quota (for the
            given submission round)
          type: boolean
        isRegistered:
          description: true if team/individual is registered for challenge
          type: boolean
        principalId:
          description: Synapse user id
          type: number
      title: MemberSubmissionEligibility
      type: object
    SubmissionEligibility:
      description: |
        Describes the eligibility of a to submit to an Evaluation queue,
        reflecting the queue's submission quotas and current submissions.
      example:
        isEligible: true
        isQuotaFilled: true
        isRegistered: true
      properties:
        isEligible:
          description: true if all criteria are met
          type: boolean
        isQuotaFilled:
          description: >-
            true if team/individual has reached the submission quota (for the
            given submission round)
          type: boolean
        isRegistered:
          description: true if team/individual is registered for challenge
          type: boolean
      title: SubmissionEligibility
      type: object
    TeamSubmissionEligibility:
      description: >
        Describes the eligibility of a Challenge Team to submit to an Evalution
        queue,

        reflecting the queue's submission quotas and current submissions.
      example:
        eligibilityStateHash: 12345
        evaluationId: ...
        membersEligibility:
          - hasConflictingSubmission: true
            isEligible: true
            isQuotaFilled: true
            isRegistered: true
            principalId: 12345
          - hasConflictingSubmission: true
            isEligible: true
            isQuotaFilled: true
            isRegistered: true
            principalId: 12345
        teamEligibility:
          isEligible: true
          isQuotaFilled: true
          isRegistered: true
        teamId: ...
      properties:
        eligibilityStateHash:
          description: 'A hash of this object, used for optimistic concurrency.'
          type: integer
        evaluationId:
          description: The ID of the Evaluation of interest
          type: string
        membersEligibility:
          description: >-
            Describes the submission eligibility of the contributors to the
            Submission.
          items:
            $ref: '#/components/schemas/MemberSubmissionEligibility'
          type: array
        teamEligibility:
          $ref: '#/components/schemas/SubmissionEligibility'
        teamId:
          description: The ID of the Team of interest
          type: string
      title: TeamSubmissionEligibility
      type: object
    Team:
      description: JSON schema for Team POJO
      example:
        canPublicJoin: true
        createdBy: ...
        createdOn: ...
        description: ...
        etag: ...
        icon: ...
        id: ...
        modifiedBy: ...
        modifiedOn: ...
        name: ...
      properties:
        canPublicJoin:
          description: >-
            true for teams which members can join without an invitation or
            approval
          type: boolean
        createdBy:
          description: The ID of the user that created this Team.
          type: string
        createdOn:
          description: The date this Team was created.
          type: string
        description:
          description: A short description of this Team.
          type: string
        etag:
          description: >
            Synapse employs an Optimistic Concurrency Control (OCC) scheme to
            handle

            concurrent updates. Since the E-Tag changes every time a Team is
            updated

            it is used to detect when a client's current representation of a
            Team is out-of-date.
          type: string
        icon:
          description: fileHandleId for icon image of the Team
          type: string
        id:
          description: The id of the Team.
          type: string
        modifiedBy:
          description: The ID of the user that last modified this Team.
          type: string
        modifiedOn:
          description: The date this Team was last modified.
          type: string
        name:
          description: The name of the Team.
          type: string
      title: Team
      type: object
    PaginatedResultsOfTeam:
      description: List of Teams
      example:
        results:
          - canPublicJoin: true
            createdBy: ...
            createdOn: ...
            description: ...
            etag: ...
            icon: ...
            id: ...
            modifiedBy: ...
            modifiedOn: ...
            name: ...
          - canPublicJoin: true
            createdBy: ...
            createdOn: ...
            description: ...
            etag: ...
            icon: ...
            id: ...
            modifiedBy: ...
            modifiedOn: ...
            name: ...
        totalNumberOfResults: 12345
      properties:
        results:
          description: List of Teams
          items:
            $ref: '#/components/schemas/Team'
          type: array
        totalNumberOfResults:
          $ref: '#/components/schemas/TotalNumberOfResults'
      title: PaginatedResultsOfTeam
      type: object
    UserGroupHeader:
      description: JSON schema for UserHeader POJO
      example:
        displayName: ...
        email: ...
        firstName: ...
        isIndividual: true
        lastName: ...
        ownerId: ...
        userName: ...
      properties:
        displayName:
          description: This is deprecated and will always be null
          type: string
        email:
          description: |
            User's current email address
          type: string
        firstName:
          description: First Name
          type: string
        isIndividual:
          description: 'True if this is a user, false if it is a group'
          type: boolean
        lastName:
          description: Last Name
          type: string
        ownerId:
          description: |
            A foreign key to the ID of the 'principal' object for the user.
          type: string
        userName:
          description: A name chosen by the user that uniquely identifies them.
          type: string
      title: UserGroupHeader
      type: object
    TeamMember:
      description: 'JSON schema for Team Member, which bundles UserGroupHeader and isAdmin'
      example:
        isAdmin: true
        member:
          displayName: ...
          email: ...
          firstName: ...
          isIndividual: true
          lastName: ...
          ownerId: ...
          userName: ...
        teamId: ...
      properties:
        isAdmin:
          description: True if the user is an administrator in the Team.
          type: boolean
        member:
          $ref: '#/components/schemas/UserGroupHeader'
        teamId:
          description: The id of the Team.
          type: string
      title: TeamMember
      type: object
    TeamMembershipStatus:
      description: >-
        JSON schema for the possible status of a User with respect to Team
        membership.
      example:
        canJoin: true
        canSendEmail: true
        hasOpenInvitation: true
        hasOpenRequest: true
        hasUnmetAccessRequirement: true
        isMember: true
        membershipApprovalRequired: true
        teamId: ...
        userId: ...
      properties:
        canJoin:
          description: >-
            true if and only if the user requesting this status information can
            join the user to the team
          type: boolean
        canSendEmail:
          description: true if and only if the user can send an email to the team
          type: boolean
        hasOpenInvitation:
          description: true if and only if the user has an open invitation to join the team
          type: boolean
        hasOpenRequest:
          description: true if and only if the user has an open request to join the team
          type: boolean
        hasUnmetAccessRequirement:
          description: >-
            true if and only if there is at least one unmet access requirement
            for the user on the team
          type: boolean
        isMember:
          description: true if and only if the user is a member of the team
          type: boolean
        membershipApprovalRequired:
          description: >-
            true if and only if team admin approval is required for the user to
            join the team
          type: boolean
        teamId:
          description: The id of the Team.
          type: string
        userId:
          description: The principal id of the user.
          type: string
      title: TeamMembershipStatus
      type: object
    IdList:
      description: List of IDs
      example:
        list:
          - 12345
          - 12345
      properties:
        list:
          description: List of IDs
          items:
            type: integer
          type: array
      title: IdList
      type: object
    ListWrapperOfTeamMember:
      description: A list of Teams
      example:
        list:
          - isAdmin: true
            member:
              displayName: ...
              email: ...
              firstName: ...
              isIndividual: true
              lastName: ...
              ownerId: ...
              userName: ...
            teamId: ...
          - isAdmin: true
            member:
              displayName: ...
              email: ...
              firstName: ...
              isIndividual: true
              lastName: ...
              ownerId: ...
              userName: ...
            teamId: ...
      properties:
        list:
          description: List of teams
          items:
            $ref: '#/components/schemas/TeamMember'
          type: array
      title: ListWrapperOfTeamMember
      type: object
    MembershipInvitation:
      description: JSON schema for MembershipInvitation POJO
      example:
        createdBy: ...
        createdOn: ...
        expiresOn: ...
        id: ...
        inviteeEmail: ...
        inviteeId: ...
        message: ...
        teamId: ...
      properties:
        createdBy:
          description: The ID of the user that created this MembershipInvitation.
          type: string
        createdOn:
          description: The date this MembershipInvitation was created.
          type: string
        expiresOn:
          description: The date this invitation expires (optional).
          type: string
        id:
          description: The id of the MembershipInvitation.
          type: string
        inviteeEmail:
          description: The email address of the user being invited to join the Team.
          type: string
        inviteeId:
          description: The principal ID of the user being invited to join the Team.
          type: string
        message:
          description: The invitation message (optional).
          type: string
        teamId:
          description: The id of the Team which the user is invited to join.
          type: string
      title: MembershipInvitation
      type: object
    PaginatedResultsOfMembershipInvitation:
      description: >
        Retrieve the open invitations from a Team, optionally filtering by the
        invitee.

        An invitation is only open if it has not expired and if the user has not
        joined

        the Team. Note: certain fields may be omitted when returned if the field
        value is null
      example:
        effectiveSchema: ...
        results:
          - createdBy: ...
            createdOn: ...
            expiresOn: ...
            id: ...
            inviteeEmail: ...
            inviteeId: ...
            message: ...
            teamId: ...
          - createdBy: ...
            createdOn: ...
            expiresOn: ...
            id: ...
            inviteeEmail: ...
            inviteeId: ...
            message: ...
            teamId: ...
        totalNumberOfResults: 12345
      properties:
        results:
          description: The the id of the entity to which this reference refers
          items:
            $ref: '#/components/schemas/MembershipInvitation'
          type: array
        totalNumberOfResults:
          description: >
            Calculating the actual totalNumberOfResults is not longer supported.

            Therefore, for each page, the totalNumberOfResults is estimated
            using

            the current page, limit, and offset. When the page size equals the
            limit,

            the totalNumberOfResults will be offset+pageSize+ 1. Otherwise, the

            totalNumberOfResults will be offset+pageSize.
          type: integer
      title: PaginatedResultsOfMembershipInvitation
      type: object
    MembershipRequest:
      description: JSON schema for MembershipRequest POJO
      example:
        createdBy: ...
        createdOn: ...
        expiresOn: ...
        id: ...
        message: ...
        teamId: ...
        userId: ...
      properties:
        createdBy:
          description: The ID of the user that created this MembershipRequest.
          type: string
        createdOn:
          description: The date this MembershipRequest was created.
          type: string
        expiresOn:
          description: The date this MembershipRequest expires (optional).
          type: string
        id:
          description: The id of the MembershipRequest.
          type: string
        message:
          description: The request message (optional).
          type: string
        teamId:
          description: The id of the Team to which the request is sent.
          type: string
        userId:
          description: The id of the user for whom membership is requested.
          type: string
      title: MembershipRequest
      type: object
    PaginatedResultsOfMembershipRequest:
      description: List of Membership Requests
      example:
        effectiveSchema: ...
        results:
          - createdBy: ...
            createdOn: ...
            expiresOn: ...
            id: ...
            message: ...
            teamId: ...
            userId: ...
          - createdBy: ...
            createdOn: ...
            expiresOn: ...
            id: ...
            message: ...
            teamId: ...
            userId: ...
        totalNumberOfResults: 12345
      properties:
        results:
          description: |
            List of membership requests
          items:
            $ref: '#/components/schemas/MembershipRequest'
          type: array
        totalNumberOfResults:
          description: >
            Calculating the actual totalNumberOfResults is not longer supported.
            Therefore,

            for each page, the totalNumberOfResults is estimated using the
            current page, limit,

            and offset. When the page size equals the limit, the
            totalNumberOfResults will be

            offset+pageSize+ 1. Otherwise, the totalNumberOfResults will be
            offset+pageSize.
          type: integer
      title: PaginatedResultsOfMembershipRequest
      type: object
    ListWrapperOfTeam:
      description: List of Teams.
      example:
        list:
          - canPublicJoin: true
            createdBy: ...
            createdOn: ...
            description: ...
            etag: ...
            icon: ...
            id: ...
            modifiedBy: ...
            modifiedOn: ...
            name: ...
          - canPublicJoin: true
            createdBy: ...
            createdOn: ...
            description: ...
            etag: ...
            icon: ...
            id: ...
            modifiedBy: ...
            modifiedOn: ...
            name: ...
      properties:
        list:
          description: List of Teams.
          items:
            $ref: '#/components/schemas/Team'
          type: array
      title: ListWrapperOfTeam
      type: object
    JoinTeamSignedToken:
      description: >-
        Signed token containing the information needed to join a new user to a
        team.
      example:
        concreteType: ...
        createdOn: ...
        expiresOn: ...
        hmac: ...
        memberId: ...
        teamId: ...
        userId: ...
        version: 12345
      properties:
        concreteType:
          description: Concrete Type
          type: string
        createdOn:
          description: The date-time the token was generated.
          type: string
        expiresOn:
          description: The date-time when this token expires.
          type: string
        hmac:
          description: The hash message authentication code for the message.
          type: string
        memberId:
          description: The ID of the new team member.
          type: string
        teamId:
          description: The ID of the team which the user was invited to join.
          type: string
        userId:
          description: >
            The ID of the user who is acting to add the new member to the Team.

            The HMAC in the token authenticates that the request is being made
            by this user.'
          type: string
        version:
          description: The version of the key used to generate the HMAC.
          type: integer
      title: JoinTeamSignedToken
      type: object
    ResponseMessage:
      description: >-
        JSON schema for a user-readable message describing the response to a
        request.
      example:
        message: ...
      properties:
        message:
          description: a user-readable message describing the response to a request
          type: string
      title: ResponseMessage
      type: object
    PaginatedResultsOfTeamMember:
      description: List of Team Members
      example:
        results:
          - isAdmin: true
            member:
              displayName: ...
              email: ...
              firstName: ...
              isIndividual: true
              lastName: ...
              ownerId: ...
              userName: ...
            teamId: ...
          - isAdmin: true
            member:
              displayName: ...
              email: ...
              firstName: ...
              isIndividual: true
              lastName: ...
              ownerId: ...
              userName: ...
            teamId: ...
        totalNumberOfResults: 12345
      properties:
        results:
          description: List of Team Members
          items:
            $ref: '#/components/schemas/TeamMember'
          type: array
        totalNumberOfResults:
          $ref: '#/components/schemas/TotalNumberOfResults'
      title: PaginatedResultsOfTeamMember
      type: object
    Count:
      description: Count of items
      example:
        count: 12345
      properties:
        count:
          description: Count of items
          type: integer
      title: Count
      type: object
    TrashedEntity:
      description: >-
        JSON schema for the TrashEntity POJO. A trashed entity is an entity in
        the trash can.
      example:
        deletedByPrincipalId: ...
        deletedOn: ...
        entityId: ...
        entityName: ...
        originalParentId: ...
      properties:
        deletedByPrincipalId:
          description: The ID of the user who deleted the entity.
          type: string
        deletedOn:
          description: The date and time when the deletion occurred.
          type: string
        entityId:
          description: The id of the entity.
          type: string
        entityName:
          description: The name of this entity
          type: string
        originalParentId:
          description: The ID of the original parent before deletion.
          type: string
      title: TrashedEntity
      type: object
    PaginatedResultsOfTrashedEntity:
      description: List of trashed entities
      example:
        effectiveSchema: ...
        results:
          - deletedByPrincipalId: ...
            deletedOn: ...
            entityId: ...
            entityName: ...
            originalParentId: ...
          - deletedByPrincipalId: ...
            deletedOn: ...
            entityId: ...
            entityName: ...
            originalParentId: ...
        totalNumberOfResults: 12345
      properties:
        results:
          description: List of trashed entities.
          items:
            $ref: '#/components/schemas/TrashedEntity'
          type: array
        totalNumberOfResults:
          $ref: '#/components/schemas/TotalNumberOfResults'
      title: PaginatedResultsOfTrashedEntity
      type: object
    Settings:
      description: |
        Contains a user's notification settings
      example:
        markEmailedMessagesAsRead: true
        sendEmailNotifications: true
      properties:
        markEmailedMessagesAsRead:
          description: >-
            Should messages that are emailed to the user be marked as READ in
            Synapse? Default false.
          type: boolean
          default: false
        sendEmailNotifications:
          description: Should the user receive email notifications? Default true.
          type: boolean
          default: true
      title: Settings
      type: object
    UserPreference:
      description: User preferences
      example:
        concreteType: ...
        name: ...
      properties:
        concreteType:
          description: Concrete type
          type: string
        name:
          description: The name of the user preference.
          type: string
      title: UserPreference
      type: object
    UserProfile:
      description: JSON schema for UserProfile POJO
      example:
        RStudioUrl: ...
        company: ...
        createdOn: ...
        displayName: ...
        email: ...
        emails:
          - ...
          - ...
        etag: ...
        firstName: ...
        industry: ...
        lastName: ...
        location: ...
        notificationSettings:
          markEmailedMessagesAsRead: true
          sendEmailNotifications: true
        openIds:
          - ...
          - ...
        ownerId: ...
        position: ...
        preferences:
          - concreteType: ...
            name: ...
          - concreteType: ...
            name: ...
        profilePicureFileHandleId: ...
        summary: ...
        teamName: ...
        url: ...
        userName: ...
      properties:
        RStudioUrl:
          description: URL for RStudio server assigned to the user
          type: string
        company:
          description: |
            This person's current affiliation
          type: string
        createdOn:
          description: The date this profile was created.
          type: string
        displayName:
          description: Will always be null.
          type: string
          deprecated: true
        email:
          description: Users can have more than one email. See emails
          type: string
          deprecated: true
        emails:
          description: The list of user email addresses registered to this user.
          items:
            type: string
          type: array
        etag:
          $ref: '#/components/schemas/Etag'
        firstName:
          description: |
            This person's given name (forename)
          type: string
        industry:
          description: The industry/discipline that this person is associated with
          type: string
        lastName:
          description: |
            This person's family name (surname)
          type: string
        location:
          description: |
            This person's location
          type: string
        notificationSettings:
          $ref: '#/components/schemas/Settings'
        openIds:
          description: |
            'The list of OpenIds bound to this user's account.'
          items:
            type: string
          type: array
        ownerId:
          description: |
            'A foreign key to the ID of the 'principal' object for the user.'
          type: string
        position:
          description: |
            This person's current position title
          type: string
        preferences:
          description: User preferences
          items:
            $ref: '#/components/schemas/UserPreference'
          type: array
        profilePicureFileHandleId:
          description: |
            The FileHandle.id of the user's profile picture.
          type: string
        summary:
          description: A summary description about this person
          type: string
        teamName:
          description: |
            This person's default team name
          type: string
        url:
          description: A link to more information about this person
          type: string
        userName:
          description: A name chosen by the user that uniquely identifies them.
          type: string
      title: UserProfile
      type: object
    PaginatedResultsOfUserProfile:
      description: Page of UserProfiles
      example:
        results:
          - RStudioUrl: ...
            company: ...
            createdOn: ...
            displayName: ...
            email: ...
            emails:
              - ...
              - ...
            etag: ...
            firstName: ...
            industry: ...
            lastName: ...
            location: ...
            notificationSettings:
              markEmailedMessagesAsRead: true
              sendEmailNotifications: true
            openIds:
              - ...
              - ...
            ownerId: ...
            position: ...
            preferences:
              - concreteType: ...
                name: ...
              - concreteType: ...
                name: ...
            profilePicureFileHandleId: ...
            summary: ...
            teamName: ...
            url: ...
            userName: ...
          - RStudioUrl: ...
            company: ...
            createdOn: ...
            displayName: ...
            email: ...
            emails:
              - ...
              - ...
            etag: ...
            firstName: ...
            industry: ...
            lastName: ...
            location: ...
            notificationSettings:
              markEmailedMessagesAsRead: true
              sendEmailNotifications: true
            openIds:
              - ...
              - ...
            ownerId: ...
            position: ...
            preferences:
              - concreteType: ...
                name: ...
              - concreteType: ...
                name: ...
            profilePicureFileHandleId: ...
            summary: ...
            teamName: ...
            url: ...
            userName: ...
        totalNumberOfResults: 12345
      properties:
        results:
          description: List of User profiles
          items:
            $ref: '#/components/schemas/UserProfile'
          type: array
        totalNumberOfResults:
          $ref: '#/components/schemas/TotalNumberOfResults'
      title: PaginatedResultsOfUserProfile
      type: object
    AttachmentMetadata:
      description: The metadata of a file attached to a Verification Submission
      example:
        fileName: ...
        id: ...
      properties:
        fileName:
          description: The name of a file
          type: string
        id:
          description: The identifier of a file
          type: string
      title: AttachmentMetadata
      type: object
    VerificationStateEnum:
      description: The enumeration of possible verification states.
      enum:
        - SUBMITTED
        - APPROVED
        - REJECTED
        - SUSPENDED
      title: VerificationStateEnum
      type: string
    VerificationState:
      description: The state of a verification submission
      example:
        createdBy: ...
        createdOn: ...
        notes: ...
        reason: ...
        state: APPROVED
      properties:
        createdBy:
          description: The principal ID of the user who created this object
          type: string
        createdOn:
          description: The date and time this object was created
          type: string
        notes:
          description: >-
            Additional notes that can be set by the ACT team and that is not
            exposed to the end user.
          type: string
        reason:
          description: The reason for putting the verification submission in this state.
          type: string
        state:
          $ref: '#/components/schemas/VerificationStateEnum'
      title: VerificationState
      type: object
    VerificationSubmission:
      description: User info submitted for verification by Synapse ACT
      example:
        attachments:
          - fileName: ...
            id: ...
          - fileName: ...
            id: ...
        company: ...
        createdBy: ...
        createdOn: ...
        emails:
          - ...
          - ...
        firstName: ...
        id: ...
        lastName: ...
        location: ...
        notificationEmail: ...
        orcid: ...
        stateHistory:
          - createdBy: ...
            createdOn: ...
            notes: ...
            reason: ...
            state: SUSPENDED
          - createdBy: ...
            createdOn: ...
            notes: ...
            reason: ...
            state: SUSPENDED
      properties:
        attachments:
          description: |
            Metadata of Files attached to the submission.
            The list will be emptied after the state is APPROVED or REJECTED.
          items:
            $ref: '#/components/schemas/AttachmentMetadata'
          type: array
        company:
          description: |
            This person's current affiliation
          type: string
        createdBy:
          description: The principal ID of the user requesting verification
          type: string
        createdOn:
          description: The date and time this object was created
          type: string
        emails:
          description: The list of user email addresses registered to this user.
          items:
            type: string
          type: array
        firstName:
          description: |
            This person's given name (forename)
          type: string
        id:
          description: The ID of this object
          type: string
        lastName:
          description: |
            This person's family name (surname)
          type: string
        location:
          description: |
            This person's location
          type: string
        notificationEmail:
          description: The primary (notification) email address registered to this user.
          type: string
        orcid:
          description: |
            The user's ORCID URI
          type: string
        stateHistory:
          description: >
            List of state changes the submission has passed through, ordered by
            time.

            The last in the list contains the current state of the submission.
          items:
            $ref: '#/components/schemas/VerificationState'
          type: array
      title: VerificationSubmission
      type: object
    UserBundle:
      description: JSON schema for UserBundle POJO
      example:
        ORCID: ...
        isACTMember: true
        isCertified: true
        isVerified: true
        userId: ...
        userProfile:
          RStudioUrl: ...
          company: ...
          createdOn: ...
          displayName: ...
          email: ...
          emails:
            - ...
            - ...
          etag: ...
          firstName: ...
          industry: ...
          lastName: ...
          location: ...
          notificationSettings:
            markEmailedMessagesAsRead: true
            sendEmailNotifications: true
          openIds:
            - ...
            - ...
          ownerId: ...
          position: ...
          preferences:
            - concreteType: ...
              name: ...
            - concreteType: ...
              name: ...
          profilePicureFileHandleId: ...
          summary: ...
          teamName: ...
          url: ...
          userName: ...
        verificationSubmission:
          attachments:
            - fileName: ...
              id: ...
            - fileName: ...
              id: ...
          company: ...
          createdBy: ...
          createdOn: ...
          emails:
            - ...
            - ...
          firstName: ...
          id: ...
          lastName: ...
          location: ...
          notificationEmail: ...
          orcid: ...
          stateHistory:
            - createdBy: ...
              createdOn: ...
              notes: ...
              reason: ...
              state: SUSPENDED
            - createdBy: ...
              createdOn: ...
              notes: ...
              reason: ...
              state: REJECTED
      properties:
        ORCID:
          description: 'The ORCID ID for the user, if any'
          type: string
        isACTMember:
          description: true if the user is an ACT member
          type: boolean
        isCertified:
          description: true if the user is Certified
          type: boolean
        isVerified:
          description: true if the user is Verified
          type: boolean
        userId:
          description: The ID of the user described by this bundle
          type: string
        userProfile:
          $ref: '#/components/schemas/UserProfile'
        verificationSubmission:
          $ref: '#/components/schemas/VerificationSubmission'
      title: UserBundle
      type: object
    WikiPageKey:
      description: Reference to a WikiPage
      example:
        ownerObjectId: ...
        ownerObjectType: ORGANIZATION
        wikiPageId: ...
      properties:
        ownerObjectId:
          description: The owner of this page.
          type: string
        ownerObjectType:
          $ref: '#/components/schemas/ObjectType'
        wikiPageId:
          description: The ID of the wiki page.
          type: string
      title: WikiPageKey
      type: object
    Question:
      description: A single question in a Quiz
      example:
        concreteType: ...
        docLink: ...
        helpText: ...
        prompt: ...
        questionIndex: 12345
        reference:
          ownerObjectId: ...
          ownerObjectType: MESSAGE
          wikiPageId: ...
      properties:
        concreteType:
          description: Concrete Type
          type: string
        docLink:
          description: >-
            Link to the document that contains information for background
            reading related to the question.
          type: string
        helpText:
          description: A short text that provides a snippet of help to answer the question.
          type: string
        prompt:
          description: the user-readable prompt for this question
          type: string
        questionIndex:
          description: 'An index unique in the Quiz, used to refer to this question'
          type: integer
        reference:
          $ref: '#/components/schemas/WikiPageKey'
      title: Question
      type: object
    QuestionResponse:
      description: The response to a question
      example:
        concreteType: ...
        questionIndex: 12345
      properties:
        concreteType:
          description: Concrete Type.
          type: string
        questionIndex:
          description: >-
            An index unique in the Quiz, used to refer to the question being
            answered
          type: integer
      title: QuestionResponse
      type: object
    ResponseCorrectness:
      description: A user response and whether it is correct.
      example:
        isCorrect: true
        question:
          concreteType: ...
          docLink: ...
          helpText: ...
          prompt: ...
          questionIndex: 12345
          reference:
            ownerObjectId: ...
            ownerObjectType: WIKI
            wikiPageId: ...
        response:
          concreteType: ...
          questionIndex: 12345
      properties:
        isCorrect:
          description: Is the response correct?
          type: boolean
        question:
          $ref: '#/components/schemas/Question'
        response:
          $ref: '#/components/schemas/QuestionResponse'
      title: ResponseCorrectness
      type: object
    PassingRecord:
      description: A record of whether a given user passed a given test
      example:
        corrections:
          - isCorrect: true
            question:
              concreteType: ...
              docLink: ...
              helpText: ...
              prompt: ...
              questionIndex: 12345
              reference: {}
            response:
              concreteType: ...
              questionIndex: 12345
          - isCorrect: true
            question:
              concreteType: ...
              docLink: ...
              helpText: ...
              prompt: ...
              questionIndex: 12345
              reference: {}
            response:
              concreteType: ...
              questionIndex: 12345
        passed: true
        passedOn: ...
        quizId: 12345
        responseId: 12345
        score: 12345
        userId: ...
      properties:
        corrections:
          description: 'For each response, whether it was correct'
          items:
            $ref: '#/components/schemas/ResponseCorrectness'
          type: array
        passed:
          description: Whether the user passed the given test
          type: boolean
        passedOn:
          description: >-
            Date/time when the user passed the test (omitted if the user has not
            passed)
          type: string
        quizId:
          description: The id of the quiz
          type: integer
        responseId:
          description: |
            The id of the user's response
          type: integer
        score:
          description: The score the user received on the test
          type: integer
        userId:
          description: The principal id of the user
          type: string
      title: PassingRecord
      type: object
    PaginatedTeamIds:
      description: Container for a page of team IDs.
      example:
        nextPageToken: ...
        teamIds:
          - ...
          - ...
      properties:
        nextPageToken:
          description: >-
            Token that can be used to get the next page. Null if there are no
            more results.
          type: string
        teamIds:
          description: The requested team IDs.
          items:
            type: string
          type: array
      title: PaginatedTeamIds
      type: object
    UserGroup:
      description: JSON schema for UserGroup POJO
      example:
        creationDate: ...
        etag: ...
        id: ...
        isIndividual: true
        uri: ...
      properties:
        creationDate:
          description: The date this user or group was created.
          type: string
        etag:
          $ref: '#/components/schemas/Etag'
        id:
          description: The id of either the user or group.
          type: string
        isIndividual:
          description: 'True if this is a user, false if it is a group'
          type: boolean
        uri:
          description: Uri
          type: string
      title: UserGroup
      type: object
    PaginatedResultsOfUserGroup:
      description: JSON schema for UserGroup POJO
      example:
        results:
          - creationDate: ...
            etag: ...
            id: ...
            isIndividual: true
            uri: ...
          - creationDate: ...
            etag: ...
            id: ...
            isIndividual: true
            uri: ...
        totalNumberOfResults: 12345
      properties:
        results:
          description: Page of user groups
          items:
            $ref: '#/components/schemas/UserGroup'
          type: array
        totalNumberOfResults:
          $ref: '#/components/schemas/TotalNumberOfResults'
      title: PaginatedResultsOfUserGroup
      type: object
    UserGroupHeaderResponsePage:
      description: A single page of a users/groups info query response.
      example:
        children:
          - displayName: ...
            email: ...
            firstName: ...
            isIndividual: true
            lastName: ...
            ownerId: ...
            userName: ...
          - displayName: ...
            email: ...
            firstName: ...
            isIndividual: true
            lastName: ...
            ownerId: ...
            userName: ...
        prefixFilter: ...
        totalNumberOfResults: 12345
      properties:
        children:
          description: The list of children that match the requested concept.
          items:
            $ref: '#/components/schemas/UserGroupHeader'
          type: array
        prefixFilter:
          description: The prefix filter used to generate this result.
          type: string
        totalNumberOfResults:
          description: Total number of results
          type: number
          deprecated: true
      title: UserGroupHeaderResponsePage
      type: object
    AliasList:
      description: List of principal aliases
      example:
        list:
          - ...
          - ...
      properties:
        list:
          description: List of principal aliases
          items:
            type: string
          type: array
      title: AliasList
      type: object
    UserGroupHeaderResponse:
      description: A list of UserGroupHeaders.
      example:
        list:
          - displayName: ...
            email: ...
            firstName: ...
            isIndividual: true
            lastName: ...
            ownerId: ...
            userName: ...
          - displayName: ...
            email: ...
            firstName: ...
            isIndividual: true
            lastName: ...
            ownerId: ...
            userName: ...
      properties:
        list:
          description: The list of UserGroupHeaders
          items:
            $ref: '#/components/schemas/UserGroupHeader'
          type: array
      title: UserGroupHeaderResponse
      type: object
    ListWrapperOfUserProfile:
      description: List of User Profiles.
      example:
        effectiveSchema: ...
        list:
          - RStudioUrl: ...
            company: ...
            createdOn: ...
            displayName: ...
            email: ...
            emails:
              - ...
              - ...
            etag: ...
            firstName: ...
            industry: ...
            lastName: ...
            location: ...
            notificationSettings:
              markEmailedMessagesAsRead: true
              sendEmailNotifications: true
            openIds:
              - ...
              - ...
            ownerId: ...
            position: ...
            preferences:
              - concreteType: ...
                name: ...
              - concreteType: ...
                name: ...
            profilePicureFileHandleId: ...
            summary: ...
            teamName: ...
            url: ...
            userName: ...
          - RStudioUrl: ...
            company: ...
            createdOn: ...
            displayName: ...
            email: ...
            emails:
              - ...
              - ...
            etag: ...
            firstName: ...
            industry: ...
            lastName: ...
            location: ...
            notificationSettings:
              markEmailedMessagesAsRead: true
              sendEmailNotifications: true
            openIds:
              - ...
              - ...
            ownerId: ...
            position: ...
            preferences:
              - concreteType: ...
                name: ...
              - concreteType: ...
                name: ...
            profilePicureFileHandleId: ...
            summary: ...
            teamName: ...
            url: ...
            userName: ...
      properties:
        list:
          description: List of UserProfiles.
          items:
            $ref: '#/components/schemas/UserProfile'
          type: array
      title: ListWrapperOfUserProfile
      type: object
security:
  - bearerAuth: []
