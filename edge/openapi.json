{
  "openapi": "3.0.1",
  "info": {
    "title": "Platform Repository Service",
    "contact": {
      "email": "thomas.yu@sagebionetworks.org"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "Platform Repository Service - Sage Bionetworks Platform\n",
    "version": "develop-SNAPSHOT"
  },
  "servers": [
    {
      "url": "https://repo-prod.prod.sagebase.org/repo/v1/"
    }
  ],
  "tags": [
    {
      "name": "Access Approval Services",
      "description": "The Access Approval services manage the fulfillment of Access Requirements, on a per-user basis."
    },
    {
      "name": "Access Requirement Services",
      "description": "These services manage the Access Requirements/Restrictions (ARs) which may be placed on Entities,\nor Teams.\n"
    },
    {
      "name": "Activity Services",
      "description": "."
    },
    {
      "name": "Administration Services",
      "description": "Since this controller is for internal use only we removed the ControllerInfo annotation."
    },
    {
      "name": "Asynchronous Job Services",
      "description": "This is a generic set of services that provides support for both launching\nasynchronous jobs and monitoring the progress of jobs.\n"
    },
    {
      "name": "Certified User Services",
      "description": "To become a Synapse Certified User you must pass a test."
    },
    {
      "name": "Challenge Services",
      "description": "A Challenge is a special object that supplements a project, providing additional features\nspecific to challenges.\n"
    },
    {
      "name": "Data Access Services",
      "description": "."
    },
    {
      "name": "Discussion Services",
      "description": "."
    },
    {
      "name": "Docker Authorization Services",
      "description": "These services allow Synapse to act as an authorization service for a Docker Registry."
    },
    {
      "name": "Docker Commit Services",
      "description": "These services relate to the 'commits' to Docker repositories."
    },
    {
      "name": "Docker Registry Event Services",
      "description": "These services process events from the Docker Registry."
    },
    {
      "name": "Doi Services",
      "description": "Provides REST APIs for managing Synapse DOIs."
    },
    {
      "name": "Entity Bundle Services",
      "description": "."
    },
    {
      "name": "Entity Bundle V2 Services",
      "description": "."
    },
    {
      "name": "Entity Services",
      "description": "."
    },
    {
      "name": "Evaluation Services",
      "description": "."
    },
    {
      "name": "Form Services",
      "description": "Collection of APIs from managing and submitting form data."
    },
    {
      "name": "Health Check Services"
    },
    {
      "name": "Json Schema Services",
      "description": "This set of services provide project designers with tools to define their own\nschemas to control and validate metadata applied to Projects, Folders, and\nFiles.\n"
    },
    {
      "name": "Log Services",
      "description": "https://sagebionetworks."
    },
    {
      "name": "Membership Invitation Services",
      "description": "The Membership Invitation Services create, retrieve and delete\nmembership invitations.\n"
    },
    {
      "name": "Membership Request Services",
      "description": "The Membership Request Services create, retrieve and delete\nmembership requests.\n"
    },
    {
      "name": "Message Services",
      "description": "."
    },
    {
      "name": "Migration Services",
      "description": "Services for Migrating data between stacks."
    },
    {
      "name": "Principal Services",
      "description": "A."
    },
    {
      "name": "Project Settings Services",
      "description": "The project settings services provide configuration options that can be applied to projects."
    },
    {
      "name": "Search Services",
      "description": "Search for Entities on Synapse."
    },
    {
      "name": "Statistics Services",
      "description": "Services that expose statistics computed by the backend."
    },
    {
      "name": "Storage Report Services",
      "description": "Provides REST APIs for generating Storage Reports."
    },
    {
      "name": "Subscription Services",
      "description": "."
    },
    {
      "name": "Synapse Version Info Services"
    },
    {
      "name": "Table Services",
      "description": "."
    },
    {
      "name": "Team Services",
      "description": "Teams are groups of users."
    },
    {
      "name": "Trash Services",
      "description": "The recycle bin (or trash can) is the special folder that holds the deleted entities for users."
    },
    {
      "name": "User Group Service"
    },
    {
      "name": "User Profile Services",
      "description": "Every Synapse user has an associated."
    },
    {
      "name": "V2 Wiki Services",
      "description": "."
    },
    {
      "name": "Verification Services",
      "description": "Identity verification is a service offered by the Synapse Access and Compliance Team\nto add an additional layer of legitimacy to a user account, beyond the basic\nrequirements for creating an account in Synapse.\n"
    },
    {
      "name": "Wiki Services",
      "description": "."
    }
  ],
  "paths": {
    "/challenge": {
      "post": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Create a Challenge object, associated with a Project.",
        "description": "Create a Challenge object, associated with a Project.  A participant Team must\nbe specified.  To create a Challenge one must have CREATE permission on the\nassociated Project.\n",
        "operationId": "createChallenge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the Challenges for which the given participant is registered.",
        "description": "List the Challenges for which the given participant is registered.\nTo be in the returned list the caller must have READ permission on the\nproject associated with the Challenge.\n",
        "operationId": "listChallengesForParticipant",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengePagedResults"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Retrieve a Challenge given its ID.",
        "description": "Retrieve a Challenge given its ID.  To retrieve a\nChallenge one must have READ permission on the associated Project.\n",
        "operationId": "getChallenge",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Update a Challenge.",
        "description": "Update a Challenge.  The caller must have UPDATE permission on the\nproject associated with the Challenge.  It is not permitted to\nchange the project associated with a Challenge.\n",
        "operationId": "updateChallenge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Delete a Challenge.",
        "description": "Delete a Challenge.  The caller must have DELETE permission on the\nproject associated with the Challenge.\n",
        "operationId": "deleteChallenge",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          }
        }
      }
    },
    "/challenge/{challengeId}/challengeTeam": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the Teams registered for a Challenge.",
        "description": "List the Teams registered for a Challenge.  You must have READ permission\nin the associated Project to make this request.\n",
        "operationId": "listChallengeTeams",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeTeamPagedResults"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Register a Team with a Challenge.",
        "description": "Register a Team with a Challenge. You must be a member of the Challenge's\nparticipant Team (i.e. you must be already registered for the Challenge)\nand be an administrator on the Team being registered.\n",
        "operationId": "createChallengeTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeTeam"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeTeam"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}/challengeTeam/{challengeTeamId}": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "challengeTeamId",
          "in": "path",
          "required": true,
          "description": "The ID of the challenge team.",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Update a Challenge Team.",
        "description": "Update a Challenge Team. You must be a member of the Challenge's\nparticipant Team (i.e. you must be already registered for the Challenge)\nand be an administrator on the associated Team.\n",
        "operationId": "updateChallengeTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeTeam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeTeam"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}/participant": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the participants registered for a Challenge.",
        "description": "List the participants registered for a Challenge.\nThe caller must have READ permission on the\nproject associated with the Challenge.",
        "operationId": "listParticipantsInChallenge",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedIds"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}/registratableTeam": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the Teams that caller can register for the Challenge.",
        "description": "List the Teams that caller can register for the Challenge, i.e. Teams on which\nthe caller is an administrator and which are not already registered.\nThe caller must have READ permission on the\nproject associated with the Challenge to make this request.\n",
        "operationId": "listRegistratableTeams",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedIds"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}/submissionTeams": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the Teams under which the given submitter may submit to the Challenge.",
        "description": "List the Teams under which the given submitter may submit to the Challenge, i.e. the Teams on which\nthe user is a member and which are registered for the Challenge.\n",
        "operationId": "listSubmissionTeams",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedIds"
                }
              }
            }
          }
        }
      }
    },
    "/challengeTeam/{challengeTeamId}": {
      "parameters": [
        {
          "name": "challengeTeamId",
          "in": "path",
          "required": true,
          "description": "The ID of the challenge team.",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "De-register a Team from a Challenge.",
        "description": "De-register a Team from a Challenge. You must be a member of the Challenge's\nparticipant Team (i.e. you must be already registered for the Challenge)\nand be an administrator on the Team being de-registered.\n",
        "operationId": "deleteChallengeTeam",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          }
        }
      }
    },
    "/entity/{id}/challenge": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Synapse Project id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Retrieve a Challenge given the ID of its associated Project.",
        "description": "Retrieve a Challenge given the ID of its associated Project.  To retrieve a\nChallenge one must have READ permission on the Project.\n",
        "operationId": "getChallengeByProjectId",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        }
      }
    },
    "/evaluation": {
      "get": {
        "description": "Gets a collection of Evaluations, within a given range.\n\n\n<p>\n\n<b>Note:</b> The response will contain only those Evaluations on which the caller\nis\n\ngranted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a>\n\npermission, unless specified otherwise with the accessType parameter.\n\n</p>\n",
        "operationId": "getEvaluationsPaginated",
        "parameters": [
          {
            "name": "accessType",
            "description": "The type of access for the user to filter for, optional and defaults\nto <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a>\n",
            "in": "query",
            "schema": {
              "default": "READ",
              "enum": [
                "CHANGE_PERMISSIONS",
                "CHANGE_SETTINGS",
                "CREATE",
                "DELETE",
                "DELETE_SUBMISSION",
                "DOWNLOAD",
                "MODERATE",
                "PARTICIPATE",
                "READ",
                "READ_PRIVATE_SUBMISSION",
                "SEND_MESSAGE",
                "SUBMIT",
                "TEAM_MEMBERSHIP_UPDATE",
                "UPDATE",
                "UPDATE_SUBMISSION",
                "UPLOAD"
              ],
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "description": "If 'true' then return only those evaluations with rounds defined\nand for which the current time is in one of the rounds.\n",
            "in": "query",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "evaluationIds",
            "description": "an optional, comma-delimited list of evaluation IDs to which the\nresponse is limited\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the pagination offset. For a page size of 10, the\nfirst page would be at offset = 0, and the second page would be at offset =\n10.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfEvaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a collection of Evaluations, within a given range.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "post": {
        "description": "'Creates a new Evaluation. The passed request body should contain the\nfollowing fields:\n\n<ul>\n\n<li>name - Give your new Evaluation a name.</li>\n\n<li>contentSource - The ID of the parent Entity, such as a Folder or Project.</li>\n\n<li>status - The initial state of the Evaluation, an\n\n<a href=\"${org.sagebionetworks.evaluation.model.EvaluationStatus}\">EvaluationStatus</a></li>\n\n</ul>\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.CREATE</a> on the contentSource Entity.\n\n</p>\n",
        "operationId": "createEvaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Evaluation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Creates a new Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}": {
      "parameters": [
        {
          "description": "The ID of the requested Evaluation",
          "in": "path",
          "name": "evalId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Deletes an Evaluation.\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.DELETE</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "deleteEvaluation",
        "responses": {
          "204": {
            "description": "The resource was deleted."
          }
        },
        "summary": "Deletes an Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "get": {
        "description": "Gets an Evaluation.\n\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a\n\nhref=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\"\n\n>ACCESS_TYPE.READ</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "getEvaluation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets an Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "put": {
        "description": "'Updates an Evaluation.\n\n\n<p>\n\nSynapse employs an Optimistic Concurrency Control (OCC) scheme to handle\n\nconcurrent updates. Each time an Evaluation is updated a new etag will be\n\nissued to the Evaluation. When an update is requested, Synapse will compare the\n\netag of the passed Evaluation with the current etag of the Evaluation. If the\n\netags do not match, then the update will be rejected with a\n\nPRECONDITION_FAILED (412) response. When this occurs, the caller should\n\nfetch the latest copy of the Evaluation and re-apply any changes, then re-attempt\n\nthe Evaluation update.\n\n</p>\n\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a\n\nhref=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\"\n\n>ACCESS_TYPE.UPDATE</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "updateEvaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Evaluation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Updates an Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/access": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "Evaluation Id.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Determines whether a specified Synapse user has a certain\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE</a> on the specified Evaluation.\n",
        "operationId": "hasAccess2",
        "parameters": [
          {
            "in": "query",
            "name": "accessType",
            "description": "Synapse access type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResult"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Determines whether a specified Synapse user has a certain.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/acl": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the evaluation over which the user permission are being\nretrieved.\n",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "deprecated": true,
        "description": "This method is deprecated and should be removed from future versions\nof the API.\n\nDeletes the ACL (access control list) of the specified evaluation. The user should\nhave the proper <a href=\"${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\">permissions</a>\nto delete the ACL.\n",
        "operationId": "deleteAcl",
        "responses": {
          "204": {
            "description": "The resource was deleted"
          }
        },
        "summary": "This method is deprecated and should be removed from future versions of the API.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "get": {
        "description": "Gets the access control list (ACL) governing the given evaluation.\nThe user should have the proper\n<a href=\"${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\">permissions</a>\nto read the ACL.\n",
        "operationId": "getAcl",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets the access control list (ACL) governing the given evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "PageResultsMetadata": {
        "type": "object",
        "description": "A page of results",
        "properties": {
          "offset": {
            "description": "Index of the first result that must be returned",
            "type": "integer"
          },
          "limit": {
            "description": "Maximum number of results returned",
            "type": "integer"
          }
        },
        "required": [
          "offset",
          "limit"
        ]
      },
      "Challenge": {
        "title": "Challenge",
        "type": "object",
        "properties": {
          "etag": {
            "type": "string",
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date."
          },
          "projectId": {
            "type": "string",
            "description": "The ID of the Project the challenge is used with."
          },
          "participantTeamId": {
            "type": "string",
            "description": "The ID of the Team which users join to participate in the Challenge"
          },
          "id": {
            "type": "string",
            "description": "The ID of this Challenge object"
          }
        },
        "description": "Settings for a Challenge Project.",
        "example": {
          "etag": "32439w3qsdfw",
          "projectId": "syn22222",
          "participantTeamId": "333333",
          "id": "4321"
        }
      },
      "ChallengePagedResults": {
        "title": "ChallengePagedResults",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PageResultsMetadata"
          },
          {
            "type": "object",
            "properties": {
              "totalNumberOfResults": {
                "type": "integer",
                "description": "The total number of results"
              },
              "results": {
                "type": "array",
                "description": "The list of results for this page",
                "items": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            },
            "description": "List the Challenges for which the given participant is registered. To be in the returned list the caller must have READ permission on the project associated with the Challenge."
          }
        ],
        "example": {
          "offset": 10,
          "limit": 0,
          "totalNumberOfResults": 12345,
          "results": [
            {
              "etag": "32439w3qsdfw",
              "projectId": "syn22222",
              "participantTeamId": "333333",
              "id": "4321"
            },
            {
              "etag": "32439w3qsdfwasd",
              "projectId": "syn33333",
              "participantTeamId": "4444",
              "id": "4322"
            }
          ]
        }
      },
      "ChallengeTeam": {
        "title": "ChallengeTeam",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of this ChallengeTeam object"
          },
          "teamId": {
            "type": "string",
            "description": "The ID of the Team"
          },
          "challengeId": {
            "type": "string",
            "description": "The ID of the Challenge"
          },
          "message": {
            "type": "string",
            "description": "A descriptive message for the Team in the context of the Challenge. Limited to 500 characters."
          },
          "etag": {
            "type": "string",
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date."
          }
        },
        "description": "Relationship between a Challenge and registered Team",
        "example": {
          "id": "1111",
          "teamId": "222222",
          "challengeId": "3423",
          "message": "Testing",
          "etag": "33492273ssdf"
        }
      },
      "ChallengeTeamPagedResults": {
        "title": "ChallengeTeamPagedResults",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PageResultsMetadata"
          },
          {
            "type": "object",
            "properties": {
              "totalNumberOfResults": {
                "type": "integer",
                "description": "The total number of results"
              },
              "results": {
                "type": "array",
                "description": "The list of results for this page",
                "items": {
                  "$ref": "#/components/schemas/ChallengeTeam"
                }
              }
            }
          }
        ],
        "description": "List the Teams registered for a Challenge. You must have READ permission in the associated Project to make this request.",
        "example": {
          "offset": 10,
          "limit": 0,
          "totalNumberOfResults": 12345,
          "results": [
            {
              "id": "1111",
              "teamId": "222222",
              "challengeId": "3423",
              "message": "Testing",
              "etag": "33492273ssdf"
            },
            {
              "id": "1112",
              "teamId": "222233",
              "challengeId": "3421",
              "message": "Testing foo",
              "etag": "33492273ssdddf"
            }
          ]
        }
      },
      "PaginatedIds": {
        "title": "PaginatedIds",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PageResultsMetadata"
          },
          {
            "type": "object",
            "properties": {
              "totalNumberOfResults": {
                "type": "integer",
                "description": "The total number of results"
              },
              "results": {
                "type": "array",
                "description": "The list of Object Ids for this page",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "description": "Paginated results of strings",
        "example": {
          "limit": 10,
          "offset": 0,
          "totalNumberOfResults": 12345,
          "results": [
            "test1",
            "test2"
          ]
        }
      },
      "SubmissionQuota": {
        "title": "SubmissionQuota",
        "type": "object",
        "description": "Maximum submissions per team/participant per submission round. If round information is omitted, then this indicates the overall submission limit per team/participant.",
        "example": {
          "firstRoundStart": "33333333",
          "numberOfRounds": 1,
          "roundDurationMillis": 12345,
          "submissionLimit": 2
        },
        "properties": {
          "firstRoundStart": {
            "description": "The date/time at which the first round begins.",
            "type": "string"
          },
          "numberOfRounds": {
            "description": "The number of rounds, or null if there is no end.",
            "type": "integer"
          },
          "roundDurationMillis": {
            "description": "The duration of each round in milliseconds",
            "type": "integer"
          },
          "submissionLimit": {
            "description": "the maximum number of submissions per team/participant per round.",
            "type": "integer"
          }
        }
      },
      "EvaluationStatus": {
        "title": "EvaluationStatus",
        "type": "string",
        "description": "The possible states of a Synapse Evaluation.",
        "enum": [
          "PLANNED",
          "OPEN",
          "CLOSED",
          "COMPLETED"
        ]
      },
      "Evaluation": {
        "title": "Evaluation",
        "type": "object",
        "description": "An Evaluation is the core object of the Evaluation API, used to support collaborative data analysis challenges in Synapse.",
        "example": {
          "contentSource": "syn234444",
          "createdOn": "12345",
          "description": "Evaluation Queue",
          "etag": "aaaaa",
          "id": "12345",
          "name": "Test Evaluation",
          "ownerId": "22222",
          "quota": {
            "firstRoundStart": "12345",
            "numberOfRounds": 12345,
            "roundDurationMillis": 12345,
            "submissionLimit": 12345
          },
          "status": "PLANNED",
          "submissionInstructionsMessage": "Instructions",
          "submissionReceiptMessage": "Received"
        },
        "properties": {
          "contentSource": {
            "description": "The Synapse ID of the Entity to which this Evaluation belongs, e.g. a reference to a Synapse project.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date on which Evaluation was created.",
            "type": "string"
          },
          "description": {
            "description": "A text description of this Evaluation.",
            "type": "string"
          },
          "etag": {
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates.\nThe eTag changes every time an Evaluation is updated; it is used to detect when a client's\ncopy of an Evaluation is out-of-date.\n",
            "type": "string"
          },
          "id": {
            "description": "The unique immutable ID for this Evaluation.",
            "type": "string"
          },
          "name": {
            "description": "The name of this Evaluation",
            "type": "string"
          },
          "ownerId": {
            "description": "The ID of the Synapse user who created this Evaluation.",
            "type": "string"
          },
          "quota": {
            "$ref": "#/components/schemas/SubmissionQuota"
          },
          "status": {
            "$ref": "#/components/schemas/EvaluationStatus"
          },
          "submissionInstructionsMessage": {
            "description": "Message to display to users detailing acceptable formatting for Submissions to this Evaluation.",
            "type": "string"
          },
          "submissionReceiptMessage": {
            "description": "Message to display to users upon successful submission to this Evaluation.",
            "type": "string"
          }
        }
      },
      "PaginatedResultsOfEvaluation": {
        "title": "PaginatedResultsOfEvaluation",
        "type": "object",
        "description": "Gets a collection of Evaluations, within a given range.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PageResultsMetadata"
          },
          {
            "type": "object",
            "properties": {
              "accessType": {
                "description": "The type of access for the user to filter for, optional and defaults to ACCESS_TYPE.READ",
                "type": "string"
              },
              "activeOnly": {
                "description": "If 'true' then return only those evaluations with rounds defined and for\nwhich the current time is in one of the rounds.\n",
                "type": "string"
              },
              "evaluationIds": {
                "description": "an optional, comma-delimited list of evaluation IDs to which the response is limited",
                "type": "string"
              },
              "results": {
                "type": "array",
                "description": "List of evaluations",
                "items": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              },
              "totalNumberOfResults": {
                "description": "Number of results per page",
                "type": "integer"
              }
            }
          }
        ]
      },
      "BooleanResult": {
        "description": "Boolean result",
        "example": {
          "result": true
        },
        "properties": {
          "result": {
            "description": "Boolean result",
            "type": "boolean"
          }
        },
        "title": "BooleanResult",
        "type": "object"
      },
      "ACCESS_TYPE": {
        "title": "ACCESS_TYPE",
        "type": "string",
        "description": "The enumeration of possible permission.",
        "enum": [
          "CREATE",
          "READ",
          "UPDATE",
          "DELETE",
          "CHANGE_PERMISSIONS",
          "DOWNLOAD",
          "UPLOAD",
          "PARTICIPATE",
          "SUBMIT",
          "READ_PRIVATE_SUBMISSION",
          "UPDATE_SUBMISSION",
          "DELETE_SUBMISSION",
          "TEAM_MEMBERSHIP_UPDATE",
          "SEND_MESSAGE",
          "CHANGE_SETTINGS",
          "MODERATE"
        ]
      },
      "ResourceAccess": {
        "title": "ResourceAccess",
        "type": "object",
        "description": "JSON schema for a ResourceAccess POJO",
        "example": {
          "accessType": [
            "UPDATE",
            "DELETE_SUBMISSION"
          ],
          "principalId": 12345
        },
        "properties": {
          "accessType": {
            "description": "A list of types of access granted to the given principal",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ACCESS_TYPE"
            }
          },
          "principalId": {
            "description": "The id of the principal who is granted access",
            "type": "integer"
          }
        }
      },
      "AccessControlList": {
        "title": "AccessControlList",
        "type": "object",
        "description": "Contains list of principals who can access the data with the allowed types of access for each.",
        "properties": {
          "createdBy": {
            "description": "UNUSED -- maintained only for backwards compatibility with archived objects",
            "type": "string"
          },
          "creationDate": {
            "description": "Created Date",
            "type": "string"
          },
          "etag": {
            "description": "Synapse etag value",
            "type": "string"
          },
          "id": {
            "description": "The entity id",
            "type": "string"
          },
          "modifiedBy": {
            "description": "UNUSED -- maintained only for backwards compatibility with archived objects",
            "type": "string"
          },
          "modifiedOn": {
            "description": "UNUSED -- maintained only for backwards compatibility with archived objects",
            "type": "string"
          },
          "resourceAccess": {
            "description": "The list of principals who can access the data with the allowed types of access for each.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceAccess"
            }
          }
        },
        "example": {
          "createdBy": "...",
          "creationDate": "12345",
          "etag": "...",
          "id": "...",
          "modifiedBy": "...",
          "modifiedOn": "12345",
          "resourceAccess": [
            {
              "accessType": [
                "UPDATE_SUBMISSION",
                "CHANGE_PERMISSIONS"
              ],
              "principalId": 12345
            },
            {
              "accessType": [
                "UPDATE",
                "SEND_MESSAGE"
              ],
              "principalId": 12345
            }
          ]
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}