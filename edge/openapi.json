{
  "openapi": "3.0.1",
  "info": {
    "title": "Platform Repository Service",
    "contact": {
      "email": "thomas.yu@sagebionetworks.org"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "Platform Repository Service - Sage Bionetworks Platform\n",
    "version": "develop-SNAPSHOT"
  },
  "servers": [
    {
      "url": "https://repo-prod.prod.sagebase.org/repo/v1",
      "description": "Production server"
    },
    {
      "url": "https://repo-staging.prod.sagebase.org/repo/v1",
      "description": "Staging server"
    }
  ],
  "tags": [
    {
      "name": "Access Approval Services",
      "description": "The Access Approval services manage the fulfillment of Access Requirements,\non a per-user basis.\n"
    },
    {
      "name": "Access Requirement Services",
      "description": "These services manage the Access Requirements/Restrictions (ARs) which may be placed on Entities,\nor Teams.\n"
    },
    {
      "name": "Activity Services",
      "description": "The Activity model represents the main record of Provenance in Synapse.\nIt is analygous to the Activity defined in the W3C Specification on Provenance.\n\nUsed & Generated By\n\nUsed links are stored directly in the Activity model object as an array of Used objects.\nThere is a flag in Used that marks if it was \"executed\". Used is an interface that is\nimplemented by two objects:\n\n* UsedEntity - For referencing Entities already stored in Synapse\n* UsedURL - For referencing URL-accessed resources stored outside of Synapse. In Provenance visualizations, some URLs are given a special icon, such as links to GitHub. Note: it is also possible to wrap a URL with a FileEntity if you want all the resources that come with Synapse entities.\n\nwasGeneratedBy links are stored for each version of each Entity. Thus you update the entity with the activity id that generated it. You can ask the entity service which activity generated it, and conversely you can ask the activity service what entity versions were generatedBy a given activity.\n\nAccess Control for Activities\n\nAccess to Activity objects is dictated by the following rules:\n\n* READ - Granted to those users who can see a single Entity that was generated by this Activity.\n* UPDATE/DELETE - You must be the creator of the Activity to modify or delete it.\n* Setting generatedBy for an Entity (see POST /entity) - You must be the creator of the activity to connect it to an Entity. (The Entity services allow you to specify an activityId that creates a generatedBy relationship between an Activity and an Entity.)\n"
    },
    {
      "name": "Asynchronous Job Services",
      "description": "This is a generic set of services that provides support for both launching\nasynchronous jobs and monitoring the progress of jobs.\n"
    },
    {
      "name": "Certified User Services",
      "description": "To become a Synapse Certified User you must pass a test.\nThe Synapse APIs include a service to provide the test and a service to\nsubmit a test result. There are also administrative services to retrieve\nthe history of test submissions.\n"
    },
    {
      "name": "Challenge Services",
      "description": "A Challenge is a special object that supplements a project, providing additional features\nspecific to challenges.\n"
    },
    {
      "name": "Data Access Services",
      "description": "Some data in Synapse are governed by an ACTAccessRequirement. To gain access to\nthese data, a user must meet all requirements specified in the ACTAccessRequirement.\n\nThese services provide the APIs for users to create request to gain access to\ncontrolled data, and APIs for the ACT to review and grant access to users.\n"
    },
    {
      "name": "Discussion Services",
      "description": "Discussions in Synapse are captured in the Project's Forum.\nEach Project has a Forum. Each Forum has a set of Moderators.\nThe Moderators manage the content of the Forum.\n"
    },
    {
      "name": "Docker Commit Services",
      "description": "These services relate to the 'commits' to Docker repositories.\nNote that create, update and delete of the Docker repositories themselves\nare done using the Entity Services, for external/unmanaged repositories,\nor by direct integration with the Docker registry, for managed Docker\nrepositories. Tagged commits for both managed and external/unmanaged repositories\nmay be retrieved using the 'listDockerTags' API included in this service.\n"
    },
    {
      "name": "Doi Services",
      "description": "Provides REST APIs for managing Synapse DOIs."
    },
    {
      "name": "Entity Bundle V2 Services",
      "description": "The Entity Bundle Services provide bundled access to Entities and their related data components.\nAn EntityBundle can be used to create, fetch, or update an Entity and associated objects\nwith a single web service request.\n"
    },
    {
      "name": "Entity Services",
      "description": "All data in Synapse is organize into Projects. These Projects can be further organized\ninto hierarchical Folders. Finally, the data is then represented by FileEntities or\nRecords (coming soon) that reside within Folders or directly within Projects.\nAll these objects (Projects, Folders, FileEntities, and Records) are derived from\na common object called Entity. The Entity Services provide the means to create, read,\nupdate, and delete Synapse Entities. There are also services for navigating the Entity\nhierarchies, setting Authorization rules, and Annotating Entities.\n"
    },
    {
      "name": "Evaluation Services",
      "description": "The Evaluation API is designed to support open-access data analysis and modeling\nchallenges in Synapse. This framework provides tools for administrators to collect\nand analyze data models from Synapse users created for a specific goal or purpose.\n"
    },
    {
      "name": "Form Services",
      "description": "Collection of APIs from managing and submitting form data.\n"
    },
    {
      "name": "Json Schema Services",
      "description": "This set of services provide project designers with tools to define their own\nschemas to control and validate metadata applied to Projects, Folders, and\nFiles.\n"
    },
    {
      "name": "Membership Invitation Services",
      "description": "The Membership Invitation Services create, retrieve and delete\nmembership invitations.\n"
    },
    {
      "name": "Membership Request Services",
      "description": "The Membership Request Services create, retrieve and delete\nmembership requests.\n"
    },
    {
      "name": "Message Services",
      "description": "Provides REST APIs for sending messages to other Synapse users and\nfor commenting on Synapse entities.\n"
    },
    {
      "name": "Table Services",
      "description": "A Synapse TableEntity model object represents the metadata of a table.\nEach TableEntity is defined by a list of ColumnModel IDs. Use POST /column\nto create new ColumnModel objects. Each ColumnModel object is immutable,\nso to change a column of a table a new column must be added and the old column\nmust be removed. TableEntities can be created, updated, read and deleted like\nany other entity.\n"
    },
    {
      "name": "Team Services",
      "description": "Teams are groups of users."
    },
    {
      "name": "Trash Services",
      "description": "The recycle bin (or trash can) is the special folder that holds the\ndeleted entities for users.\n"
    },
    {
      "name": "User Profile Services",
      "description": "Every Synapse user has an associated User Profile"
    }
  ],
  "paths": {
    "/accessApproval": {
      "delete": {
        "description": "Revoke all Access Approvals an accessor may have for a given Access\nRequirement.\n\nThis service is only available to the ACT.\nNote: requirementId must be the ID of an ACT AccessRequirement.\n",
        "operationId": "revokeAccessApprovals",
        "parameters": [
          {
            "description": "The user whose access is being revoked",
            "in": "query",
            "name": "accessorId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "The ID of the Access Requirement.",
            "name": "requirementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Revoke all Access Approvals an accessor may have for a given Access Requirement.",
        "tags": [
          "Access Approval Services"
        ]
      },
      "post": {
        "description": "Create an Access Approval, thereby fulfilling an Access Requirement\nfor a given user.\n\nSelf-signed Access Approvals may be generated by the user being approved.  ACT\nAccess Approvals may be generated only by the Synapse Access and Compliance Team\n(ACT).\n\nSince an Access Requirement may apply to multiple entities, fulfilling an Access\nRequirement provides access to all entities restricted by the fulfilled requirement.\n",
        "operationId": "createAccessApproval",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessApproval"
              }
            }
          },
          "description": "the Access Approval to create",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessApproval"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create an Access Approval, thereby fulfilling an Access Requirement for\na given user.\n",
        "tags": [
          "Access Approval Services"
        ]
      }
    },
    "/accessApproval/{approvalId}": {
      "parameters": [
        {
          "description": "The ID of the approval.",
          "in": "path",
          "name": "approvalId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "deprecated": true,
        "description": "Delete a selected Access Approval.  This service is only available\nto the ACT.\n",
        "operationId": "deleteAccessApproval",
        "responses": {
          "204": {
            "description": "The resource has been deleted."
          }
        },
        "summary": "Delete an Access Approval.",
        "tags": [
          "Access Approval Services"
        ]
      },
      "get": {
        "description": "Retrieving an AccessApproval given its ID.",
        "operationId": "getAccessApproval",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessApproval"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieving an AccessApproval given its ID.",
        "tags": [
          "Access Approval Services"
        ]
      }
    },
    "/accessApproval/group": {
      "post": {
        "description": "Retrieving a page of AccessorGroup.\n\nThis service is only available for ACT.\nACT can filter on AccessRequirementId, submitterId, and expiredOn by setting\nthe associated fields in AccessorGroupRequest.'\n",
        "operationId": "listAccessorGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessorGroupRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessorGroupResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieving a page of AccessorGroup.",
        "tags": [
          "Access Approval Services"
        ]
      }
    },
    "/accessApproval/information": {
      "post": {
        "description": "Retrieve a batch of AccessApprovalInfo for a single user.",
        "operationId": "getBatchAccessApprovalInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchAccessApprovalInfoRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchAccessApprovalInfoResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a batch of AccessApprovalInfo for a single user.",
        "tags": [
          "Access Approval Services"
        ]
      }
    },
    "/accessApproval/notifications": {
      "post": {
        "description": "Fetches the notifications sent for an access requirement and a list\nof recipients.\n\nThis service is only available for ACT.\n",
        "operationId": "listNotifications",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessApprovalNotificationRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessApprovalNotificationResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Fetches the notifications sent for an access requirement and a list of\nrecipients.\n",
        "tags": [
          "Access Approval Services"
        ]
      }
    },
    "/accessRequirement": {
      "post": {
        "description": "Add an Access Requirement to an Entity, or Team.\nThis service may only be used by the Synapse Access and Compliance Team.\n",
        "operationId": "createAccessRequirement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRequirement"
              }
            }
          },
          "description": "the Access Requirement to create",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequirement"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Add an Access Requirement to an Entity, or Team.",
        "tags": [
          "Access Requirement Services"
        ]
      }
    },
    "/accessRequirement/{requirementId}": {
      "parameters": [
        {
          "description": "the ID of the requirement.",
          "in": "path",
          "name": "requirementId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete an Access Requirement.\nThis service may only be used by the Synapse Access and Compliance Team.\n",
        "operationId": "deleteAccessRequirements",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Delete an Access Requirement.",
        "tags": [
          "Access Requirement Services"
        ]
      },
      "get": {
        "description": "Get an Access Requirement to an Entity, or Team based on its ID.",
        "operationId": "getAccessRequirement",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequirement"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get an Access Requirement.",
        "tags": [
          "Access Requirement Services"
        ]
      },
      "put": {
        "description": "Modify an existing Access Requirement.\n\nThis service may only be used by the Synapse Access and Compliance Team.\n",
        "operationId": "updateAccessRequirement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRequirement"
              }
            }
          },
          "description": "The modified Access Requirement.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequirement"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Modify an existing Access Requirement.",
        "tags": [
          "Access Requirement Services"
        ]
      }
    },
    "/accessRequirement/{requirementId}/approvedSubmissionInfo": {
      "parameters": [
        {
          "description": "the ID of the requirement.",
          "in": "path",
          "name": "requirementId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Return the research project info for approved data access submissions,\nordered by submission modified-on date, ascending\n",
        "operationId": "listInfoForApprovedSubmissions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmissionInfoPageRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionInfoPage"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Return approved data access submissions",
        "tags": [
          "Data Access Services"
        ]
      }
    },
    "/accessRequirement/{requirementId}/dataAccessRequestForUpdate": {
      "parameters": [
        {
          "description": "the ID of the requirement.",
          "in": "path",
          "name": "requirementId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the Request for update.\n\nIf one does not exist, an Request with some re-filled information is returned.\nIf a submission associated with the request is approved, and the requirement\nrequires renewal, a refilled Renewal is returned.\nOnly the owner of the request can perform this action.\n",
        "operationId": "getRequestForUpdate",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestInterface"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the Request for update.",
        "tags": [
          "Data Access Services"
        ]
      }
    },
    "/accessRequirement/{requirementId}/researchProjectForUpdate": {
      "parameters": [
        {
          "description": "the ID of the requirement.",
          "in": "path",
          "name": "requirementId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve an existing ResearchProject that the user owns.\n\nIf none exists, a ResearchProject with some re-filled information is returned\nto the user.\nOnly the owner of the researchProject can perform this action.\n",
        "operationId": "getUserOwnResearchProjectForUpdate",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResearchProject"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve an existing ResearchProject that the user owns.",
        "tags": [
          "Data Access Services"
        ]
      }
    },
    "/accessRequirement/{requirementId}/status": {
      "parameters": [
        {
          "description": "the ID of the requirement.",
          "in": "path",
          "name": "requirementId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve an access requirement status for a given access requirement ID.",
        "operationId": "getAccessRequirementStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequirementStatus"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve an access requirement status for a given access requirement ID.",
        "tags": [
          "Data Access Services"
        ]
      }
    },
    "/accessRequirement/{requirementId}/subjects": {
      "parameters": [
        {
          "description": "the ID of the requirement.",
          "in": "path",
          "name": "requirementId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve a page of subjects for a given Access Requirement ID.",
        "operationId": "getSubjects",
        "parameters": [
          {
            "in": "query",
            "description": "Next page",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestrictableObjectDescriptorResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a page of subjects for a given Access Requirement ID.",
        "tags": [
          "Access Requirement Services"
        ]
      }
    },
    "/accessRequirement/{requirementId}/submissions": {
      "parameters": [
        {
          "description": "the ID of the requirement.",
          "in": "path",
          "name": "requirementId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Retrieve a list of submissions for a given access requirement ID.\n\nOnly ACT member can perform this action.\n",
        "operationId": "listArSubmissions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmissionPageRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionPage"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a list of submissions for a given access requirement ID.",
        "tags": [
          "Data Access Services"
        ]
      }
    },
    "/accessRequirement/conversion": {
      "put": {
        "description": "Convert an ACTAccessRequirement to a ManagedACTAccessRequirement.\n\nOnly ACT member can perform this action.\n",
        "operationId": "convertAccessRequirement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRequirementConversionRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequirement"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Convert an ACTAccessRequirement to a ManagedACTAccessRequirement.",
        "tags": [
          "Access Requirement Services"
        ]
      }
    },
    "/activity": {
      "post": {
        "description": "Create a new provenenance Activity. If the passed Activity\nobject contains a Used array,\nyou must set the concreteType field of each Used subclass.\n\nAccess Control: READ access is granted to those users who can see a single Entity\nthat was generated by this Activity.\n",
        "operationId": "createActivity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create a new Activity",
        "tags": [
          "Activity Services"
        ]
      }
    },
    "/activity/{id}": {
      "parameters": [
        {
          "description": "The id of an Activity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete an Activity. \n\nYou must be the creator of the Activity to delete it.\n",
        "operationId": "deleteActivity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "The resource was deleted."
          }
        },
        "summary": "Delete an Activity",
        "tags": [
          "Activity Services"
        ]
      },
      "get": {
        "description": "Get an existing Activity\n\nGranted to those users who can see a single Entity that was generated by this Activity.\n",
        "operationId": "getActivity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get an existing Activity.",
        "tags": [
          "Activity Services"
        ]
      },
      "put": {
        "description": "Update an Activity \n\nYou must be the creator of the Activity to modify it.\n",
        "operationId": "updateActivity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update an Activity.",
        "tags": [
          "Activity Services"
        ]
      }
    },
    "/activity/{id}/generated": {
      "parameters": [
        {
          "description": "The id of an Activity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the Entities that were generatedBy an Activity. Returns a PaginatedResults of\nReference objects.\n\nThis service will return References to all generatedBy Entities,\nregardless of whether you have access to resolve them into full\nEntity objects.\n",
        "operationId": "getEntitiesGeneratedBy",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit of query",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset of query",
            "schema": {
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfReference"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the Entities that were generatedBy an Activity.",
        "tags": [
          "Activity Services"
        ]
      }
    },
    "/asynchronous/job": {
      "post": {
        "description": "This method is used to launch new jobs. The type of job that will be launched\nis determined by the passed\n\nAsynchronousJobBody.\n\nThe following are the currently supported job types:\n\n* UploadToTableRequest\n* DownloadFromTableRequest\n\nNote: Each job types has different access requirements.\n",
        "operationId": "launchNewJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AsynchronousRequestBody"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsynchronousJobStatus"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Launch new Asynchronous jobs.",
        "tags": [
          "Asynchronous Job Services"
        ]
      }
    },
    "/asynchronous/job/{jobId}": {
      "parameters": [
        {
          "description": "The ID of a Asynchronous Job.",
          "in": "path",
          "name": "jobId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Once a job is launched its progress can be monitored by getting its\nstatus with this method.\n",
        "operationId": "getJobStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsynchronousJobStatus"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get Asynchronous Job.",
        "tags": [
          "Asynchronous Job Services"
        ]
      }
    },
    "/asynchronous/job/{jobId}/cancel": {
      "parameters": [
        {
          "description": "The ID of a Asynchronous Job.",
          "in": "path",
          "name": "jobId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Once a job is launched it can be cancelled if the job is set up to\nbe cancelable.\n",
        "operationId": "stopJob",
        "responses": {
          "204": {
            "description": "The resource has been deleted."
          }
        },
        "summary": "Stop a Asynchronous Job.",
        "tags": [
          "Asynchronous Job Services"
        ]
      }
    },
    "/challenge": {
      "post": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Create a Challenge object, associated with a Project.",
        "description": "Create a Challenge object, associated with a Project.  A participant Team must\nbe specified.  To create a Challenge one must have CREATE permission on the\nassociated Project.\n",
        "operationId": "createChallenge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the Challenges for which the given participant is registered.",
        "description": "List the Challenges for which the given participant is registered.\nTo be in the returned list the caller must have READ permission on the\nproject associated with the Challenge.\n",
        "operationId": "listChallengesForParticipant",
        "parameters": [
          {
            "name": "participantId",
            "in": "query",
            "description": "Synapse user id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengePagedResults"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Retrieve a Challenge given its ID.",
        "description": "Retrieve a Challenge given its ID.  To retrieve a\nChallenge one must have READ permission on the associated Project.\n",
        "operationId": "getChallenge",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Update a Challenge.",
        "description": "Update a Challenge.  The caller must have UPDATE permission on the\nproject associated with the Challenge.  It is not permitted to\nchange the project associated with a Challenge.\n",
        "operationId": "updateChallenge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Delete a Challenge.",
        "description": "Delete a Challenge.  The caller must have DELETE permission on the\nproject associated with the Challenge.\n",
        "operationId": "deleteChallenge",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          }
        }
      }
    },
    "/challenge/{challengeId}/challengeTeam": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the Teams registered for a Challenge.",
        "description": "List the Teams registered for a Challenge.  You must have READ permission\nin the associated Project to make this request.\n",
        "operationId": "listChallengeTeams",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeTeamPagedResults"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Register a Team with a Challenge.",
        "description": "Register a Team with a Challenge. You must be a member of the Challenge's\nparticipant Team (i.e. you must be already registered for the Challenge)\nand be an administrator on the Team being registered.\n",
        "operationId": "createChallengeTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeTeam"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeTeam"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}/challengeTeam/{challengeTeamId}": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "challengeTeamId",
          "in": "path",
          "required": true,
          "description": "The ID of the challenge team.",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Update a Challenge Team.",
        "description": "Update a Challenge Team. You must be a member of the Challenge's\nparticipant Team (i.e. you must be already registered for the Challenge)\nand be an administrator on the associated Team.\n",
        "operationId": "updateChallengeTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeTeam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeTeam"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}/participant": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the participants registered for a Challenge.",
        "description": "List the participants registered for a Challenge.\nThe caller must have READ permission on the\nproject associated with the Challenge.",
        "operationId": "listParticipantsInChallenge",
        "parameters": [
          {
            "name": "affiliated",
            "in": "query",
            "description": "If affiliated=true, return just participants affiliated with some\nregistered Team.  If false, return those not affiliated with any registered Team.\nIf omitted return all participants.\n",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedIds"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}/registratableTeam": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the Teams that caller can register for the Challenge.",
        "description": "List the Teams that caller can register for the Challenge, i.e. Teams on which\nthe caller is an administrator and which are not already registered.\nThe caller must have READ permission on the\nproject associated with the Challenge to make this request.\n",
        "operationId": "listRegistratableTeams",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedIds"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}/submissionTeams": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the Teams under which the given submitter may submit to the Challenge.",
        "description": "List the Teams under which the given submitter may submit to the Challenge, i.e. the Teams on which\nthe user is a member and which are registered for the Challenge.\n",
        "operationId": "listSubmissionTeams",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedIds"
                }
              }
            }
          }
        }
      }
    },
    "/challengeTeam/{challengeTeamId}": {
      "parameters": [
        {
          "name": "challengeTeamId",
          "in": "path",
          "required": true,
          "description": "The ID of the challenge team.",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "De-register a Team from a Challenge.",
        "description": "De-register a Team from a Challenge. You must be a member of the Challenge's\nparticipant Team (i.e. you must be already registered for the Challenge)\nand be an administrator on the Team being de-registered.\n",
        "operationId": "deleteChallengeTeam",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          }
        }
      }
    },
    "/doi": {
      "get": {
        "description": "Retrieves the DOI for the object and its associated DOI metadata.\nNote: this call calls an external API, which may impact performance\nTo just retrieve the DOI association, see: <a href=\"${GET.doi.association}\">GET /doi/association</a>\n",
        "operationId": "getDoiV2",
        "parameters": [
          {
            "description": "The ID of the object to retrieve",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of the object",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectType"
            }
          },
          {
            "description": "The version number of the object",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Doi"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves the DOI for the object and its associated DOI metadata.",
        "tags": [
          "Doi Services"
        ]
      }
    },
    "/doi/association": {
      "get": {
        "description": "Retrieves the DOI for the object.\nNote: this call only retrieves the DOI association, if it exists. To retrieve\nthe metadata for the object,\nsee <a href=\"${GET.doi}\">GET /doi</a>'\n",
        "operationId": "getDoiAssociation",
        "parameters": [
          {
            "description": "The ID of the object to retrieve",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of the object",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectType"
            }
          },
          {
            "description": "The version number of the object",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoiAssociation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves the DOI for the object.",
        "tags": [
          "Doi Services"
        ]
      }
    },
    "/doi/async/start": {
      "post": {
        "description": "Asynchronously creates or updates a DOI in Synapse, with input metadata.\nRetrieve the results with\n<a href=\"${GET.doi.async.get.asyncToken}\">GET /doi/async/get/{asyncToken}</a>.\nThis call may fail if the external\nDataCite API is down. If the failure is recoverable, it will retry automatically.'\n",
        "operationId": "startCreateOrUpdateDoi",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoiRequest"
              }
            }
          },
          "description": "A request containing a DOI and its metadata to associate with a Synapse\nobject\n",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncJobId"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Asynchronously creates or updates a DOI in Synapse, with input metadata.",
        "tags": [
          "Doi Services"
        ]
      }
    },
    "/doi/async/get/{asyncToken}": {
      "get": {
        "description": "Get the results of a call to POST /doi/async/start\n",
        "operationId": "getCreateOrUpdateDoiResults",
        "parameters": [
          {
            "description": "The async job token from the create/update call",
            "in": "path",
            "name": "asyncToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoiResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the results of a call to POST /doi/async/start",
        "tags": [
          "Doi Services"
        ]
      }
    },
    "/doi/locate": {
      "get": {
        "description": "Retrieves the Synapse web portal URL to the object entered.\nNote: This call does not check to see if the object exists in Synapse.\n",
        "operationId": "locate",
        "parameters": [
          {
            "description": "The ID of the object to retrieve",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to return the URL or redirect to the URL",
            "in": "query",
            "name": "redirect",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "The type of the object",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectType"
            }
          },
          {
            "description": "The version number of the object",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves the Synapse web portal URL to the object entered.",
        "tags": [
          "Doi Services"
        ]
      }
    },
    "/entity": {
      "post": {
        "description": "Create a new Entity. This method is used to create Projects, Folders,\nFileEntities and Records (coming soon). The passed request body should\ncontain the following fields:\n\n<ul>\n\n<li>name - Give your new entity a Name. <b>Note:</b> A name must be unique\nwithin the given parent, similar to a file in a folder.</li>\n\n<li>parentId - The ID of the parent Entity, such as a Folder or Project. This\nfield should be excluded when creating a Project.</li>\n\n<li>concreteType - Indicates the type of Entity to create. The value should\nbe one of the following: org.sagebionetworks.repo.model.Project,\norg.sagebionetworks.repo.model.Folder, or\norg.sagebionetworks.repo.model.FileEntity</li>\n\n</ul>\n\n<p>\n\nNote: To create an Entity the caller must be granted the\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.CREATE</a>\non the parent Entity. Any authenticated caller can\ncreate a new Project (with parentId=null).\n\n</p>\n\n<p>\n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum number of children for a single parent entity</td>\n\n<td>10 K</td>\n\n</tr>\n\n</table>\n\n</p>\n",
        "operationId": "createEntity",
        "parameters": [
          {
            "description": "To track the Provenance of an Entity create, include the\nID of the <a href=\"${org.sagebionetworks.repo.model.provenance.Activity}\">Activity</a>\nthat was created to track the change. For\nmore information see: <a href=\"${POST.activity}\">POST /activity</a>.\nYou must be the creator of the <a href=\"${org.sagebionetworks.repo.model.provenance.Activity}\">Activity</a> used here.'\n",
            "in": "query",
            "name": "generatedBy",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Entity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entity"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create a new Entity.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Moves an entity in the trash can, if the skipTrashCan is set to true\nwill flag the entity for purge and it will be deleted as soon as possible.\n\n<p>\n\nNote: To delete an Entity the caller must be granted the\n\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.DELETE</a> on the Entity.\n\n</p>\n",
        "operationId": "deleteEntity",
        "parameters": [
          {
            "description": "If true the entity will be flag for priority purge and\ndeleted as soon as possible\n",
            "in": "query",
            "name": "skipTrashCan",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "The resource has been deleted"
          }
        },
        "summary": "Deletes an Entity",
        "tags": [
          "Entity Services"
        ]
      },
      "get": {
        "description": "Get an Entity using its ID.\n\n<p>\nNote: To get an Entity the caller must be granted the\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\" >ACCESS_TYPE.READ</a>\non the Entity.\n\n</p>\n",
        "operationId": "getEntity",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entity"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get an Entity",
        "tags": [
          "Entity Services"
        ]
      },
      "put": {
        "description": "Update an entity.\n\n<p>\n\nIf the Entity is a FileEntity and the dataFileHandleId fields is set to a new\nvalue, then a new version will automatically be created for this update if the\nMD5 of the new file handle does not match the MD5 of the existing file handle\nor if the file handles do not have an MD5 set. You can also force the creation of a\nnew version using the newVersion parameter\n\n(see below).\n\n</p>\n\n<p>\n\nSynapse employs an Optimistic Concurrency Control (OCC) scheme to handle\nconcurrent updates. Each time an Entity is updated a new etag will be issued\nto the Entity. When an update is request, Synapse will compare the etag of\nthe passed Entity with the current etag of the Entity. If the etags do not\nmatch, then the update will be rejected with a PRECONDITION_FAILED (412)\nresponse. When this occurs the caller should get the latest copy of the\nEntity (see: <a href=\"${GET.entity.id}\">GET /entity/{id}</a>) and re-apply\nany changes to the object, then re-attempt the Entity update. This ensure the\ncaller has any changes applied by other users before applying their own\nchanges.\n\n</p>\n\n<p>\n\nNote: To update an Entity the caller must be granted the\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.UPDATE</a> on the Entity.\n\n</p>\n\n<p>\n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum number of children for a single parent entity</td>\n\n<td>10 K</td>\n\n</tr>\n\n</table>\n\n</p>\n",
        "operationId": "updateEntity",
        "parameters": [
          {
            "description": "To track the Provenance of an Entity update, include the\nID of the <a href=\"${org.sagebionetworks.repo.model.provenance.Activity}\">Activity</a> that was created to track the change. For\nmore information see: <a href=\"${POST.activity}\">POST /activity</a>.\nYou must be the creator of the\n<a href=\"${org.sagebionetworks.repo.model.provenance.Activity}\">Activity</a> used here.'\n",
            "in": "query",
            "name": "generatedBy",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "To force the creation of a new version for a\n<a href=\"${org.sagebionetworks.repo.model.VersionableEntity}\">versionable</a>\nentity such as a <a href= \"${org.sagebionetworks.repo.model.FileEntity}\">FileEntity</a>,\ninclude this optional parameter with a value set to true (i.e. newVersion=true).\nThis parameter is ignored for entities of type\n\n<a href=\"${org.sagebionetworks.repo.model.table.Table}\">Table</a>\n(See <a href=\"${POST.entity.id.table.snapshot}\">POST /entity/{id}/table/snapshot</a>\ninstead)\n",
            "in": "query",
            "name": "newVersion",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Entity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entity"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update an entity.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/access": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Determine if the caller have a given permission on a given Entity.\n\n<p>\n\nA User's permission on an Entity is a calculation based several factors\nincluding the permission granted by the Entity's ACL and the User's group\nmembership. There might also be extra requirement for an Entity, such as\nspecial terms-of-use or special restrictions for sensitive data. This means a\nclient cannot accurately calculate a User's permission on an Entity simply by\ninspecting the Entity's ACL. Instead, all clients should use this method to\nget the calculated permission a User has on an Entity.\n</p>\n",
        "operationId": "hasAccess",
        "parameters": [
          {
            "description": "The permission to check. Must be from: \n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE</a>'\n",
            "in": "query",
            "name": "accessType",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResult"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Determine if the caller have a given permission on a given Entity.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/accessRequirement": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve paginated list of ALL Access Requirements associated with\nan entity.\n",
        "operationId": "getEntityAccessRequirements",
        "parameters": [
          {
            "description": "Limits the size of the page returned. For example, a page size\nof 10 require limit = 10. The maximum limit for this call is 50.\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 10,
              "maximum": 50
            }
          },
          {
            "description": "The index of the pagination offset. For a page size of 10, the\nfirst page would be at offset = 0, and the second page would be at offset =\n10.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfAccessRequirement"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve paginated list of ALL Access Requirements associated with an entity.",
        "tags": [
          "Access Requirement Services"
        ]
      }
    },
    "/entity/{id}/acl": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete the Access Control List (ACL) for a given Entity.\n\n<p>\n\nBy default, Entities such as FileEntity and Folder inherit their permission\nfrom their containing Project. For such Entities the Project is the Entity's\n'benefactor'. This permission inheritance can be overridden by creating an\nACL for the Entity. When this occurs the Entity becomes its own benefactor\nand all permission are determined by its own ACL.\n\n</p>\n\n<p>\n\nIf the ACL of an Entity is deleted, then its benefactor will automatically be\nset to its parent''s benefactor. The ACL for a Project cannot be deleted.\n\n</p>\n\n<p>\n\nNote: The caller must be granted\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.CHANGE_PERMISSIONS</a>\non the Entity to call this method.\n\n</p>\n",
        "operationId": "deleteEntityAcl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "This resource has been deleted."
          }
        },
        "summary": "Delete the Access Control List (ACL) for a given Entity.",
        "tags": [
          "Entity Services"
        ]
      },
      "get": {
        "description": "Get the Access Control List (ACL) for a given entity.\n\n<p>\nNote: If this method is called on an Entity that is inheriting its permission\nfrom another Entity a NOT_FOUND (404) response will be generated. The error\nresponse message will include the Entity''s benefactor ID.\n</p>\n",
        "operationId": "getEntityAcl",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the Access Control List (ACL) for a given entity.",
        "tags": [
          "Entity Services"
        ]
      },
      "post": {
        "description": "Create a new Access Control List (ACL), overriding inheritance.\n\n<p>\nBy default, Entities such as FileEntity and Folder inherit their permission\nfrom their containing Project. For such Entities the Project is the Entity's\n'benefactor'. This permission inheritance can be overridden by creating an\nACL for the Entity. When this occurs the Entity becomes its own benefactor\nand all permission are determined by its own ACL.\n\n</p>\n\n<p>\n\nIf the ACL of an Entity is deleted, then its benefactor will automatically be\nset to its parent's benefactor.\n\n</p>\n\n<p>\n\nNote: The caller must be granted\n\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.CHANGE_PERMISSIONS</a>\non the Entity to call this method.\n\n</p>\n",
        "operationId": "createEntityAcl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlList"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create a new Access Control List (ACL), overriding inheritance.",
        "tags": [
          "Entity Services"
        ]
      },
      "put": {
        "description": "Update an Entity's ACL.\n\n<p>\n\nNote: The caller must be granted\n\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.CHANGE_PERMISSIONS</a>\non the Entity to call this method.\n\n</p>\n",
        "operationId": "updateEntityAcl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlList"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update an Entity's ACL.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/annotations2": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the annotations for an entity.\n\n<p>\n\nNote: The caller must be granted the\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\" >ACCESS_TYPE.READ</a>\non the Entity, to get its annotations.\n\n</p>\n",
        "operationId": "getEntityAnnotations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotations_v2"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the annotations for an entity.",
        "tags": [
          "Entity Services"
        ]
      },
      "put": {
        "description": "Update an Entity's annotations.\n\n<p>\n\nNote: The caller must be granted the\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.UPDATE</a>\non the Entity, to update its annotations.\n</p>\n",
        "operationId": "updateEntityAnnotations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Annotations_v2"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotations_v2"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update an Entity's annotations.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/benefactor": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get an Entity's benefactor.\n\n<p>\n\nThe term 'benefactor' is used indicate which Entity an Entity inherits is ACL\nfrom. For example, a newly created Project will have its own ACL and\ntherefore, it will be its own benefactor. A Folder will inherit its ACL (by\ndefault) from its containing Project so the Project will be the Folder's\nbenefactor. This method will return the EntityHeader of an Entity's\nbenefactor.\n</p>\n",
        "operationId": "getEntityBenefactor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityHeader"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get an Entity's benefactor.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/bundle2": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Get an entity and related data with a single POST.",
        "operationId": "getEntityBundle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityBundleRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBundle_v2"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get an entity and related data with a single POST.",
        "tags": [
          "Entity Bundle V2 Services"
        ]
      },
      "put": {
        "description": "Update an entity and associated components with a single PUT.\nSpecifically, this operation supports update of an Entity, its\nAnnotations, and its ACL.\nUpon successful creation, an EntityBundle is returned containing the\nrequested components, as defined by the partsMask in the request object.\n",
        "operationId": "updateEntityBundle",
        "parameters": [
          {
            "in": "query",
            "name": "generatedBy",
            "description": "Generated by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityBundleCreate_v2"
              }
            }
          },
          "description": "The EntityBundleCreate object containing the Entity and Annotations\nto update.\n",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBundle_v2"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update an entity and associated components with a single PUT.",
        "tags": [
          "Entity Bundle V2 Services"
        ]
      }
    },
    "/entity/{id}/challenge": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Synapse Project id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Retrieve a Challenge given the ID of its associated Project.",
        "description": "Retrieve a Challenge given the ID of its associated Project.  To retrieve a\nChallenge one must have READ permission on the Project.\n",
        "operationId": "getChallengeByProjectId",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        }
      }
    },
    "/entity/{id}/column": {
      "parameters": [
        {
          "description": "The ID of a Table.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Given the ID of a <a href=\"${org.sagebionetworks.repo.model.table.TableEntity}\">TableEntity</a>,\nget its list of <ahref=\"${org.sagebionetworks.repo.model.table.ColumnModel}\">ColumnModels</a>\nthat are currently assigned to the table.\n\n<p>\n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum frequency this method can be called</td>\n\n<td>6 calls per minute</td>\n\n</tr>\n\n</table>\n\n</p>\n",
        "operationId": "getColumnForTable",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedColumnModels"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Given the ID of a.",
        "tags": [
          "Table Services"
        ]
      }
    },
    "/entity/{id}/datatype": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Change the <a href=\"${org.sagebionetworks.repo.model.DataType}\" >DataType</a>\nof the given entity. The entity's DataType controls how the entity can be\naccessed. For example, an entity's DataType must be set to 'open_data' in\norder for anonymous to be allowed to access its contents.\n\n<p>\n\nNote: The caller must be a member of the 'Synapse Access and Compliance Team'\n(id=464532) in order to change an Entity's type to 'OPEN_DATA'. The caller\nmust be granted UPDATED on the Entity to change the its type to any other\nvalue.\n\n</p>'\n",
        "operationId": "changeEntityDataType",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "required": true,
            "description": "Type of data",
            "schema": {
              "enum": [
                "OPEN_DATA",
                "SENSITIVE_DATA"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataTypeResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Change the.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/dockerCommit": {
      "parameters": [
        {
          "description": "the ID of the Docker repository entity",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Add a commit (tag and digest) for an external/unmanaged Docker repository.\n(Commits for managed repositories are added via direct integration with the\nSynapse Docker registry.)\n",
        "operationId": "addDockerCommit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DockerCommit"
              }
            }
          },
          "description": "the new tag/digest pair for the repository",
          "required": false
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Add a commit (tag and digest) for an external/unmanaged Docker repository.",
        "tags": [
          "Docker Commit Services"
        ]
      }
    },
    "/entity/{id}/dockerTag": {
      "parameters": [
        {
          "description": "the ID of the Docker repository entity",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "List the tagged commits (tag/digest pairs) for the given Docker repository.  Only\nthe most recent digest for each tag is returned since,\nfollowing Docker's convention, a tag may be reassigned\nto a newer commit. The list may be sorted by date or tag.  The default is to sort\nby date, descending (newest first).'\n",
        "operationId": "listDockerTags",
        "parameters": [
          {
            "in": "query",
            "name": "ascending",
            "description": "Ascending",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "pagination parameter, optional (default is 20)",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 20,
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "pagination parameter, optional (default is 0)",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort results",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfDockerCommit"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "List the tagged commits (tag/digest pairs) for the given Docker repository.",
        "tags": [
          "Docker Commit Services"
        ]
      }
    },
    "/entity/{id}/evaluation": {
      "parameters": [
        {
          "description": "the ID of the project",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets Evaluations tied to a project.\n<b>Note:</b> The response will contain only those Evaluations on which the caller\nis granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a>\npermission, unless specified otherwise with the accessType parameter.\n",
        "operationId": "getEvaluationsByContentSourcePaginated",
        "parameters": [
          {
            "description": "The type of access for the user to filter for, optional and defaults\nto <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a>\n",
            "in": "query",
            "name": "accessType",
            "schema": {
              "$ref": "#/components/schemas/ACCESS_TYPE"
            }
          },
          {
            "description": "If 'true' then return only those evaluations with rounds defined\nand for which the current time is in one of the rounds.\n",
            "in": "query",
            "name": "activeOnly",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "an optional, comma-delimited list of evaluation IDs to which the\nresponse is limited\n",
            "in": "query",
            "name": "evaluationIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limits the number of entities that will be fetched for this\npage. When null it will default to 10.\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first entity. When null it will default\nto 0.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfEvaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets Evaluations tied to a project.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/entity/{id}/filehandles": {
      "parameters": [
        {
          "description": "The ID of a File Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the FileHandles of the file currently associated with the current\nversion of the Entity.\n\n<p>\nIf a preview exists for the file then the handle of the preview and the file\nwill be returned with this call.\n</p>\n",
        "operationId": "getEntityFileHandles",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileHandleResults"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the FileHandles of the file currently associated with the current\nversion of the Entity.\n",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/filepreview": {
      "parameters": [
        {
          "description": "The ID of a File Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the URL of the preview file associated with the current version\nof a FileEntity.\n\n<p>\nNote: This call will result in a HTTP temporary redirect (307), to the actual\nfile URL if the caller meets all of the download requirements.\n</p>\n",
        "operationId": "getFilePreviewUrl",
        "parameters": [
          {
            "description": "When set to false, the URL will be returned as text/plain\ninstead of redirecting.\n",
            "in": "query",
            "name": "redirect",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "description": "Status",
            "name": "status",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the URL of the preview file associated with the current version of\na FileEntity.\n",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/generatedBy": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Deletes the activity relationship for the current version of an\nEntity.\n",
        "operationId": "deleteActivityForEntity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "This resource has been deleted"
          }
        },
        "summary": "Deletes the activity relationship for the current version of an Entity.",
        "tags": [
          "Entity Services"
        ]
      },
      "get": {
        "description": "Get an existing activity for the current version of an Entity.",
        "operationId": "getActivityForEntity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "description": "Get an existing activity for the current version of an Entity.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get an existing activity for the current version of an Entity.",
        "tags": [
          "Entity Services"
        ]
      },
      "put": {
        "description": "Sets the generatedBy relationship for the current version of an Entity.",
        "operationId": "updateActivityForEntity",
        "parameters": [
          {
            "description": "The id of the activity to connect to the entity. You must\nbe the creator of the Activity used here.'\n",
            "in": "query",
            "name": "generatedBy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "description": "Sets the generatedBy relationship for the current version of an Entity.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Sets the generatedBy relationship for the current version of an Entity.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/json": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the raw JSON for the given entity. The resulting JSON can be used\nfor the validation of a entity against a\n<a href=\"${org.sagebionetworks.repo.model.schema.JsonSchema}\">JsonSchema</a>.\n\n<p>\n\nNote: The caller must be granted the\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\" >ACCESS_TYPE.READ</a>\npermission on the Entity.\n\n</p>\n",
        "operationId": "getEntityJson",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JSONObject"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the raw JSON for the given entity.",
        "tags": [
          "Entity Services"
        ]
      },
      "put": {
        "description": "Update the annotations of an entity using the raw JSON of the entity.\n\n<p>\n\nSee: <a href=\"${GET.entity.id.json}\">GET entity/{id}/json</a> to get the JSON\nof an entity.\n\n</p>\n\n<p>\nNote: The caller must be granted the\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\" >ACCESS_TYPE.UPDATE and ACCESS_TYPE.READ</a>\npermission on the Entity.\n</p>'\n",
        "operationId": "updateEntityWithJson",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JSONObject"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JSONObject"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update the annotations of an entity using the raw JSON of the entity.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/lockAccessRequirement": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Add a temporary access restriction that prevents access pending review\nby the Synapse Access and Compliance Team.\nThis service may be used only by an administrator of the specified entity.\n",
        "operationId": "createLockAccessRequirement",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequirement"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Add a temporary access restriction that prevents access pending review\nby the Synapse ACT.\n",
        "tags": [
          "Access Requirement Services"
        ]
      }
    },
    "/entity/{id}/message": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Adds the owner of the given entity as an additional recipient of the\nmessage.\n",
        "operationId": "sendMessageToEntityOwner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageToUser"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageToUser"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Adds the owner of the given entity as an additional recipient of the message.",
        "tags": [
          "Message Services"
        ]
      }
    },
    "/entity/{id}/path": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the full path of an Entity as a List of EntityHeaders. The first\nEntityHeader will be the Root Entity, and the last EntityHeader will be the\nrequested Entity.\n",
        "operationId": "getEntityPath",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPath"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the full path of an Entity as a List of EntityHeaders.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/permissions": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the list of permission that the caller has on a given Entity.\n\nA User's permission on an Entity is a calculation based several factors\nincluding the permission granted by the Entity's ACL and the User's group\nmembership. There might also be extra requirement for an Entity, such as\nspecial terms-of-use or special restrictions for sensitive data. This means a\nclient cannot accurately calculate a User's permission on an Entity simply by\ninspecting the Entity''s ACL. Instead, all clients should use this method to\nget the calculated permission a User has on an Entity.\n",
        "operationId": "getUserEntityPermissions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntityPermissions"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the list of permission that the caller has on a given Entity.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/schema/binding": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "description": "The ID of an Entity.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Clear the bound JSON schema from this Entity. The schema will no longer\nbe used to validate this Entity or its children.\n\nNote: The caller must be granted the DELETE permission on the Entity.\n",
        "operationId": "clearBoundSchema",
        "responses": {
          "204": {
            "description": "The resource has been deleted"
          }
        },
        "summary": "Clear the bound JSON schema from this Entity.",
        "tags": [
          "Entity Services"
        ]
      },
      "get": {
        "description": "Get information about a JSON schema bound to an Entity. Note: Any\nchild Entity that does not have a bound schema will inherit the first bound schema\nfound in its hierarchy.\n\nNote: The caller must be granted the READ permission on the Entity.\n",
        "operationId": "getBoundJsonSchema",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonSchemaObjectBinding"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get information about a JSON schema bound to an Entity.",
        "tags": [
          "Entity Services"
        ]
      },
      "put": {
        "description": "Bind a JSON schema to an Entity. The bound schema will be used to validate\nthe Entity''s metadata (annotations). Any child Entity that does not have a\nbound schema will inherit the first bound schema found in its hierarchy.\n\nOnly a single schema can be bound to an Entity at a time. If you have more\nthan one schema to bind to an Entity you will need to create and bind a\nsingle composition schema using keywords such as 'anyOf', 'allOf' or 'oneOf'\nthat defines how the schemas should be used for validation.\n\nNote: The caller must be granted the UPDATE ermission on the Entity to bind.\n",
        "operationId": "bindJsonSchemaToEntity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BindSchemaToEntityRequest"
              }
            }
          },
          "description": "The request identifies the JSON schema to bind.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonSchemaObjectBinding"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Bind a JSON schema to an Entity.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/schema/validation": {
      "parameters": [
        {
          "description": "The ID of the Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the validation results of an Entity against its bound JSON schema.\nThe validation of an Entity against its bound schema is automatic and eventually\nconsistent. The validation results include the etag of the Entity at the time\nof the last validation. If the returned etag does not match the current etag\nof the Entity then the results should be considered out-of-date. If an Entity\nhas not been validated for the first time, or if the Entity does not have a\nbound schema, this method will return a 404 (not-found). Keep checking for\nthe latest validation results.\n\nNote: The caller must be granted the READ permission on the Entity.\n",
        "operationId": "getEntitySchemaValidationResults",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationResults"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the validation results of an Entity against its bound JSON schema.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/schema/validation/invalid": {
      "parameters": [
        {
          "description": "The ID of the container Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Get a single page of invalid JSON schema validation results for a\ncontainer Entity (Project or Folder). The validation of an Entity against its bound\nschema is automatic and eventually consistent. The validation results include\nthe etag of the Entity at the time of the last validation. If the returned\netag does not match the current etag of the Entity then the results should be\nconsidered out-of-date.\n\nNote: The caller must be granted the READ permission on the container Entity.\nThe results will only include children that the caller has the READ permission on.\n",
        "operationId": "getInvalidValidationResults",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListValidationResultsRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListValidationResultsResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get a single page of invalid JSON schema validation results for a container\nEntity (Project or Folder).\n",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/schema/validation/statistics": {
      "parameters": [
        {
          "description": "The ID of the container Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the The summary statistics of the JSON schema validation results\nfor a single container Entity such as a Project or Folder. Only direct children of\nthe container are included in the results. The statistics include the total\nnumber of children in the container, and the counts for both the invalid and\nvalid children. If an Entity has not been validated for the first time, or it\ndoes not have bound schema it will be counted as 'unknown'.\n\nThe validation of an Entity against its bound schema is automatic and\neventually consistent. Keep checking this method to get the latest validation\nstatistics for the given container.\n\nNote: The caller must be granted the READ permission on the container Entity.\nThe resulting statistics will only include children that the caller has the READ permission on.\n",
        "operationId": "getEntitySchemaValidationStatistics",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationSummaryStatistics"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the summary statistics of the JSON schema validation results for\na single container Entity such as a Project or Folder.\n",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/sts": {
      "parameters": [
        {
          "description": "The ID of the Folder with an STS-enabled storage location.\n",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets the temporary S3 credentials from STS for the given entity. These\ncredentials are only good for the bucket and base key specified by the\nreturned credentials and expire 12 hours after this API is called.\n\nThe specified entity must be a folder with an STS-enabled storage location.\nIf that storage location is external storage, you may request read-only or\nread-write permissions. If that storage location is Synapse storage, you must\nrequest read-only permissions.\n",
        "operationId": "getTemporaryCredentialsForEntity",
        "parameters": [
          {
            "description": "Read-only or read-write permissions.\n",
            "in": "query",
            "name": "permission",
            "required": true,
            "schema": {
              "enum": [
                "read_only",
                "read_write"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StsCredentials"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets the temporary S3 credentials from STS for the given entity.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/table/column/{columnId}/row/{rowId}/version/{versionNumber}/file": {
      "parameters": [
        {
          "in": "path",
          "name": "columnId",
          "description": "The ID of the Table column",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the FileEntity to get.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "rowId",
          "description": "The ID of the Table Row",
          "required": true,
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "versionNumber",
          "description": "The version of the Table Row",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ],
      "get": {
        "description": "Get the actual URL of the file associated with a specific version\nof a row and file handle column.\n\nNote: This call will result in a HTTP temporary redirect (307), to the\nactual file URL if the caller meets all of the download requirements.\n",
        "operationId": "fileRedirectUrlForRow",
        "parameters": [
          {
            "description": "When set to false, the URL will be returned as text/plain\ninstead of redirecting.\n",
            "in": "query",
            "name": "redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the actual URL of the file associated with a specific version of a\nrow and file handle column.\n",
        "tags": [
          "Table Services"
        ]
      }
    },
    "/entity/{id}/table/column/{columnId}/row/{rowId}/version/{versionNumber}/filepreview": {
      "parameters": [
        {
          "in": "path",
          "name": "columnId",
          "description": "The ID of the Table column",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the FileEntity to get.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "rowId",
          "description": "The ID of the Table Row",
          "required": true,
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "versionNumber",
          "description": "The version of the Table Row",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ],
      "get": {
        "description": "Get the preview URL of the file associated with a specific version\nof a row and file handle column.\n\nNote: This call will result in a HTTP temporary redirect (307), to the\nactual file URL if the caller meets all of the download requirements.\n",
        "operationId": "filePreviewRedirectUrlForRow",
        "parameters": [
          {
            "description": "When set to false, the URL will be returned as text/plain\ninstead of redirecting.\n",
            "in": "query",
            "name": "redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the preview URL of the file associated with a specific version of\na row and file handle column.\n",
        "tags": [
          "Table Services"
        ]
      }
    },
    "/entity/{id}/table/download/csv/async/get/{asyncToken}": {
      "parameters": [
        {
          "description": "The ID of a TableEntity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "description": "Async Token",
          "name": "asyncToken",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Asynchronously get the results of a csv download started with POST\n\nNote: When the result is not ready yet, this method will return a status\ncode of 202 (ACCEPTED) and the response body will be a AsynchronousJobStatus\n",
        "operationId": "csvDownloadAsyncGet",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadFromTableResult"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Asynchronously get the results of a csv download started with.",
        "tags": [
          "Table Services"
        ]
      }
    },
    "/entity/{id}/table/download/csv/async/start": {
      "parameters": [
        {
          "description": "The ID of a TableEntity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Asynchronously start a csv download. Use the returned job id and \n/entity/{id}/table/download/csv/async/get to get the results of the query\n",
        "operationId": "csvDownloadAsyncStart",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadFromTableRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncJobId"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Asynchronously start a csv download.",
        "tags": [
          "Table Services"
        ]
      }
    },
    "/entity/{id}/table/filehandles": {
      "parameters": [
        {
          "description": "The ID of a TableEntity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "This method is used to get file handle information for rows in a\nTableEntity. The columns in the passed in RowReferenceSet need to be\nFILEHANDLEID columns and the rows in the passed in RowReferenceSet need\nto exists (a 400 will be returned if a row ID is provided that does not\nactually exist). The order of the returned rows of file handles is the\nsame as the order of the rows requested, and the order of the file\nhandles in each row is the same as the order of the columns requested.\n\nNote: The caller must have the READ permission on the TableEntity to make this call.\n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum frequency this method can be called</td>\n\n<td>1 calls per second</td>\n\n</tr>\n\n</table>\n",
        "operationId": "getFileHandles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RowReferenceSet"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableFileHandleResults"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": ".",
        "tags": [
          "Table Services"
        ]
      }
    },
    "/entity/{id}/table/query/async/get/{asyncToken}": {
      "parameters": [
        {
          "in": "path",
          "name": "asyncToken",
          "description": "Async Token",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the TableEntity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Asynchronously get the results of a query started with POST\n/entity/{id}/table/query/async/start\n\nNote: When the result is not ready yet, this method will return a status\ncode of 202 (ACCEPTED) and the response body will be a AsynchronousJobStatus object.\n",
        "operationId": "queryAsyncGet",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResultBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Asynchronously get the results of a query started with.",
        "tags": [
          "Table Services"
        ]
      }
    },
    "/entity/{id}/table/query/async/start": {
      "parameters": [
        {
          "description": "The ID of a TableEntity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Asynchronously start a query. Use the returned job id and GET\n/entity/{id}/table/query/async/get</a> to get the results of the query\n\nUsing a 'SQL like' syntax, query the current version of the rows in a\nsingle table. The following pseudo-syntax is the basic supported format:\n\n\nSELECT <br>\n\n[ALL | DISTINCT] select_expr [, select_expr ...] <br>\n\nFROM synapse_table_id <br>\n\n[WHERE where_condition] <br>\n\n[GROUP BY {col_name [, [col_name * ...] } <br>\n\n[ORDER BY {col_name [ [ASC | DESC] [, col_name [ [ASC | DESC]]}<br>\n\n[LIMIT row_count [ OFFSET offset ]]<br>\n\n\n<p>\n\nNote: Sub-queries and joining tables is not supported.\n\n</p>\n\n<p>\n\nThis services depends on an index that is created/update asynchronously\nfrom table creation and update events. This means there could be short\nwindow of time when the index is inconsistent with the true state of the\ntable. When the index is out-of-synch, then a status code of 202\n(ACCEPTED) will be returned and the response body will be a TableStatus\nobject. The TableStatus will indicates the current\nstatus of the index including how much work is remaining until the index\nis consistent with the truth of the table.\n\nThe 'partsMask' is an integer \"mask\" that can be combined into to request\nany desired part. As of this writing, the mask is defined as follows QueryBundleRequest\n\n<ul>\n\n<li>Query Results <i>(queryResults)</i> = 0x1</li>\n\n<li>Query Count <i>(queryCount)</i> = 0x2</li>\n\n<li>Select Columns <i>(selectColumns)</i> = 0x4</li>\n\n<li>Max Rows Per Page <i>(maxRowsPerPage)</i> = 0x8</li>\n\n<li>The Table Columns <i>(columnModels)</i> = 0x10</li>\n\n<li>Facet statistics for each faceted column <i>(facetStatistics)</i> = 0x20</li>\n\n<li>The sum of the file sizes <i>(sumFileSizesBytes)</i> = 0x40</li>\n\n</ul>\n\n</p>\n\n<p>\n\nFor example, to request all parts, the request mask value should be: <br>\n0x1 OR 0x2 OR 0x4 OR 0x8 OR 0x10 OR 0x20 OR 0x40 = 0x7F.\n\n</p>\n\n<p>\n\nNote: The caller must have the READ permission on the TableEntity to make this call.\n\n</p>\n",
        "operationId": "queryAsyncStart",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryBundleRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncJobId"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Asynchronously start a query.",
        "tags": [
          "Table Services"
        ]
      }
    },
    "/entity/{id}/table/snapshot": {
      "parameters": [
        {
          "in": "path",
          "description": "The ID of a Table Entity.",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Request to create a new snapshot of a table. The provided comment,\nlabel, and activity ID will be applied to the current version thereby creating a\nsnapshot and locking the current version. After the snapshot is created a new\nversion will be started with an 'in-progress' label.\n\nNOTE: This service is for TableEntity only. Snapshots of EntityView\nrequire asynchronous processing and can be created via:\nPOST /entity/{id}/table/transaction/async/start\n",
        "operationId": "createSnapshot",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Request to create a new snapshot of a table.",
        "tags": [
          "Table Services"
        ]
      }
    },
    "/entity/{id}/table/transaction/async/get/{asyncToken}": {
      "parameters": [
        {
          "description": "The token returned when the job was started.",
          "in": "path",
          "name": "asyncToken",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of a Table entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Asynchronously get the results of a table update transaction started\nwith POST /entity/{id}/table/transaction/async/start</a>\n\nNote: When the result is not ready yet, this method will return a status\ncode of 202 (ACCEPTED) and the response body will be a AsynchronousJobStatus object.\n",
        "operationId": "getTableTransactionResult",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableUpdateTransactionResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Asynchronously get the results of a table update transaction started with.",
        "tags": [
          "Table Services"
        ]
      }
    },
    "/entity/{id}/table/transaction/async/start": {
      "parameters": [
        {
          "description": "The ID of a Table Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Start a table update job that will attempt to make all of the requested\nchanges in a single transaction. All updates will either succeed or fail as a unit.  All\nupdate requests must be for the same table.\n\n<p>\n\nNote: The caller must have the UPDATE permission on the TableEntity to make this call.\n\n</p>\n\n<p>\n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum size of a PartialRow change </td>\n\n<td>2 MB</td>\n\n</tr>\n\n<tr>\n\n<td>The maximum size of a CSV that can be appended to a table</td>\n\n<td>1 GB</td>\n\n</tr>\n\n</table>\n\n</p>\n",
        "operationId": "startTableTransactionJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableUpdateTransactionRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncJobId"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Start a table update job that will attempt to make all of the requested\nchanges in a single transaction.\n",
        "tags": [
          "Table Services"
        ]
      }
    },
    "/entity/{id}/threads": {
      "parameters": [
        {
          "description": "The ID of an Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "This API is used to get N number of threads that belongs to projects\nuser can view and references the given entity.\n\nTarget users: anyone who has READ permission to the entity.\n",
        "operationId": "getThreadsForEntity",
        "parameters": [
          {
            "description": "The direction of sort: true for ascending, and false for descending",
            "in": "query",
            "name": "ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limits the size of the page returned. For example, a page size\nof 10 require limit = 10. The maximum Limit for this call is 20.'\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "default": 10,
              "minimum": 10,
              "maximum": 20
            }
          },
          {
            "description": "The index of the pagination offset. For a page size of 10, the\nfirst page would be at offset = 0, and the second page would be at offset =\n10.'\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "description": "The field to sort the resulting threads on. Available options DiscussionThreadOrder\n",
            "in": "query",
            "name": "sort",
            "schema": {
              "enum": [
                "NUMBER_OF_REPLIES",
                "NUMBER_OF_VIEWS",
                "PINNED_AND_LAST_ACTIVITY",
                "THREAD_TITLE"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfDiscussionThreadBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "This API is used to get N number of threads that belongs to projects user\ncan view and references the given entity.\n",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/entity/{id}/type": {
      "parameters": [
        {
          "description": "The ID of the Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the EntityHeader of an Entity given its ID. The EntityHeader is\na light weight object with basic information about an Entity includes its type.\n",
        "operationId": "getEntityType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityHeader"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the EntityHeader of an Entity given its ID.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/version": {
      "parameters": [
        {
          "description": "The ID of the Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get all versions of an Entity one page at a time.",
        "operationId": "getAllVersionsOfEntity",
        "parameters": [
          {
            "description": "Limits the number of entities that will be fetched for\nthis page. When null it will default to 10.\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10
            }
          },
          {
            "description": "The offset index determines where this page will start\nfrom. When null it will default to 0.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfVersionInfo"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get all versions of an Entity one page at a time.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/version/{versionNumber}": {
      "parameters": [
        {
          "description": "The ID of the Entity",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The version number of the Entity.",
          "in": "path",
          "name": "versionNumber",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "description": "Delete a specific version of a FileEntity.",
        "operationId": "deleteEntityVersion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "The resource has been deleted."
          }
        },
        "summary": "Delete a specific version of a FileEntity.",
        "tags": [
          "Entity Services"
        ]
      },
      "get": {
        "description": "Get a specific version of an Entity.\n\nNote: Only the current version of the Entity can be used for an Entity\nupdate. Therefore, only the current version of the Entity will be returned\nwith the actual etag. All older versions will be returned with an eTag\n'00000000-0000-0000-0000-000000000000'.\n",
        "operationId": "getEntityForVersion",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entity"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get a specific version of an Entity.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/version/{versionNumber}/annotations2": {
      "parameters": [
        {
          "description": "The ID of the Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The version number of the Entity.",
          "in": "path",
          "name": "versionNumber",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "description": "Get an Entity's annotations for a specific version of a FileEntity.",
        "operationId": "getEntityAnnotationsV2ForVersion",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotations_v2"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get an Entity's annotations for a specific version of a FileEntity.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/version/{versionNumber}/bundle2": {
      "parameters": [
        {
          "description": "The ID of the Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The version number of the Entity.",
          "in": "path",
          "name": "versionNumber",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "post": {
        "description": "Get an entity at a specific version and its related data with a single POST.",
        "operationId": "getEntityBundle2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityBundleRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBundle_v2"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get an entity at a specific version and its related data with a single\nPOST.\n",
        "tags": [
          "Entity Bundle V2 Services"
        ]
      }
    },
    "/entity/{id}/version/{versionNumber}/filehandle": {
      "parameters": [
        {
          "description": "The ID of the Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The version number of the Entity.",
          "in": "path",
          "name": "versionNumber",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "description": "Updates the FileHandle associated with the FileEntity\nwith the provided entity id and version.\n",
        "operationId": "updateEntityFileHandle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileHandleUpdateRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Updates the filehandle.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/version/{versionNumber}/filehandles": {
      "parameters": [
        {
          "description": "The ID of the Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The version number of the Entity.",
          "in": "path",
          "name": "versionNumber",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "description": "Get the FileHandles of the file associated with a specific version\nof a FileEntity.\n\nIf a preview exists for the file then the handle of the preview and the file\nwill be returned with this call.\n",
        "operationId": "getEntityFileHandlesForVersion",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileHandleResults"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the FileHandles of the file associated with a specific version of\na FileEntity.\n",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/version/{versionNumber}/filepreview": {
      "parameters": [
        {
          "description": "The ID of the Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The version number of the Entity.",
          "in": "path",
          "name": "versionNumber",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "description": "Get the URL of the preview file associated with a specific version\nof a FileEntity.\n\nNote: This call will result in a HTTP temporary redirect (307), to the actual\nfile URL if the caller meets all of the download requirements.\n",
        "operationId": "filePreviewRedirectUrlForVersion",
        "parameters": [
          {
            "description": "When set to false, the URL will be returned as\ntext/plain instead of redirecting.\n",
            "in": "query",
            "name": "redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the URL of the preview file associated with a specific version of\na FileEntity.\n",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/{id}/version/{versionNumber}/generatedBy": {
      "parameters": [
        {
          "description": "The ID of the Entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The version number of the Entity.",
          "in": "path",
          "name": "versionNumber",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "description": "Get an existing activity for a specific version of an Entity.",
        "operationId": "getActivityForEntityVersion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "description": "Get an existing activity for a specific version of an Entity.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get an existing activity for a specific version of an Entity.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/alias/{alias}": {
      "parameters": [
        {
          "in": "path",
          "name": "alias",
          "description": "Alias of an Entity",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Lookup an Entity ID using an alias.",
        "operationId": "getEntityIdByAlias",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityId"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Lookup an Entity ID using an alias.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/bundle2/create": {
      "post": {
        "description": "Create an entity and associated components with a single POST.\nSpecifically, this operation supports creation of an Entity, its\nAnnotations, and its ACL.\n\nUpon successful creation, an EntityBundle is returned containing the\nrequested components, as defined by the partsMask in the request object.'\n",
        "operationId": "createEntityBundle2",
        "parameters": [
          {
            "in": "query",
            "name": "generatedBy",
            "description": "Generated By",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityBundleCreate_v2"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBundle_v2"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create an entity and associated components with a single POST.",
        "tags": [
          "Entity Bundle V2 Services"
        ]
      }
    },
    "/entity/child": {
      "post": {
        "description": "Retrieve an entityId for a given parent ID and entity name. This service\ncan also be used to lookup projectId by setting the parentId to NULL in\nEntityLookupRequest.\n",
        "operationId": "lookupChild",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityLookupRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityId"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve an entityId for a given parent ID and entity name.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/children": {
      "post": {
        "description": "Get a page of children for a given parent ID. This service can also\nbe used to list projects by setting the parentId to NULL in EntityChildrenRequest.\n",
        "operationId": "getChildren",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityChildrenRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityChildrenResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get a page of children for a given parent ID.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/header": {
      "post": {
        "description": "Get the EntityHeader for a list of references with a POST. If any\nitem in the batch fails (e.g., with a 404) it will be EXCLUDED in the result set.\n",
        "operationId": "getEntityVersionedTypeBatch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceList"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfEntityHeader"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the EntityHeader for a list of references with a POST.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/md5/{md5}": {
      "parameters": [
        {
          "in": "path",
          "description": "File MD5",
          "name": "md5",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets at most 200 FileEntities matching the given MD5 string which\nthe user has read access to.\nNOTE: Another option is to create a file view that includes\nMD5 values. https://docs.synapse.org/articles/views.html\n",
        "operationId": "getEntityHeaderByMd5",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfEntityHeader"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets FileEntities matching the given MD5 string which the\nuser has read access to.\n",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/entity/threadcounts": {
      "post": {
        "description": "This API is used to get list of entity and count pairs, with count\nis the number of threads that belong to projects user can view and references\nthe given entity.\n\nTarget users: anyone who has READ permission to the project.\n",
        "operationId": "getThreadCounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityIdList"
              }
            }
          },
          "description": "The requested list. Limit size 20.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityThreadCounts"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get number of threads that belong to projects user can view and references\nthe given entity.\n",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/entity/type": {
      "get": {
        "description": "Get a batch of EntityHeader given multile Entity IDs. The EntityHeader\nis a light weight object with basic information about an Entity includes its type.\n",
        "operationId": "getEntityTypeBatch",
        "parameters": [
          {
            "description": "A comma separated list of Entity IDs to get EntityHeaders\nfor.\n",
            "in": "query",
            "name": "batch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfEntityHeader"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get a batch of EntityHeader given multile Entity IDs.",
        "tags": [
          "Entity Services"
        ]
      }
    },
    "/evaluation": {
      "get": {
        "description": "Gets a collection of Evaluations, within a given range.\n\n<p>\n\n<b>Note:</b> The response will contain only those Evaluations on which the caller\nis\n\ngranted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a>\n\npermission, unless specified otherwise with the accessType parameter.\n\n</p>\n",
        "operationId": "getEvaluationsPaginated",
        "parameters": [
          {
            "name": "accessType",
            "description": "The type of access for the user to filter for, optional and defaults\nto <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a>\n",
            "in": "query",
            "schema": {
              "default": "READ",
              "enum": [
                "CHANGE_PERMISSIONS",
                "CHANGE_SETTINGS",
                "CREATE",
                "DELETE",
                "DELETE_SUBMISSION",
                "DOWNLOAD",
                "MODERATE",
                "PARTICIPATE",
                "READ",
                "READ_PRIVATE_SUBMISSION",
                "SEND_MESSAGE",
                "SUBMIT",
                "TEAM_MEMBERSHIP_UPDATE",
                "UPDATE",
                "UPDATE_SUBMISSION",
                "UPLOAD"
              ],
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "description": "If 'true' then return only those evaluations with rounds defined\nand for which the current time is in one of the rounds.\n",
            "in": "query",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "evaluationIds",
            "description": "an optional, comma-delimited list of evaluation IDs to which the\nresponse is limited\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the pagination offset. For a page size of 10, the\nfirst page would be at offset = 0, and the second page would be at offset =\n10.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfEvaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a collection of Evaluations, within a given range.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "post": {
        "description": "'Creates a new Evaluation. The passed request body should contain the\nfollowing fields:\n\n<ul>\n\n<li>name - Give your new Evaluation a name.</li>\n\n<li>contentSource - The ID of the parent Entity, such as a Folder or Project.</li>\n\n<li>status - The initial state of the Evaluation, an\n\n<a href=\"${org.sagebionetworks.evaluation.model.EvaluationStatus}\">EvaluationStatus</a></li>\n\n</ul>\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.CREATE</a> on the contentSource Entity.\n\n</p>\n",
        "operationId": "createEvaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Evaluation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Creates a new Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}": {
      "parameters": [
        {
          "description": "The ID of the specified Evaluation.",
          "in": "path",
          "name": "evalId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Deletes an Evaluation.\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.DELETE</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "deleteEvaluation",
        "responses": {
          "204": {
            "description": "The resource was deleted."
          }
        },
        "summary": "Deletes an Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "get": {
        "description": "Gets an Evaluation.\n\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a\n\nhref=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\"\n\n>ACCESS_TYPE.READ</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "getEvaluation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets an Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "put": {
        "description": "'Updates an Evaluation.\n\n\n<p>\n\nSynapse employs an Optimistic Concurrency Control (OCC) scheme to handle\n\nconcurrent updates. Each time an Evaluation is updated a new etag will be\n\nissued to the Evaluation. When an update is requested, Synapse will compare the\n\netag of the passed Evaluation with the current etag of the Evaluation. If the\n\netags do not match, then the update will be rejected with a\n\nPRECONDITION_FAILED (412) response. When this occurs, the caller should\n\nfetch the latest copy of the Evaluation and re-apply any changes, then re-attempt\n\nthe Evaluation update.\n\n</p>\n\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a\n\nhref=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\"\n\n>ACCESS_TYPE.UPDATE</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "updateEvaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Evaluation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Updates an Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/access": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Determines whether the logged in user has a certain\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE</a> on the specified Evaluation.\n",
        "operationId": "hasAccess2",
        "parameters": [
          {
            "in": "query",
            "name": "accessType",
            "description": "Synapse access type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResult"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Determines whether a specified Synapse user has a certain access type on evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/acl": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "deprecated": true,
        "description": "This method is deprecated and should be removed from future versions\nof the API.\n\nDeletes the ACL (access control list) of the specified evaluation. The user should\nhave the proper <a href=\"${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\">permissions</a>\nto delete the ACL.\n",
        "operationId": "deleteAcl",
        "responses": {
          "204": {
            "description": "The resource was deleted"
          }
        },
        "summary": "This method is deprecated and should be removed from future versions of the API.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "get": {
        "description": "Gets the access control list (ACL) governing the given evaluation.\nThe user should have the proper\n<a href=\"${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\">permissions</a>\nto read the ACL.\n",
        "operationId": "getAcl",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets the access control list (ACL) governing the given evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/round": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "deprecated": true,
        "summary": "Create Evaluation Round",
        "description": "Create Evaluation Round",
        "operationId": "createEvaluationRound",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationRound"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationRound"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/round/{roundId}": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "roundId",
          "description": "The ID of the evaluation round",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "deprecated": true,
        "operationId": "deleteEvaluationRound",
        "summary": "Delete Evaluation Round",
        "description": "Delete Evaluation Round",
        "responses": {
          "204": {
            "description": "The resouce has been deleted"
          }
        },
        "tags": [
          "Evaluation Services"
        ]
      },
      "get": {
        "deprecated": true,
        "summary": "Get Evaluation Round",
        "description": "Get Evaluation Round",
        "operationId": "getEvaluationRound",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationRound"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "Evaluation Services"
        ]
      },
      "put": {
        "summary": "Update Evaluation Round",
        "description": "Update Evaluation Round",
        "deprecated": true,
        "operationId": "updateEvaluationRound",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationRound"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationRound"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/round/list": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Get all rounds of an Evaluation",
        "description": "Get all rounds of an Evaluation",
        "deprecated": true,
        "operationId": "getAllEvaluationRounds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationRoundListRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationRoundListResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/statusBatch": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Update multiple SubmissionStatuses. The maximum batch size is 500.  To\nallow upload of more than this maximum, the system supports uploading of a <i>series</i> of\nbatches. Synapse employs optimistic concurrency on the series in the form of a batch token.\nEach request (except the first) must include the ''batch token'' returned in the\nresponse to the previous batch. If another client begins batch upload simultaneously,\na PRECONDITION_FAILED (412) response will be generated and upload must restart\nfrom the first batch.  After the final batch is uploaded, the data for the Evaluation queue\nwill be mirrored to the tables which support querying.  Therefore uploaded data will\nnot appear in Evaluation queries until after the final batch is successfully uploaded.  It\nis the client''s responsibility to note in each batch request (1) whether it is the first\nbatch in the series and (2) whether it is the last batch.  (For a single batch both\nare set to ''true''.)\n\nFailure to use the flags correctly risks corrupted data (due to simultaneous,\nconflicting uploads by multiple clients) or data not appearing in query results.\n\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.UPDATE_SUBMISSION</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "updateSubmissionStatusBatch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmissionStatusBatch"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUploadResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update multiple SubmissionStatuses.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/submission": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets the requesting user's Submissions to a specified Evaluation.\n",
        "operationId": "getMySubmissions",
        "parameters": [
          {
            "description": "Limits the number of entities that will be fetched for this page. When null it will default to 10.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first entity. When null it will default to 0.'\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfSubmission"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets the requesting user's Submissions to a specified Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/submission/all": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "'Gets a collection of Submissions to a specified Evaluation.\n<p>\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation.\n</p>\n",
        "operationId": "getAllSubmissions",
        "parameters": [
          {
            "description": "Limits the number of entities that will be fetched for this\npage. When null it will default to 10, max value 100.\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "minimum": 10,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first entity. When null it will default\nto 0.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Status of submission.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfSubmission"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a collection of Submissions to a specified Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/submission/bundle": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets the requesting user's bundled Submissions and SubmissionStatuses\nto a specified Evaluation.\n",
        "operationId": "getMySubmissionBundles",
        "parameters": [
          {
            "description": "Limits the number of entities that will be fetched for this\npage. When null it will default to 10.'\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first entity. When null it will default\nto 0.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfSubmissionBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets the requesting users bundled Submissions and SubmissionStatuses\nto a specified Evaluation.'\n",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/submission/bundle/all": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets a collection of bundled Submissions and SubmissionStatuses to\na given Evaluation.\n\n<p>\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation.\n</p>\n",
        "operationId": "getAllSubmissionBundles",
        "parameters": [
          {
            "description": "Limits the number of entities that will be fetched for this\npage. When null it will default to 10.'\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first entity. When null it will default\nto 0.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Submission Status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfSubmissionBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a collection of bundled Submissions and SubmissionStatuses to a given Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/submission/count": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets the number of Submissions to a specified Evaluation.\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation.\n</p>\n",
        "operationId": "getSubmissionCount",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integer"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets the number of Submissions to a specified Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/submission/status/all": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "'Gets a collection of SubmissionStatuses to a specified Evaluation.\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a> on the specified Evaluation.\nFurthermore, the caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> to see all\ndata marked as \"private\" in the SubmissionStatuses.\n\n</p>\n",
        "operationId": "getAllSubmissionStatuses",
        "parameters": [
          {
            "description": "Limits the number of entities that will be fetched for this\npage. When null it will default to 10.'\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first entity. When null it will default\nto 0.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Submission status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfSubmissionStatus"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a collection of SubmissionStatuses to a specified Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/team/{id}/SubmissionEligibility": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "The ID of a Team.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Find out whether a Team and its members are eligible to submit to\na given Evaluation queue (at the current time).  The request must include\nan Evaluation ID and a Team ID.   The 'eligibilityStateHash'\nfield of the returned object is a required parameter of the subsequent Team Submission\nrequest made for the given Evaluation and Team.\n(See: <a href=\"${POST.evaluation.submission}\">POST/evaluation/submission</a>)'\n",
        "operationId": "getTeamSubmissionEligibility",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSubmissionEligibility"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Find out whether a Team and its members are eligible to submit to a given\nEvaluation queue (at the current time).'\n",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/acl": {
      "put": {
        "description": "Updates the supplied access control list (ACL) for an evaluation.\nThe <a href=\"${org.sagebionetworks.repo.model.AccessControlList}\">ACL</a>\nto be updated should have the ID of the evaluation. The user should have the proper\n<a href=\"${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\">permissions</a>\nin order to update the ACL.\n",
        "operationId": "updateAcl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlList"
              }
            }
          },
          "description": "The ACL being updated.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Updates the supplied access control list (ACL) for an evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/available": {
      "get": {
        "description": "Gets a collection of Evaluations in which the user has SUBMIT permission,\nwithin a given range.\n<p>\n<b>Note:</b> The response will contain only those Evaluations on which the caller\nmust is\ngranted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.SUBMIT</a>\npermission.\n</p>\n",
        "operationId": "getAvailableEvaluationsPaginated",
        "parameters": [
          {
            "in": "query",
            "name": "activeOnly",
            "description": "Retrieve active only evaluation queues",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "an optional, comma-delimited list of evaluation IDs to which the\nresponse is limited\n",
            "in": "query",
            "name": "evaluationIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limits the number of entities that will be fetched for this\npage. When null it will default to 10.'\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first entity. When null it will default\nto 0.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfEvaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a collection of Evaluations in which the user has SUBMIT permission,\nwithin a given range.\n",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/name/{name}": {
      "parameters": [
        {
          "in": "path",
          "name": "name",
          "description": "The name of the desired Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Finds an Evaluation by name.\n<p>\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a> on the specified Evaluation.\n</p>\n",
        "operationId": "findEvaluation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Finds an Evaluation by name.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/submission": {
      "post": {
        "description": "Creates a Submission and sends a submission notification email to\nthe submitter's team members.\n\nThe passed request body should contain the following fields:\n\n<ul>\n\n<li>evaluationId - The ID of the Evaluation to which this Submission belongs.</li>\n\n<li>entityId - The ID of the Entity being submitted.</li>\n\n<li>versionNumber - The specific version of the Entity being submitted.</li>\n\n</ul>\n\n<p>\n\nA Submission must be either a Team or an Individual submission.  A Team submission\nmust include a Team ID in the teamId field and the request must include a submissionEligibilityHash\nrequest parameter.  A Team submission may also include a list of submission contributors.\n(The submitter is taken to be a contributor and need not be included in the list.)\nAn individual submission must have a null teamId, a null or empty contributor\nlist, and no submissionEligibilityHash parameter.\n\n</p>\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.SUBMIT</a>.\n\n</p>\n\n<p>\n\nThis call also creates an associated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionStatus}\">SubmissionStatus</a>,\ninitialized with a SubmissionStatusEnum value of RECEIVED.\n\n</p>\n",
        "operationId": "createSubmission",
        "parameters": [
          {
            "description": "The portal endpoint prefix to the an entity/challenge page. The\nentity ID of the challenge project is appended to create the complete URL. In normal operation,\nthis parameter should be omitted.'\n",
            "in": "query",
            "name": "challengeEndpoint",
            "schema": {
              "description": "The portal endpoint prefix to the an entity/challenge page.\nThe entity ID of the challenge project is appended to create the complete URL.\nIn normal operation, this parameter should be omitted.'\n",
              "type": "string"
            }
          },
          {
            "description": "The current eTag of the Entity being submitted",
            "in": "query",
            "name": "etag",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The portal endpoint prefix for one-click email unsubscription.\nA signed, serialized token is appended to create the complete URL:\n<a href=\"${org.sagebionetworks.repo.model.message.NotificationSettingsSignedToken}\">NotificationSettingsSignedToken</a>.\nIn normal operation, this parameter should be omitted.'\n",
            "in": "query",
            "name": "notificationUnsubscribeEndpoint",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The hash provided by the\n<a href=\"${org.sagebionetworks.evaluation.model.TeamSubmissionEligibility}\">TeamSubmissionEligibility</a>\nobject.\n",
            "in": "query",
            "name": "submissionEligibilityHash",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Submission_model"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submission_model"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Creates a Submission and sends a submission notification email to the submitter's\nteam members.\n",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/submission/{subId}": {
      "parameters": [
        {
          "description": "The ID of the Submission",
          "in": "path",
          "name": "subId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Deletes a Submission and its accompanying SubmissionStatus.\n\n<b>This service is intended to only be used by ChallengesInfrastructure service\naccount.</b>\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.DELETE_SUBMISSION</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "deleteSubmission",
        "responses": {
          "204": {
            "description": "The resource has been deleted."
          }
        },
        "summary": "Deletes a Submission and its accompanying SubmissionStatus.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "get": {
        "description": "Gets a Submission.\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "getSubmission",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submission_model"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a Submission.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/submission/{subId}/cancellation": {
      "parameters": [
        {
          "description": "The ID of the Submission",
          "in": "path",
          "name": "subId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "User requests to cancel their submission. Only the user who submitted\na submission can make this request.\n",
        "operationId": "requestToCancelSubmission",
        "responses": {
          "204": {
            "description": "The request has been made."
          }
        },
        "summary": "User requests to cancel their submission.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/submission/{subId}/file/{fileHandleId}": {
      "parameters": [
        {
          "description": "the ID of the requested FileHandle contained in the Submission.",
          "in": "path",
          "name": "fileHandleId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the Submission",
          "in": "path",
          "name": "subId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets a pre-signed URL to access a requested File contained within\na specified Submission.\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation.\n</p>\n",
        "operationId": "redirectUrlForFileHandle",
        "parameters": [
          {
            "in": "query",
            "name": "redirect",
            "description": "To redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a pre-signed URL to access a requested File contained within a specified\nSubmission.\n",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/submission/{subId}/status": {
      "parameters": [
        {
          "description": "The ID of the Submission",
          "in": "path",
          "name": "subId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets the SubmissionStatus object associated with a specified Submission.\n<p>\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a> on the specified Evaluation.\nFurthermore, the caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a>\nto see all data marked as \"private\" in the SubmissionStatus. \n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum frequency this method can be called</td>\n\n<td>1 calls per second</td>\n\n</tr>\n\n</table>\n\n</p>\n",
        "operationId": "getSubmissionStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionStatus_model"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets the SubmissionStatus object associated with a specified Submission.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "put": {
        "description": "Updates a SubmissionStatus object.\n\n\n<p>\n\nSynapse employs an Optimistic Concurrency Control (OCC) scheme to handle\nconcurrent updates. Each time an SubmissionStatus is updated a new etag will be\nissued to the SubmissionStatus. When an update is requested, Synapse will compare\nthe etag of the passed SubmissionStatus with the current etag of the SubmissionStatus.\nIf the etags do not match, then the update will be rejected with a\nPRECONDITION_FAILED (412) response. When this occurs, the caller should\nfetch the latest copy of the SubmissionStatus and re-apply any changes, then re-attempt\nthe SubmissionStatus update.\n\n</p>\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.UPDATE_SUBMISSION</a> on the specified Evaluation.\n\n</p>\n\n</p>\n\n<p>\n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum frequency this method can be called</td>\n\n<td>1 calls per second</td>\n\n</tr>\n\n</table>\n\n</p>\n",
        "operationId": "updateSubmissionStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmissionStatus_model"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionStatus_model"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Updates a SubmissionStatus object.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/form/data": {
      "post": {
        "description": "Create a new FormData object. The caller will own the resulting object\nand will have access to read, update, and delete the FormData object.\n\nNote: The caller must have the SUBMIT permission on the FormGrup to \nreate/update/submit FormData.\n",
        "operationId": "createFormData",
        "parameters": [
          {
            "description": "The identifier of the group that manages this data.\n",
            "in": "query",
            "name": "groupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormChangeRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormData"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create a new FormData object.",
        "tags": [
          "Form Services"
        ]
      }
    },
    "/form/data/{id}": {
      "parameters": [
        {
          "description": "The ID of the FormData.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete an existing FormData object. The caller must be the creator\nof the FormData object.\n\nNote: Cannot delete a FormData object once it has been submitted and caller\nmust have the SUBMIT permission on the identified group to update the group's ACL.\n",
        "operationId": "deleteFormData",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Delete a FormData object.",
        "tags": [
          "Form Services"
        ]
      },
      "put": {
        "description": "Update an existing FormData object. The caller must be the creator\nof the FormData object. Once a FormData object has been submitted, it cannot be\nupdated until it has been processed. If the submission is accepted it becomes\nimmutable. Rejected submission are editable. Updating a rejected submission\nwill change its status back to waiting_for_submission.\n\nNote: The caller must have the SUBMIT permission on the FormGrup to\ncreate/update/submit FormData.\n",
        "operationId": "updateFormData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormChangeRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormData"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update a FormData object.",
        "tags": [
          "Form Services"
        ]
      }
    },
    "/form/data/{id}/accept": {
      "parameters": [
        {
          "description": "The ID of the FormData.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Called by the form reviewing service to accept a submitted data.\n\nNote: The caller must have the READ_PRIVATE_SUBMISSION\npermission on the identified group to update the group's ACL.\n",
        "operationId": "reviewerAcceptForm",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormData"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Called by the form reviewing service to accept a submitted data.",
        "tags": [
          "Form Services"
        ]
      }
    },
    "/form/data/{id}/reject": {
      "parameters": [
        {
          "description": "The ID of the FormData.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Called by the form reviewing service to reject a submitted data.\n\nNote: The caller must have the READ_PRIVATE_SUBMISSION\npermission on the identified group to update the group's ACL.\n",
        "operationId": "reviewerRejectForm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormRejection"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormData"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Called by the form reviewing service to reject a submitted data.",
        "tags": [
          "Form Services"
        ]
      }
    },
    "/form/data/{id}/submit": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "description": "The ID of the FormData.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Submit the identified FormData from review.\n\nNote: The caller must have the SUBMIT\npermission on the identified group to update the group's ACL.\n",
        "operationId": "submitFormData",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormData"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Submit the identified FormData from review.",
        "tags": [
          "Form Services"
        ]
      }
    },
    "/form/data/list": {
      "post": {
        "description": "List FormData objects and their associated status that match the filters\nof the provided request that are owned by the caller. Note: Only objects owned\nby the caller will be returned.\n",
        "operationId": "listFormStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "List FormData objects and their associated status.\n",
        "tags": [
          "Form Services"
        ]
      }
    },
    "/form/data/list/reviewer": {
      "post": {
        "description": "List FormData objects and their associated status that match the filters\nof the provided request for the entire group. This is used by service accounts\nto review submissions. Filtering by WAITING_FOR_SUBMISSION is not allowed for\nthis call.\n\nNote: The caller must have the READ_PRIVATE_SUBMISSION\npermission on the identified group to update the group's ACL.\n",
        "operationId": "listFormStatusReviewer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "List FormData objects and their associated status.\n",
        "tags": [
          "Form Services"
        ]
      }
    },
    "/form/group": {
      "post": {
        "description": "Create a FormGroup with the provided name. This method is idempotent.\nIf a group with the provided name already exists and the caller has READ\npermission the existing FormGroup will be returned.\n\nThe created FormGroup will have an Access Control List (ACL)\nwith the creator listed as an administrator.\n",
        "operationId": "createGroup",
        "parameters": [
          {
            "description": "A globally unique name for the group. Required. Between 3 and\n256 characters.\n",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 256,
              "minLength": 3
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormGroup"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create a FormGroup with the provided name.",
        "tags": [
          "Form Services"
        ]
      }
    },
    "/form/group/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "description": "The ID to the FormGroup.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get a FormGroup with the provided ID.\n\nNote: The caller must have the READ permission on the identified group.\n",
        "operationId": "getFormGroup",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormGroup"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get a FormGroup with the provided ID.",
        "tags": [
          "Form Services"
        ]
      }
    },
    "/form/group/{id}/acl": {
      "parameters": [
        {
          "description": "The ID of the FormGroup.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the Access Control List (ACL) for a FormGroup.\n\nNote: The caller must have READ permission on the identified group.\n",
        "operationId": "getGroupAcl",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the ACL for a FormGroup",
        "tags": [
          "Form Services"
        ]
      },
      "put": {
        "description": "Update the Access Control List (ACL) for a FormGroup.\n\nThe following define the permissions in this context:\n\n* READ - Grants read access to the group. READ does not grant access to FormData of\nthe group.\n* CHANGE_PERMISSIONS - Grants access to update the group's ACL.\n* SUBMIT - Grants access to both create and submit FormData to the group.\n* READ_PRIVATE_SUBMISSION - Grants administrator's access to the submitted FormData,\nincluding both FormData reads and status updates. This permission should be\nreserved for the service account that evaluates submissions.\n\nUsers automatically have read/update access to FormData that they create.\n\nNote: The caller must have the CHANGE_PERMISSIONS permission on the identified\ngroup to update the group's ACL.\n",
        "operationId": "updateGroupAcl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlList"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update the ACL for a FormGroup.",
        "tags": [
          "Form Services"
        ]
      }
    },
    "/forum/{forumId}": {
      "parameters": [
        {
          "description": "The ID of the Forum.",
          "in": "path",
          "name": "forumId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "This API is used to get the Forum''s metadata for a given its ID.\n\nTarget users: anyone who has READ permission to the project.'\n",
        "operationId": "getForum",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forum"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get a Forum.\n",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/forum/{forumId}/moderators": {
      "parameters": [
        {
          "description": "The ID of the Forum.",
          "in": "path",
          "name": "forumId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Returns a page of moderators for a given forum ID.\n\nTarget users: anyone who has READ permission to the project.\n",
        "operationId": "getForumModerators",
        "parameters": [
          {
            "description": "Limits the size of the page returned.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "default": 10,
              "minimum": 10
            }
          },
          {
            "description": "The index of the pagination offset. For a page size of 10, the\nfirst page would be at offset = 0, and the second page would be at offset =\n10.'\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedIds"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Returns a page of Forum moderators.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/forum/{forumId}/threadcount": {
      "parameters": [
        {
          "description": "The ID of the Forum.",
          "in": "path",
          "name": "forumId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "This API is used to get the total number of threads for a given forum\nID.\n\nTarget users: anyone who has READ permission to the project.\n",
        "operationId": "getThreadCount",
        "parameters": [
          {
            "description": "Filter deleted or not deleted threads.",
            "in": "query",
            "name": "filter",
            "schema": {
              "enum": [
                "DELETED_ONLY",
                "EXCLUDE_DELETED",
                "NO_FILTER"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadCount"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the total number of threads for a Forum.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/forum/{forumId}/threads": {
      "parameters": [
        {
          "description": "The ID of a Forum.",
          "in": "path",
          "name": "forumId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "This API is used to get N number of threads for a given forum ID.\n\nTarget users: anyone who has READ permission to the project.'\n",
        "operationId": "getThreads",
        "parameters": [
          {
            "description": "The direction of sort: true for ascending, and false for descending",
            "in": "query",
            "name": "ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter deleted or not deleted threads.",
            "in": "query",
            "name": "filter",
            "schema": {
              "enum": [
                "DELETED_ONLY",
                "EXCLUDE_DELETED",
                "NO_FILTER"
              ],
              "type": "string"
            }
          },
          {
            "description": "Limits the size of the page returned. For example, a page size\nof 10 require limit = 10.\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 20
            }
          },
          {
            "description": "- The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "description": "The field to sort the resulting threads on.",
            "in": "query",
            "name": "sort",
            "schema": {
              "enum": [
                "NUMBER_OF_REPLIES",
                "NUMBER_OF_VIEWS",
                "PINNED_AND_LAST_ACTIVITY",
                "THREAD_TITLE"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfDiscussionThreadBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get N number of threads for a Forum.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/membershipInvitation": {
      "post": {
        "description": "Create a membership invitation and send an email notification to\nthe invitee. The team must be specified.\n\nAlso, either an inviteeId or an inviteeEmail must be specified. Optionally, the\ncreator may include an invitation message and/or expiration date for the invitation.\nIf no expiration date is specified then the\ninvitation never expires.\n\nNote: The client must be an team manager of the specified Team to make this\nrequest.\n",
        "operationId": "createInvitation",
        "parameters": [
          {
            "description": "The portal endpoint prefix for one-click acceptance of the membership\ninvitation.\n\nA signed, serialized token is appended to create the complete URL: JoinTeamSignedToken\nif an inviteeId is specified, or MembershipInvtnSignedToken\nif an inviteeEmail is specified.\nIn normal operation, this parameter should be omitted.\n",
            "in": "query",
            "name": "acceptInvitationEndpoint",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The portal endpoint prefix for one-click email unsubscription.\nA signed, serialized token is appended to create the complete URL:\nNotificationSettingsSignedToken\n\nIn normal operation, this parameter should be omitted.\n",
            "in": "query",
            "name": "notificationUnsubscribeEndpoint",
            "schema": {
              "default": "https://www.synapse.org/#!SignedToken:Settings/",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MembershipInvitation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipInvitation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create membership invitation",
        "tags": [
          "Membership Invitation Services"
        ]
      }
    },
    "/membershipInvitation/{id}": {
      "parameters": [
        {
          "description": "the ID of the invitation.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete an invitation\n\nNote:  The client must be an administrator of the Team referenced by the invitation\nor the invitee to make this request.\n",
        "operationId": "deleteInvitation",
        "responses": {
          "204": {
            "description": "The resource was deleted"
          }
        },
        "summary": "Delete an invitation",
        "tags": [
          "Membership Invitation Services"
        ]
      },
      "get": {
        "description": "Retrieve an invitation by ID\n\nNote:  The client must be an administrator of the Team referenced by the invitation\nor the invitee to make this request.\n",
        "operationId": "getInvitation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipInvitation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve an invitation by ID.",
        "tags": [
          "Membership Invitation Services"
        ]
      },
      "post": {
        "description": "Retrieve an invitation by ID using a MembershipInvtnSignedToken for\nauthorization\n",
        "operationId": "getInvitationByToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MembershipInvtnSignedToken"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipInvitation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve an invitation by ID using a MembershipInvtnSignedToken.",
        "tags": [
          "Membership Invitation Services"
        ]
      }
    },
    "/membershipInvitation/{id}/inviteeId": {
      "parameters": [
        {
          "description": "the ID of the invitation.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Set the inviteeId of a MembershipInvitation.\n\nA valid InviteeVerificationSignedToken must have an inviteeId equal to the id\nof the authenticated user and a membershipInvitationId equal to the id in the URI.\nThis call will only succeed if the indicated MembershipInvitation has a\nnull inviteeId and a non null inviteeEmail.\n\nSee https://sagebionetworks.jira.com/wiki/spaces/PLFM/pages/143628166/Invite+a+new+user+to+join+a+team\nfor more information.\n",
        "operationId": "updateInviteeId",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteeVerificationSignedToken"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Set the inviteeId of a MembershipInvitation.",
        "tags": [
          "Membership Invitation Services"
        ]
      }
    },
    "/membershipInvitation/{id}/inviteeVerificationSignedToken": {
      "parameters": [
        {
          "description": "the ID of the invitation.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Verify whether the inviteeEmail of the indicated MembershipInvitation\nis associated with the authenticated user.\n\nIf it is, the response body will contain an InviteeVerificationSignedToken.\nIf it is not, a response status 403 Forbidden will be returned.\nInviteeVerificationSignedTokens generated by this service expire 24 hours from\ncreation.\n\nSee https://sagebionetworks.jira.com/wiki/spaces/PLFM/pages/143628166/Invite+a+new+user+to+join+a+team\nfor more information.\n",
        "operationId": "getInviteeVerificationSignedToken",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteeVerificationSignedToken"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Verify whether the inviteeEmail of the indicated MembershipInvitation is\nassociated with the authenticated user.\n",
        "tags": [
          "Membership Invitation Services"
        ]
      }
    },
    "/membershipInvitation/openInvitationCount": {
      "get": {
        "description": "Retrieve the number of pending Membership Invitations",
        "operationId": "getOpenInvitationCount",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the number of pending Membership Invitations.",
        "tags": [
          "Membership Invitation Services"
        ]
      }
    },
    "/membershipRequest": {
      "post": {
        "description": "Create a membership request and send an email notification to the\nadministrators of the team.\n\nThe Team must be specified. Optionally, the creator may include a message and/or\nexpiration date for the request.\n\nIf no expiration date is specified then the request never expires.\n",
        "operationId": "createRequest",
        "parameters": [
          {
            "description": "The portal end-point for one-click acceptance of the membership\n\nrequest.  A signed, serialized token is appended to create the complete:\nJoinTeamSignedToken\n\nIn normal operation, this parameter should be omitted.\n",
            "in": "query",
            "name": "acceptRequestEndpoint",
            "schema": {
              "default": "https://www.synapse.org/#!SignedToken:JoinTeam/",
              "type": "string"
            }
          },
          {
            "description": "The portal prefix for one-click email unsubscription.\n\nA signed, serialized token is appended to create the complete:\nNotificationSettingsSignedToken\n\nIn normal operation, this parameter should be omitted.\n",
            "in": "query",
            "name": "notificationUnsubscribeEndpoint",
            "schema": {
              "default": "https://www.synapse.org/#!SignedToken:Settings/",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MembershipRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipRequest"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": ".",
        "tags": [
          "Membership Request Services"
        ]
      }
    },
    "/membershipRequest/{id}": {
      "parameters": [
        {
          "in": "path",
          "description": "The ID for a membership request.",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete a request\n\nNote:  The client must be the creator of the membership request to make this request.\n",
        "operationId": "deleteRequest",
        "responses": {
          "204": {
            "description": "The resource has been deleted"
          }
        },
        "summary": "Delete a request",
        "tags": [
          "Membership Request Services"
        ]
      },
      "get": {
        "description": "Retrieve an request by ID\n\nNote:  The client must be the creator of the membership request to make this request.'\n",
        "operationId": "getRequest",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipRequest"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve an request by ID",
        "tags": [
          "Membership Request Services"
        ]
      }
    },
    "/membershipRequest/openRequestCount": {
      "get": {
        "description": "Retrieve the number of pending Membership Requests for teams that user\nis admin\n",
        "operationId": "getOpenMembershipRequestCount",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get pending Membership Requests count",
        "tags": [
          "Membership Request Services"
        ]
      }
    },
    "/message": {
      "post": {
        "description": "Sends a message.\n\nThe \"fileHandleId\" field should point to a plain text file containing the body\nof the message. The file should be uploaded prior to this call.\n\nThe \"recipients\" field should hold a set of IDs corresponding to the recipients\nof the message.\n\nAll other fields are optional, including the \"subject\" field.\n\nTo chain messages together into a conversation, specify the message you are replying\nto via the \"inReplyTo\" field.\n\nSee the MessageToUser, MessageContent, and MessageRecipientSet schema for more information.\n\nIn most cases, message delivery is asynchronous to message creation.\n\ni.e. It may take several seconds for a message to appear in a user's inbox.\n\nNotes:\n\nUnauthorized delivery, such as messaging a team you are not affiliated with,\nwill result in a bounce message being sent to your email.\n\nThere are limits on the number of message recipients you can specify (50) and\nthe rate at which you can send messages (10 per minute).  Neither these restrictions,\nnor the restriction that you can''t message a Team with which you are unaffiliated,\napply if you are a member of the Trusted Message Senders Team.\n",
        "operationId": "createMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageToUser"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageToUser"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Send a message",
        "tags": [
          "Message Services"
        ]
      }
    },
    "/message/{messageId}": {
      "parameters": [
        {
          "in": "path",
          "description": "The ID of the message.",
          "name": "messageId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Fetches the specified message.\n\nThe authenticated user must be either the sender or receiver of the message.\n",
        "operationId": "getMessage",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageToUser"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the specified message.",
        "tags": [
          "Message Services"
        ]
      }
    },
    "/message/{messageId}/conversation": {
      "parameters": [
        {
          "in": "path",
          "description": "The ID of the message.",
          "name": "messageId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieves messages belonging to the same thread as the given message.\n\nThe current authenticated user will be either the sender or receiver of all returned\nmessages.\n\nBy default, the most recent messages are returned first.\nTo flip the ordering, set the \"descending\" parameter to \"false\".\nTo change the way the messages are ordered, set the \"orderBy\" parameter to\neither \"SEND_DATE\" or \"SUBJECT\".\n",
        "operationId": "getConversation",
        "parameters": [
          {
            "in": "query",
            "name": "descending",
            "description": "If true, returns the most recent messages.",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limits the number of messages",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "The offset index determines where this page will start from.",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Order by",
            "schema": {
              "default": "SEND_DATE",
              "type": "string",
              "enum": [
                "SUBJECT",
                "SEND_DATE"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfMessageToUser"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves messages belonging to the same thread as the given message.",
        "tags": [
          "Message Services"
        ]
      }
    },
    "/message/{messageId}/file": {
      "parameters": [
        {
          "in": "path",
          "description": "The ID of the message.",
          "name": "messageId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the actual URL of the file associated with the message\n\nNote: This call will result in a HTTP temporary redirect (307), to the\nactual file URL if the caller meets all of the download requirements.\n",
        "operationId": "fileRedirectForMessage",
        "parameters": [
          {
            "description": "When set to false, the URL will be returned as text/plain\ninstead of redirecting.'\n",
            "in": "query",
            "name": "redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the actual URL of the file associated with the message.",
        "tags": [
          "Message Services"
        ]
      }
    },
    "/message/{messageId}/forward": {
      "parameters": [
        {
          "in": "path",
          "description": "The ID of the message.",
          "name": "messageId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Forwards a message to the specified set of recipients.\n\nThe authenticated user must be either the sender or receiver of the forwarded\nmessage.\n",
        "operationId": "forwardMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRecipientSet"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageToUser"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Forwards a message to the specified set of recipients.",
        "tags": [
          "Message Services"
        ]
      }
    },
    "/message/inbox": {
      "get": {
        "description": "Retrieves the current authenticated user's inbox.\n\nIt may take several seconds for a message to appear in the inbox after creation.\nBy default, the most recent unread messages are returned first.\nTo flip the ordering, set the \"descending\" parameter to \"false\".\nTo change the way the messages are ordered, set the \"orderBy\" parameter to\neither \"SEND_DATE\" or \"SUBJECT\".\n\nTo retrieve messages that have been read or archived, set the \"inboxFilter\" parameter\nto a comma-separated list of values defined in the MessageStatusType\n",
        "operationId": "getInbox",
        "parameters": [
          {
            "in": "query",
            "name": "descending",
            "description": "By default, returns most recent unread messages.",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "inboxFilter",
            "description": "Inbox filter",
            "schema": {
              "default": "UNREAD",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limits the number of messages",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "The offset index determines where this page will start from.",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Order by",
            "schema": {
              "default": "SEND_DATE",
              "type": "string",
              "enum": [
                "SUBJECT",
                "SEND_DATE"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": "$ref ../components/schemas/Empty.yaml"
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfMessageBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves the current authenticated user's inbox.",
        "tags": [
          "Message Services"
        ]
      }
    },
    "/message/outbox": {
      "get": {
        "description": "Retrieves the current authenticated user''s outbox.\n\nBy default, the most recent messages are returned first.\nTo flip the ordering, set the \"descending\" parameter to \"false\".\nTo change the way the messages are ordered, set the \"orderBy\" parameter to\neither \"SEND_DATE\" or \"SUBJECT\".\n",
        "operationId": "getOutbox",
        "parameters": [
          {
            "in": "query",
            "name": "descending",
            "description": "By default, the most recent message are returned.",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limits the number of messages",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "The offset index determines where this page will start from.",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Order by",
            "schema": {
              "default": "SEND_DATE",
              "type": "string",
              "enum": [
                "SUBJECT",
                "SEND_DATE"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": "$ref ../components/schemas/Empty.yaml"
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfMessageToUser"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves the current authenticated user's outbox.",
        "tags": [
          "Message Services"
        ]
      }
    },
    "/message/status": {
      "put": {
        "description": "Updates the current status of a message relative to the current authenticated\nuser.\n\nNote: the \"recipientId\" field of the request body will be ignored.'\n",
        "operationId": "updateMessageStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageStatus"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Updates the current status of a message relative to the current authenticated user.",
        "tags": [
          "Message Services"
        ]
      }
    },
    "/project/{projectId}/forum": {
      "parameters": [
        {
          "description": "The ID of a Project.",
          "in": "path",
          "name": "projectId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "This API is used to get the Forum's metadata for a given project\nID.\n\nTarget users: anyone who has READ permission to the project.'\n",
        "operationId": "getForumByProjectId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forum"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the Forum of a Project.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/reply": {
      "post": {
        "description": "This API is used to create a new reply to a thread.\n\nTarget users: anyone who has READ permission to the project.\n",
        "operationId": "createReply",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDiscussionReply"
              }
            }
          },
          "description": "- This object contains information needed to create a reply.",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionReplyBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create a new reply to a thread.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/reply/{replyId}": {
      "parameters": [
        {
          "description": "The ID of the Reply.",
          "in": "path",
          "name": "replyId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "This API is used to mark a reply as deleted.\n\nTarget users: only forum's moderator can mark a reply as deleted.\n",
        "operationId": "deleteReply",
        "responses": {
          "204": {
            "description": "This resource was deleted."
          }
        },
        "summary": "Delete Reply",
        "tags": [
          "Discussion Services"
        ]
      },
      "get": {
        "description": "This API is used to get a reply and its statistic given its ID.\n\nTarget users: anyone who has READ permission to the project.\n",
        "operationId": "getReply",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionReplyBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get a Reply.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/reply/{replyId}/message": {
      "parameters": [
        {
          "description": "The ID of the Reply.",
          "in": "path",
          "name": "replyId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "This API is used to update the message of a reply.\n\nTarget users: only the author of the reply can update its message.'\n",
        "operationId": "updateReplyMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReplyMessage"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionReplyBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update the message of a reply.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/reply/messageUrl": {
      "get": {
        "description": "This API is used to get the message URL of a reply. The message URL\nis the URL to download the file which contains the reply message.\n\nTarget users: anyone who has READ permission to the project.\nThe resulting URL will be signed with Content-Type =\"text/plain; charset=utf-8\";\ntherefore, this header must be included with the GET on the URL.\n",
        "operationId": "getReplyUrl",
        "parameters": [
          {
            "description": "DiscussionReplyBundle.messageKey",
            "in": "query",
            "name": "messageKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageURL"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the message URL of a reply.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/schema/list": {
      "post": {
        "description": "List all JSON schemas for an Organization. Each call will return a\nsingle page of schemas. Forward the provided nextPageToken to get the next page.\n",
        "operationId": "listJsonSchemas",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListJsonSchemaInfoRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListJsonSchemaInfoResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "List all JSON schemas for an Organization.",
        "tags": [
          "Json Schema Services"
        ]
      }
    },
    "/schema/organization": {
      "get": {
        "description": "Lookup an Organization by name.",
        "operationId": "getOrganizationByName",
        "parameters": [
          {
            "description": "The name of the Organization to lookup.",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Lookup an Organization by name.",
        "tags": [
          "Json Schema Services"
        ]
      },
      "post": {
        "description": "Create a new Organization by providing a unique organization name.\nThe new Organization will have an auto-generated AcessControlList (ACL)\ngranting the caller all relevant permission on the newly created Organization.\n",
        "operationId": "createOrganziation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create a new Organization.",
        "tags": [
          "Json Schema Services"
        ]
      }
    },
    "/schema/organization/{id}": {
      "parameters": [
        {
          "description": "The ID of the Organization.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete the identified Organization. All schemas defined within the\nOrganization''s name-space must first be deleted before an Organization can be\ndeleted.\n\nNote: The caller must be granted the DELETE permission on the Organization.\n",
        "operationId": "deleteOrganization",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Delete the identified Organization.",
        "tags": [
          "Json Schema Services"
        ]
      }
    },
    "/schema/organization/{id}/acl": {
      "parameters": [
        {
          "description": "The ID of the Organization.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the AcessControlList (ACL) associated with the identified Organization.\n\nNote: The caller must be granted the READ permission to get an Organization's ACL.\n",
        "operationId": "getOrganizationAcl",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the ACL associated of an Organization.",
        "tags": [
          "Json Schema Services"
        ]
      },
      "put": {
        "description": "Update the AccessControlList (ACL) for the identified Organization.\n\nNote: The caller must be granted the CHANGE_PERMISSIONS permission to\nupdate an Organization's ACL.\n",
        "operationId": "updateOrganizationAcl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlList"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update the AccessControlList (ACL) for the identified Organization.",
        "tags": [
          "Json Schema Services"
        ]
      }
    },
    "/schema/organization/list": {
      "post": {
        "description": "List all organizations. Each call will return a single page of Organizations.\nForward the provided nextPageToken to get the next page.\n",
        "operationId": "listOrganizations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOrganizationsRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOrganizationsResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "List all organizations.",
        "tags": [
          "Json Schema Services"
        ]
      }
    },
    "/schema/type/create/async/get/{asyncToken}": {
      "parameters": [
        {
          "description": "Forward the token returned when the job was started.",
          "in": "path",
          "name": "asyncToken",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the results of an asynchronous job that was started to create\na new JSON schema.\n\nNote: If the job has not completed, this method will return a status code of\n202 (ACCEPTED) and the response body will be a AsynchronousJobStatus object.\n",
        "operationId": "createSchemaAsyncGet",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSchemaResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the results of an asynchronous job that was started to create a new\nJSON schema.\n",
        "tags": [
          "Json Schema Services"
        ]
      }
    },
    "/schema/type/create/async/start": {
      "post": {
        "description": "Start an asynchronous job to create a new JSON schema.\nA JSON schema must include an $id that is a relative URL of that schema. The\npseudo-BNF syntax for a valid $id is as follows:\n\n< $id > ::= < organization name > \"-\" < schema name > [ \"-\"  < semantic version > ]\n\n< organization name > ::= < dot separated alpha numeric > \n\n< schema name > ::= < dot separated alpha numeric >\n\n< semantic version > ::= See: https://semver.org/\n\n< dot separated alpha numeric > :: = < alpha numeric > ( \".\" < alpha numeric > )*\n\n< alpha numeric > ::= < letter > ( < identifier > )*\n\n< letter > ::= [a-zA-Z]\n\n< identifier > ::= < letter > | < digit >\n\n< digit > :: = [0-9]\n\nTake the following example, if organizationName=\"my.organization\",\nschemaName=\"foo.Bar.json\", and semanticVersion=\"0.1.2\", then\n$id=\"my.organization-foo.Bar.json-0.1.2\". Note: The semantic version is\noptional. When provide the semantic version is a label for a specific version\nthat allows other schemas to reference it by its version. When a semantic\nversion is include, that version of the schema is immutable. This means if a\nsemantic version is included in a registered schema's $id, all $refs within\nthe schema must also include a semantic version.\n\nAll $ref within a JSON schema must either be references to \"definitions\"\nwithin the schema or references other registered JSON schemas. References to\nnon-registered schemas is not currently supported. To reference a registered\nschema $ref should equal the $id of the referenced schema. To reference the\nexample schema from above use $ref=\"my.organization-foo.Bar.json-0.1.2\".\n\nNote: The semantic version of a referenced schema is optional. When the\nsemantic version is excluded in a $ref the reference is assumed to reference\nthe latest version of the schema. So $ref=\"my.organization-foo.Bar.json\"\nwould be a reference to the latest version of that schema. While\n$ref=\"my.organization-foo.Bar.json-0.1.2\" would be a reference to the version\n0.1.2\n\nTo monitor the progress of the job and to get the final results use:\nGET /schema/type/create/async/get/{asyncToken}\n\nNote: The caller must be granted the CREATE permission on the\nOrganization in the schema's $id.\n",
        "operationId": "createSchemaAsyncStart",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSchemaRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncJobId"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Start an asynchronous job to create a new JSON schema.",
        "tags": [
          "Json Schema Services"
        ]
      }
    },
    "/schema/type/registered/{id}": {
      "parameters": [
        {
          "description": "The $id of the schema to delete.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete the given schema using its $id. If the $id excludes a semantic\nversion, all versions of the schema will be deleted. If the $id includes a\nsemantic version then just that version will be deleted. Caution: This\noperation cannot be undone.\n\nNote: The caller must be granted the DELETE permission on the schema's organization.\n",
        "operationId": "deleteJsonSchema",
        "responses": {
          "204": {
            "description": "The resource has been deleted."
          }
        },
        "tags": [
          "Json Schema Services"
        ]
      },
      "get": {
        "description": "Get a registered JSON schema using its $id.",
        "operationId": "getJsonSchema",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonSchema"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get a registered JSON schema using its $id.",
        "tags": [
          "Json Schema Services"
        ]
      }
    },
    "/schema/type/validation/async/get/{asyncToken}": {
      "parameters": [
        {
          "description": "Forward the token returned when the job was started.",
          "in": "path",
          "name": "asyncToken",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the results of an asynchronous job that was started to compile\na 'validation' schema for a JSON schema.\n\nNote: If the job has not completed, this method will return a status code of\n202 (ACCEPTED) and the response body will be a AsynchronousJobStatus object.\n",
        "operationId": "getValidationSchemaResults",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetValidationSchemaResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the results of an asynchronous job that was started to compile a\n'validation' schema for a JSON schema.\n",
        "tags": [
          "Json Schema Services"
        ]
      }
    },
    "/schema/type/validation/async/start": {
      "post": {
        "description": "To use a JSON schema for validation, the JSON schema plus all of its\ndependency schemas must be provided to a JSON schema validator. The\n'validation' schema is simply a JSON schema with all of its dependencies\nadded to the 'definitions' section of the schema, making the schema\nself-contained.\n\nUse this call to start an asynchronous job that will compile the 'validation'\nschema for a given JSON schema $id.\n\nTo monitor the progress of the job and to get the final results use:\nGET /schema/type/validation/async/get/{asyncToken}\n",
        "operationId": "startGetValidationSchema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetValidationSchemaRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncJobId"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Start validating JSON schema\n",
        "tags": [
          "Json Schema Services"
        ]
      }
    },
    "/schema/version/list": {
      "post": {
        "description": "List the version information for each version of a given schema. Each\ncall will return a single page of results. Forward the provide nextPageToken to\nget the next page of results.\n",
        "operationId": "listJsonSchemasVersions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListJsonSchemaVersionInfoRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListJsonSchemaVersionInfoResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "List the version information for each version of a given schema.",
        "tags": [
          "Json Schema Services"
        ]
      }
    },
    "/team": {
      "post": {
        "description": "Create a new Team.\n\nTo specify a Team icon, the icon file must first be uploaded to Synapse as\nFileHandle.  The FileHandle ID can then be put into the Team's icon field.\n",
        "operationId": "createTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create a new Team.",
        "tags": [
          "Team Services"
        ]
      },
      "put": {
        "description": "Update the Team metadata for the specified Team.\nNote: The client must be a Team administrator to make this request.\n",
        "operationId": "updateTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            }
          },
          "description": "the new metadata for the Team",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update the Team metadata for the specified Team.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/teams": {
      "get": {
        "description": "Retrieve a paginated list of Teams matching the supplied name fragment\n(optional), in alphabetical order by Team name.\n\n<br>\n\nNote:  This service has JSONP support:  If the request parameter \"callback=jsMethod\"\nis included (where 'jsMethod' is any function name you wish), then the response body will be wrapped\nin \"jsMethod(...);\".\n",
        "operationId": "getTeamsByNameFragment",
        "parameters": [
          {
            "description": "a prefix of the Team name, or a prefix of any sub-string in the\nname preceded by a space. If omitted, all Teams are returned.\n",
            "in": "query",
            "name": "fragment",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the maximum number of Teams to return.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 50
            }
          },
          {
            "description": "the starting index of the returned results (default 0)",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfTeam"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a paginated list of Teams in alphabetical order by Team name.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete the Team.\nNote: The client must be a Team administrator to make this request.\n",
        "operationId": "deleteTeam",
        "responses": {
          "204": {
            "description": "The resource has been deleted."
          }
        },
        "summary": "Delete the Team.",
        "tags": [
          "Team Services"
        ]
      },
      "get": {
        "description": "Retrieve the metadata for a specified Team.\n\n<p>\n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum frequency this method can be called</td>\n\n<td>1 calls per second</td>\n\n</tr>\n\n</table>\n\n</p>\n",
        "operationId": "getTeam",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the metadata for a specified Team.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/accessApproval": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "deprecated": true,
        "description": "Retrieve the Access Approvals for the given Team.  This service is only available to the ACT.",
        "operationId": "getTeamAccessApprovals",
        "parameters": [
          {
            "description": "Limits the size of the page returned. For example, a page size\nof 10 require limit = 10. The maximum limit for this call is 50.\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 10,
              "maximum": 50,
              "default": 10
            }
          },
          {
            "description": "The index of the pagination offset. For a page size of 10, the\nfirst page would be at offset = 0, and the second page would be at offset =\n10.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          },
          "410": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Retrieve the Access Approvals for the given Team.",
        "tags": [
          "Access Approval Services"
        ]
      }
    },
    "/team/{id}/accessRequirement": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve paginated list of ALL Access Requirements associated with\na Team.\n",
        "operationId": "getTeamAccessRequirements",
        "parameters": [
          {
            "description": "Limits the size of the page returned. For example, a page size\nof 10 require limit = 10. The maximum limit for this call is 50.\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 10,
              "maximum": 50,
              "default": 10
            }
          },
          {
            "description": "The index of the pagination offset. For a page size of 10, the\nfirst page would be at offset = 0, and the second page would be at offset =\n10.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfAccessRequirement"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve paginated list of ALL Access Requirements associated with a Team.",
        "tags": [
          "Access Requirement Services"
        ]
      }
    },
    "/team/{id}/acl": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the AccessControlList for a specified Team.",
        "operationId": "getTeamAcl",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the AccessControlList for a specified Team.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/icon": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the download URL for the Team icon, or receive a redirect response to said URL.",
        "operationId": "fileRedirectUrlForTeamIcon",
        "parameters": [
          {
            "description": "if true or omitted, then redirect to the URL.  If false then simply\nreturn the URL.\n",
            "in": "query",
            "name": "redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the download URL for the Team icon, or receive a redirect response\nto said URL\n",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/icon/preview": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the download URL for the Team icon preview, or receive a redirect\nresponse to said URL.\n",
        "operationId": "filePreviewRedirectUrlForTeamIcon",
        "parameters": [
          {
            "description": "if true or omitted, then redirect to the URL.  If false then simply\nreturn the URL.\n",
            "in": "query",
            "name": "redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the download URL for the Team icon preview, or receive a redirect\nresponse to said URL.\n",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/member/{principalId}": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "the member's principal ID",
          "in": "path",
          "name": "principalId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Remove the given member from the specified Team.\nNote:  The client must either be a Team administrator or the member being removed.\n",
        "operationId": "removeTeamMember",
        "responses": {
          "204": {
            "description": "The resource has been deleted."
          }
        },
        "summary": "Remove the given member from the specified Team.",
        "tags": [
          "Team Services"
        ]
      },
      "get": {
        "description": "'<p>\n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum frequency this method can be called</td>\n\n<td>1 calls per second</td>\n\n</tr>\n\n</table>\n\n</p>'\n",
        "operationId": "getTeamMember",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamMember"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": ".",
        "tags": [
          "Team Services"
        ]
      },
      "put": {
        "description": "Add a member to the Team.\n\nIf the one making the request is the user to be added, then the user must have\nan open invitation from the Team.  If the one making the request is an administrator\non the Team, then there must be a pending request from the user to the Team, asking\nto be added. If both teamEndpoint and notificationUnsubscribeEndpoint are provided,\nnotification email(s) will be sent to the appropriate parties.\n",
        "operationId": "addTeamMember",
        "parameters": [
          {
            "description": "the portal prefix for one-click email unsubscription.\nA signed, serialized token is appended to create the complete URL:\n<ahref=\"${org.sagebionetworks.repo.model.message.NotificationSettingsSignedToken}\">NotificationSettingsSignedToken</a>'\n",
            "in": "query",
            "name": "notificationUnsubscribeEndpoint",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the portal prefix for the Team URL. The team ID is appended to create\nthe complete URL.\n",
            "in": "query",
            "name": "teamEndpoint",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource has been added."
          }
        },
        "summary": "Add a member to the Team.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/member/{principalId}/membershipStatus": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "the member's principal ID",
          "in": "path",
          "name": "principalId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the Team Membership Status bundle for a team and user.  This\nsays whether a user is a member of a Team, whether there are outstanding\nmembership requests or invitations, and whether the client making the request\ncan add the given user to the given Team.\n",
        "operationId": "getTeamMembershipStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamMembershipStatus"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the Team Membership Status bundle for a team and user.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/memberList": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Returns the TeamMember info for a team and a given list of members'\nprincipal IDs.\nInvalid IDs in the list are ignored:  The results list is simply\nsmaller than the list of IDs passed in.\n",
        "operationId": "listTeamMembersGivenTeamandUserList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdList"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWrapperOfTeamMember"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Returns the TeamMember info for a team and a given list of members' principal\nIDs.\n",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/openInvitation": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the open invitations from a Team, optionally filtering by\nthe invitee.\nAn invitation is only open if it has not expired and if the user has not joined\nthe Team.\nNote: certain fields may be omitted when returned if the field value is null\n",
        "operationId": "getOpenInvitationsByTeam",
        "parameters": [
          {
            "description": "the ID of the Synapse user to which invitations have been extended",
            "in": "query",
            "name": "inviteeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the maximum number of invitations to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "the starting index of the returned results",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfMembershipInvitation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the open invitations from a Team, optionally filtering by the\ninvitee.\n",
        "tags": [
          "Membership Invitation Services"
        ]
      }
    },
    "/team/{id}/openRequest": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the open requests submitted to a Team, optionally filtering\nby the requester.\nAn request is only open if it has not expired and if the requester has not been\nadded the Team.\n\n<p>\n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum frequency this method can be called</td>\n\n<td>40 calls per minute</td>\n\n</tr>\n\n</table>\n\n</p>'\n",
        "operationId": "getOpenRequestsByTeam",
        "parameters": [
          {
            "description": "the maximum number of requests to return (default 10)",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "the starting index of the returned results (default 0)",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "the ID of the user requesting admission to the Team",
            "in": "query",
            "name": "requestorId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfMembershipRequest"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the open requests submitted to a Team, optionally filtering by the requester.",
        "tags": [
          "Membership Request Services"
        ]
      }
    },
    "/team/acl": {
      "put": {
        "description": "Update the Access Control List for the specified Team.",
        "operationId": "updateTeamAcl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlList"
              }
            }
          },
          "description": "the updated Access Control List",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update the Access Control List for the specified Team.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/teamList": {
      "post": {
        "description": "Retrieve a list of Teams given their IDs.\nInvalid IDs in the list are ignored:  The results list is simply\nsmaller than the list of IDs passed in.\n",
        "operationId": "listTeams",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdList"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWrapperOfTeam"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a list of Teams given their IDs.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/teamMember": {
      "put": {
        "description": "Add a member to the Team.  Note: The request is authenticated by a\nhash message authentication code in the request body, generated by Synapse.  The intended\nuse of this service is by the portal, completing a round trip with a 'one-click join-team'\nlink provided to the user by Synapse via email. If both teamEndpoint and\nnotificationUnsubscribeEndpoint are provided, notification email(s) will\nbe sent to the appropriate parties.\n",
        "operationId": "addTeamMemberViaSignedToken",
        "parameters": [
          {
            "in": "query",
            "name": "notificationUnsubscribeEndpoint",
            "description": "notification unsubscribe endpoint",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "teamEndpoint",
            "description": "Team end point",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinTeamSignedToken"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Add a member to the Team.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/teamMembers/{id}": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve a paginated list of Team members matching the supplied name\nprefix.  If the prefix is omitted then all members are returned.\n\n<br>\n\nNote:  This service has JSONP support:  If the request parameter \"callback=jsMethod\"\nis included (where 'jsMethod' is any function name you wish), then the response body will be wrapped\nin \"jsMethod(...);\".\n",
        "operationId": "getTeamMembers",
        "parameters": [
          {
            "description": "a prefix of the user's first or last name or email address",
            "in": "query",
            "name": "fragment",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the maximum number of members to return.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 50
            }
          },
          {
            "description": "the type of team user to retrieve",
            "in": "query",
            "name": "memberType",
            "schema": {
              "enum": [
                "ADMIN",
                "ALL",
                "MEMBER"
              ],
              "type": "string",
              "default": "ALL"
            }
          },
          {
            "description": "the starting index of the returned results",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfTeamMember"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a paginated list of Team members matching the supplied name prefix.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/teamMembers/count/{id}": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the number of Team members matching the supplied name prefix.  If\nthe prefix is omitted then the number of members in the team is returned.\n\n<br>\n\nNote:  This service has JSONP support:  If the request parameter \"callback=jsMethod\"\nis included (where 'jsMethod' is any function name you wish), then the response body will be wrapped\nin \"jsMethod(...);\".\n",
        "operationId": "getTeamMemberCount",
        "parameters": [
          {
            "description": "a prefix of the user's first or last name or email address\n",
            "in": "query",
            "name": "fragment",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the number of Team members matching the supplied name prefix.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/thread": {
      "post": {
        "description": "This API is used to create a new thread in a forum.\n\nTarget users: anyone who has READ permission to the project.\n",
        "operationId": "createThread",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDiscussionThread"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionThreadBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create a new thread in a forum.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/thread/{threadId}": {
      "parameters": [
        {
          "description": "The ID of a thread.",
          "in": "path",
          "name": "threadId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "This API is used to mark a thread as deleted.\n\nTarget users: only forum's moderator can mark a thread as deleted.\n",
        "operationId": "deleteThread",
        "responses": {
          "204": {
            "description": "The resource has been deleted."
          }
        },
        "summary": "Delete a Thread.",
        "tags": [
          "Discussion Services"
        ]
      },
      "get": {
        "description": "This API is used to get a thread and its statistic given its ID.\n\nTarget users: anyone who has READ permission to the project.\n",
        "operationId": "getThread",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionThreadBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get a thread.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/thread/{threadId}/message": {
      "parameters": [
        {
          "description": "The ID of a thread.",
          "in": "path",
          "name": "threadId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "This API is used to update the message of a thread.\n\nTarget users: only the author of the thread can update its message.'\n",
        "operationId": "updateThreadMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateThreadMessage"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionThreadBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update the message of a thread.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/thread/{threadId}/pin": {
      "parameters": [
        {
          "description": "The ID of a thread.",
          "in": "path",
          "name": "threadId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "This API is used to mark a thread as pinned.\n\nTarget users: only forum's moderator can mark a thread as pinned.\n",
        "operationId": "pinThread",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Pin a Thread.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/thread/{threadId}/replies": {
      "parameters": [
        {
          "description": "The ID of a thread.",
          "in": "path",
          "name": "threadId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "This API is used to get N number of replies for a given thread ID.\n\nTarget users: anyone who has READ permission to the project.\n",
        "operationId": "getRepliesForThread",
        "parameters": [
          {
            "description": "The direction of sort: true for ascending, and false for descending",
            "in": "query",
            "name": "ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter deleted not deleted replies.",
            "in": "query",
            "name": "filter",
            "required": true,
            "schema": {
              "enum": [
                "DELETED_ONLY",
                "EXCLUDE_DELETED",
                "NO_FILTER"
              ],
              "type": "string"
            }
          },
          {
            "description": "Limits the size of the page returned. For example, a page size\nof 10 require limit = 10.\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "default": 10,
              "minimum": 0
            }
          },
          {
            "description": "The index of the pagination offset. For a page size of 10, the\nfirst page would be at offset = 0, and the second page would be at offset =\n10.'\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "description": "The field to sort the resulting replies on.\n",
            "in": "query",
            "name": "sort",
            "schema": {
              "enum": [
                "CREATED_ON"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfDiscussionReplyBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get N number of replies for a given thread ID.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/thread/{threadId}/replycount": {
      "parameters": [
        {
          "description": "The ID of a thread.",
          "in": "path",
          "name": "threadId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "This API is used to get the total number of replies for a given thread\nID.\n\nTarget users: anyone who has READ permission to the project.'\n",
        "operationId": "getReplyCountForThread",
        "parameters": [
          {
            "description": "Filter deleted not deleted replies.",
            "in": "query",
            "name": "filter",
            "required": true,
            "schema": {
              "enum": [
                "DELETED_ONLY",
                "EXCLUDE_DELETED",
                "NO_FILTER"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplyCount"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the total number of replies for a given Thread.\n",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/thread/{threadId}/restore": {
      "parameters": [
        {
          "description": "The ID of a thread.",
          "in": "path",
          "name": "threadId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "This API is used to restore a deleted thread.\n\nTarget users: only forum's moderator can restore a deleted thread.\n",
        "operationId": "restoreDeletedThread",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Restore a deleted thread.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/thread/{threadId}/title": {
      "parameters": [
        {
          "description": "The ID of a thread.",
          "in": "path",
          "name": "threadId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "This API is used to update the title of a thread.\n\nTarget users: only the author of the thread can update its title.'\n",
        "operationId": "updateThreadTitle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateThreadTitle"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionThreadBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update the title of a Thread.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/thread/{threadId}/unpin": {
      "parameters": [
        {
          "description": "The ID of a thread.",
          "in": "path",
          "name": "threadId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "This API is used to unpin a thread.\n\nTarget users: only forum's moderator can unpin a thread.\n",
        "operationId": "unpinThread",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Unpin a thread.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/thread/messageUrl": {
      "get": {
        "description": "This API is used to get the message URL of a thread. The message URL\nis the URL to download the file which contains the thread message.\n\nTarget users: anyone who has READ permission to the project.\n\nThe resulting URL will be signed with Content-Type =\"text/plain; charset=utf-8\";\ntherefore, this header must be included with the GET on the URL.\n",
        "operationId": "getThreadUrl",
        "parameters": [
          {
            "in": "query",
            "name": "messageKey",
            "description": "Message Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageURL"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the message URL of a thread.",
        "tags": [
          "Discussion Services"
        ]
      }
    },
    "/trashcan/purge/{id}": {
      "parameters": [
        {
          "description": "The ID of an entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Flags the specified entity for priority purge. The entity will be\ndeleted as soon as possible. Once purging is done, the entity\nwill be permanently deleted from the system.\n",
        "operationId": "flagForPurge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Flags the specified entity for priority purge.",
        "tags": [
          "Trash Services"
        ]
      }
    },
    "/trashcan/restore/{id}": {
      "parameters": [
        {
          "description": "The ID of an entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Moves an entity and its descendants out of the trash can back to its\noriginal parent. An exception is thrown if the original parent does not exist any more.\nIn that case, please use <a href=\"#operation/restoreFromTrash\">PUT /trashcan/restored/{id}/{parentId}</a>\nto restore to a new parent.  In such a case you must be a member of the Synapse Access\nand Compliance Team.\n",
        "operationId": "restoreFromTrash",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Moves an entity and its descendants out of the trash can back to its original\nparent.\n",
        "tags": [
          "Trash Services"
        ]
      }
    },
    "/trashcan/restore/{id}/{parentId}": {
      "parameters": [
        {
          "description": "The ID of a deleted entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the new parent entity.",
          "in": "path",
          "name": "parentId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Moves an entity and its descendants out of the trash can to a new\nparent.\n\nNOTE:  This operation cannot be completed if the original parent has been\ndeleted (unless the caller is a member of the Synapse Access and Compliance\nTeam).\nThe service will return a NotFoundException.  This is because of the potential\nsecurity hole arising from allowing access requirements\non folders:  If an entity is in a restricted folder and then deleted, it cannot\nbe restored unless the new parent has the same restriction level as the original\none.\n",
        "operationId": "restoreFromTrashToParent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Moves an entity and its descendants out of the trash can to a new parent.",
        "tags": [
          "Trash Services"
        ]
      }
    },
    "/trashcan/trash/{id}": {
      "parameters": [
        {
          "description": "The ID of an entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Moves an entity and its descendants to the trash can.",
        "operationId": "moveToTrash",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Moves an entity and its descendants to the trash can.",
        "tags": [
          "Trash Services"
        ]
      }
    },
    "/trashcan/view": {
      "get": {
        "description": "Retrieves the paginated list of trash entities deleted by the current\nuser.\n",
        "operationId": "viewTrash",
        "parameters": [
          {
            "description": "The maximum number of entities to retrieve per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "Paginated results. Offset to the current page.",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfTrashedEntity"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves the paginated list of trash entities deleted by the current user.",
        "tags": [
          "Trash Services"
        ]
      }
    },
    "/user": {
      "get": {
        "description": "Get all publicly available <a href=\"${org.sagebionetworks.repo.model.UserProfile}\">UserProfile</a>\ndata in the system\n",
        "operationId": "getUserProfilesPaginated",
        "parameters": [
          {
            "description": "Used to indicate whether the sort direction is ascending or not.",
            "in": "query",
            "name": "ascending",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Limits the number of items that will be fetched for this page\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "type": "integer"
            }
          },
          {
            "description": "The offset index determines where this page will start from. An index of 0 is the first item.",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "Used to indicate upon which field(s) to sort.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "description": "Get all publicly available <a href=\"${org.sagebionetworks.repo.model.UserProfile}\">UserProfile</a>\ndata in the system\n",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfUserProfile"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get all publicly available.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/user/{id}/bundle": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "The ID of the Synapse user.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the user bundle of a specified user.\n<p><b>Note:</b> Private fields (e.g. \"rStudioUrl\") are omitted unless the requester\nis the profile owner or an administrator.</p>\n",
        "operationId": "getUserBundleByOwnerId",
        "parameters": [
          {
            "description": "integer flag defining which components to include in the bundle\n<p>\nThis integer is used as a bit-string of flags to specify which parts to include\nin the UserBundle. The mask is defined as follows:\n<ul>\n<li> UserProfile  = 0x1 </li>\n<li> ORCID  = 0x2 </li>\n<li> VerificationSubmission = 0x4 </li>\n<li> Is Certified = 0x8 </li>\n<li> Is Verified  = 0x10 </li>\n<li> Is ACT Member = 0x20 </li>\n</ul>\n</p>\n",
            "in": "query",
            "name": "mask",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the user bundle of a specified user.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/user/{id}/certificationStatus": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "The ID of the Synapse user.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "setUserCertificationStatus",
        "summary": "Set certification status",
        "description": "Setting certification status.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "410": {
            "content": {},
            "description": "Success"
          }
        },
        "tags": [
          "Certified User Services"
        ]
      }
    },
    "/user/{id}/certifiedUserPassingRecord": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "The ID of the Synapse user.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the Passing Record on the User Certification test for the\ngiven user.\n",
        "operationId": "getPassingRecord",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PassingRecord"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the Passing Record on the User Certification test for the given\nuser.\n",
        "tags": [
          "Certified User Services"
        ]
      }
    },
    "/user/{id}/memberList": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Returns the TeamMember info for a user and a given list of Team IDs.\nNot Found status is returned if the user ID is invalid, any of the Team IDs\nare invalid, or the user is not in any of the given teams.\n",
        "operationId": "listTeamMembersGivenUserandTeamList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdList"
              }
            }
          },
          "description": "Team IDs",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWrapperOfTeamMember"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Returns the TeamMember info for a user and a given list of Team IDs.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/user/{id}/openInvitation": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the open invitations to a user, optionally filtering by the\nTeam of origin.\nAn invitation is only open if it has not expired and if the user has not joined\nthe Team.\nNote: certain fields may be omitted when returned if the field value is null\n",
        "operationId": "getOpenInvitationsByUser",
        "parameters": [
          {
            "description": "the maximum number of invitations to return.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "the starting index of the returned results.",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "the ID of the Team extending the invitations",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfMembershipInvitation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the open invitations to a user, optionally filtering by the Team\nof origin.\n",
        "tags": [
          "Membership Invitation Services"
        ]
      }
    },
    "/user/{id}/openRequest": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the open requests submitted by a user, optionally filtering\nby the Team.\nAn request is only open if it has not expired and if the requester has not been\nadded the Team.\nNote:  The 'id' in the URI must be the same ID as that of the authenticated\nuser issuing the request.\n",
        "operationId": "getOpenRequestsByUser",
        "parameters": [
          {
            "description": "the maximum number of requests to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "the starting index of the returned results.",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "teamId",
            "description": "ID of a Synapse Team.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfMembershipRequest"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the open requests submitted by a user, optionally filtering by\nthe Team.\n",
        "tags": [
          "Membership Request Services"
        ]
      }
    },
    "/user/{id}/team": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve a paginated list of Teams to which the given user belongs.",
        "operationId": "getTeamsByMember",
        "parameters": [
          {
            "description": "the maximum number of Teams to return (default 10)",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "the starting index of the returned results (default 0)",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfTeam"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a paginated list of Teams to which the given user belongs.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/user/{id}/team/id": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve a paginated list of IDs of Teams to which the given user\nbelongs. If sorting is desired, both sort and\nascending must be specified. If they are omitted, results are not sorted.\n",
        "operationId": "getTeamIdsByMember",
        "parameters": [
          {
            "description": "the direction of sort: true for ascending, and false for descending",
            "in": "query",
            "name": "ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "controls pagination",
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the field to sort the team IDs on. Available options\n<a href=\"${org.sagebionetworks.repo.model.TeamSortOrder}\">TeamSortOrder</a>\n",
            "in": "query",
            "name": "sort",
            "schema": {
              "enum": [
                "TEAM_NAME"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTeamIds"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a paginated list of IDs of Teams to which the given user belongs.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/user/bundle": {
      "get": {
        "description": "Get the user bundle of the caller (my own bundle).\n<p><b>Note:</b> Private fields will be returned.</p>\n",
        "operationId": "getMyOwnUserBundle",
        "parameters": [
          {
            "description": "integer flag defining which components to include in the bundle\n<p>\nThis integer is used as a bit-string of flags to specify which parts to include\nin the UserBundle. The mask is defined as follows:\n<ul>\n<li> UserProfile  = 0x1 </li>\n<li> ORCID  = 0x2 </li>\n<li> VerificationSubmission = 0x4 </li>\n<li> Is Certified = 0x8 </li>\n<li> Is Verified  = 0x10 </li>\n<li> Is ACT Member = 0x20 </li>\n</ul>\n</p>\n",
            "in": "query",
            "name": "mask",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the user bundle of the caller (my own bundle).",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userGroup": {
      "get": {
        "description": "Get the user-groups in the system",
        "operationId": "getUserGroups",
        "parameters": [
          {
            "in": "query",
            "description": "Return results in ascending order.",
            "name": "ascending",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "the maximum number of results to return.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "the starting index of the returned results.",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort results.",
            "schema": {
              "default": "NONE",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "description": "Get the user-groups in the system",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfUserGroup"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the user-groups in the system.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userGroupHeaders": {
      "get": {
        "description": "Get Users and Groups that match the given prefix.",
        "operationId": "getUserGroupHeadersByPrefix",
        "parameters": [
          {
            "description": "Limits the number of items that will be fetched for this page.\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first item.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 10
            }
          },
          {
            "description": "The name to search for.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Restrict the results to a type of principal.\nAvailable options: <a href=\"${org.sagebionetworks.repo.model.principal.TypeFilter}\">TypeFilter</a>.'\n",
            "in": "query",
            "name": "typeFilter",
            "schema": {
              "enum": [
                "ALL",
                "TEAMS_ONLY",
                "USERS_ONLY"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupHeaderResponsePage"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get Users and Groups that match the given prefix.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userGroupHeaders/aliases": {
      "post": {
        "description": "Get Users and Groups that match the given list of aliases.",
        "operationId": "getUserGroupHeadersByAliases",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AliasList"
              }
            }
          },
          "description": "The list of principal aliases to lookup. Each alias must be\neither a user name or team name. The maximum number of aliases per request is\n100.\n",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupHeaderResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get Users and Groups that match the given list of aliases.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userGroupHeaders/batch": {
      "get": {
        "description": "Batch get UserGroupHeaders.\nThis fetches information about a collection of users or groups, specified by Synapse\nIDs.\n",
        "operationId": "getUserGroupHeadersByIds",
        "parameters": [
          {
            "description": "IDs are specified as request parameters at the end of the URL, separated\nby commas. For example: ids=1001,819\n",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "description": "Batch get UserGroupHeaders.\nThis fetches information about a collection of users or groups, specified by\nSynapse IDs.\n",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupHeaderResponsePage"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Batch get UserGroupHeaders.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userProfile": {
      "get": {
        "description": "Get the profile of the caller (my profile).\n<p><b>Note:</b> Private user profile fields will be returned.</p>'\n",
        "operationId": "getMyOwnUserProfile",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the profile of the caller (my profile).",
        "tags": [
          "User Profile Services"
        ]
      },
      "post": {
        "description": "Batch get UserGroupHeaders.\nThis fetches information about a collection of users or groups, specified by Synapse\nIDs.'\n",
        "operationId": "listUserProfiles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdList"
              }
            }
          },
          "description": "IDs are specified as request parameters at the end of the URL, separated\nby commas. For example: ids=1001,819\n",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWrapperOfUserProfile"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Batch get UserGroupHeaders.",
        "tags": [
          "User Profile Services"
        ]
      },
      "put": {
        "description": "Update your own profile\n\n<p><b>Note: </b> The user associated with the UserProfile \"ownerId\" must match\nthe identity of the caller,\notherwise an Unauthorized response will occur.</p>\n",
        "operationId": "updateUserProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update your own profile.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userProfile/{profileId}": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "profileId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the profile of a specified user.\n<p><b>Note:</b> Private fields (e.g. \"rStudioUrl\") are omitted unless the requester\nis the profile owner or an administrator.</p>'\n",
        "operationId": "getUserProfile",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the profile of a specified user.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userProfile/{profileId}/image": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "profileId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the actual URL of the image file associated with a user's profile.\n<p>\nNote: This call will result in a HTTP temporary redirect (307), to the\nactual file URL if the caller meets all of the download requirements.\n</p>\n",
        "operationId": "imageRedirectUrlForUser",
        "parameters": [
          {
            "description": "When set to false, the URL will be returned as text/plain\ninstead of redirecting.\n",
            "in": "query",
            "name": "redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the actual URL of the image file associated with a user's profile.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userProfile/{profileId}/image/preview": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "profileId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the actual URL of the image file associated with a user''s profile.\n<p>\nNote: This call will result in a HTTP temporary redirect (307), to the\nactual file URL if the caller meets all of the download requirements.\n</p>\n",
        "operationId": "imagePreviewRedirectUrlForUser",
        "parameters": [
          {
            "description": "When set to false, the URL will be returned as text/plain\ninstead of redirecting.\n",
            "in": "query",
            "name": "redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the actual URL of the image file associated with a user's profile.",
        "tags": [
          "User Profile Services"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Etag": {
        "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle\nconcurrent updates. Since the E-Tag changes every time an entity is updated\nit is used to detect when a client's current representation of an entity is\nout-of-date.\n",
        "type": "string"
      },
      "ApprovalState": {
        "description": "JSON enum for the state of AccessApproval",
        "enum": [
          "APPROVED",
          "REVOKED"
        ],
        "title": "ApprovalState",
        "type": "string"
      },
      "AccessApproval": {
        "description": "JSON schema for AccessApproval POJO",
        "example": {
          "accessorId": "...",
          "createdBy": "...",
          "createdOn": "...",
          "etag": "...",
          "expiredOn": "...",
          "id": 12345,
          "modifiedBy": "...",
          "modifiedOn": "...",
          "requirementId": 12345,
          "requirementVersion": 12345,
          "state": "APPROVED",
          "submitterId": "..."
        },
        "properties": {
          "accessorId": {
            "description": "The ID of the principal (user or group) approved for access",
            "type": "string"
          },
          "createdBy": {
            "description": "The user that created this object.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this object was created.",
            "type": "string"
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "expiredOn": {
            "description": "The date this object will be expired.",
            "type": "string"
          },
          "id": {
            "description": "The unique immutable ID",
            "type": "integer"
          },
          "modifiedBy": {
            "description": "The user that last modified this object.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date this object was last modified.",
            "type": "string"
          },
          "requirementId": {
            "description": "The ID of the Access Requirement.",
            "type": "integer"
          },
          "requirementVersion": {
            "description": "The version of the Access Requirement.",
            "type": "integer"
          },
          "state": {
            "$ref": "#/components/schemas/ApprovalState"
          },
          "submitterId": {
            "description": "The user who performed the necessary action(s) to gain this approval.",
            "type": "string"
          }
        },
        "title": "AccessApproval",
        "type": "object"
      },
      "String": {
        "description": "String value",
        "type": "string"
      },
      "AccessorGroupRequest": {
        "description": "A request to retrieve a page of accessor groups. Accessors will be group by submitter and access requirement.",
        "example": {
          "accessRequirementId": "...",
          "expireBefore": "...",
          "nextPageToken": "...",
          "submitterId": "..."
        },
        "properties": {
          "accessRequirementId": {
            "description": "The condition to filter by AccessRequirement. Use null to ignore this filter.'\n",
            "type": "string"
          },
          "expireBefore": {
            "description": "The condition to filter by expiration. Use null to ignore this filter.'\n",
            "type": "string"
          },
          "nextPageToken": {
            "description": "The token to get the next page result. Use null to get the first page.'\n",
            "type": "string"
          },
          "submitterId": {
            "description": "The condition to filter by submitter. Use null to ignore this filter.'\n",
            "type": "string"
          }
        },
        "title": "AccessorGroupRequest",
        "type": "object"
      },
      "AccessorGroup": {
        "description": "A group of accessors who gained access by the same submitter.",
        "example": {
          "accessRequirementId": "...",
          "accessorIds": [
            "...",
            "..."
          ],
          "expiredOn": "...",
          "submitterId": "..."
        },
        "properties": {
          "accessRequirementId": {
            "description": "The ID of an AccessRequirement.",
            "type": "string"
          },
          "accessorIds": {
            "description": "The ID of accessors.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "expiredOn": {
            "description": "The date this group will be expired.",
            "type": "string"
          },
          "submitterId": {
            "description": "The ID of the submitter.",
            "type": "string"
          }
        },
        "title": "AccessorGroup",
        "type": "object"
      },
      "AccessorGroupResponse": {
        "description": "A page of AccessorGroup.",
        "example": {
          "nextPageToken": "...",
          "results": [
            {
              "accessRequirementId": "...",
              "accessorIds": [
                "...",
                "..."
              ],
              "expiredOn": "...",
              "submitterId": "..."
            },
            {
              "accessRequirementId": "...",
              "accessorIds": [
                "...",
                "..."
              ],
              "expiredOn": "...",
              "submitterId": "..."
            }
          ]
        },
        "properties": {
          "nextPageToken": {
            "description": "The token to get the next page result.",
            "type": "string"
          },
          "results": {
            "description": "A page of AccessorGroup.",
            "items": {
              "$ref": "#/components/schemas/AccessorGroup"
            },
            "type": "array"
          }
        },
        "title": "AccessorGroupResponse",
        "type": "object"
      },
      "BatchAccessApprovalInfoRequest": {
        "description": "Request for a batch of AccessApprovalInfo.",
        "example": {
          "accessRequirementIds": [
            "...",
            "..."
          ],
          "userId": "..."
        },
        "properties": {
          "accessRequirementIds": {
            "description": "The ID of the access requirements.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "userId": {
            "description": "The ID of the user.",
            "type": "string"
          }
        },
        "title": "BatchAccessApprovalInfoRequest",
        "type": "object"
      },
      "AccessApprovalInfo": {
        "description": "Information about whether or not a user has an AccessApproval\nfor an AccessRequirement.\n",
        "example": {
          "accessRequirementId": "...",
          "hasAccessApproval": true,
          "userId": "..."
        },
        "properties": {
          "accessRequirementId": {
            "description": "The ID of the access requirement.",
            "type": "string"
          },
          "hasAccessApproval": {
            "description": "True if userId has an AccessApproval for the specified accessRequirementId; false otherwise.",
            "type": "boolean"
          },
          "userId": {
            "description": "The ID of the user.",
            "type": "string"
          }
        },
        "title": "AccessApprovalInfo",
        "type": "object"
      },
      "BatchAccessApprovalInfoResponse": {
        "description": "Response for an AccessApprovalInfoRequest.",
        "example": {
          "results": [
            {
              "accessRequirementId": "...",
              "hasAccessApproval": true,
              "userId": "..."
            },
            {
              "accessRequirementId": "...",
              "hasAccessApproval": true,
              "userId": "..."
            }
          ]
        },
        "properties": {
          "results": {
            "description": "The list of resulting AccessApprovalInfo.",
            "items": {
              "$ref": "#/components/schemas/AccessApprovalInfo"
            },
            "type": "array"
          }
        },
        "title": "BatchAccessApprovalInfoResponse",
        "type": "object"
      },
      "AccessApprovalNotificationRequest": {
        "description": "A request to retrieve the notifications for an access requirement and a list of recipients.",
        "example": {
          "recipientIds": [
            12345,
            12345
          ],
          "requirementId": 12345
        },
        "properties": {
          "recipientIds": {
            "description": "The list of recipient ids.",
            "items": {
              "type": "number"
            },
            "type": "array",
            "maxItems": 25
          },
          "requirementId": {
            "description": "The id of the access requirement.",
            "type": "number"
          }
        },
        "title": "AccessApprovalNotificationRequest",
        "type": "object"
      },
      "NotificationType": {
        "description": "Access Restriction Notification Type",
        "enum": [
          "REVOCATION",
          "FIRST_RENEWAL_REMINDER",
          "SECOND_RENEWAL_REMINDER"
        ],
        "title": "NotificationType",
        "type": "string"
      },
      "AccessApprovalNotification": {
        "description": "Information about the a notification for an access approval.",
        "example": {
          "notificationType": "FIRST_RENEWAL_REMINDER",
          "recipientId": 12345,
          "requirementId": 12345,
          "sentOn": "..."
        },
        "properties": {
          "notificationType": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "recipientId": {
            "description": "The id of the recipient.",
            "type": "number"
          },
          "requirementId": {
            "description": "The id of the access requirement.",
            "type": "number"
          },
          "sentOn": {
            "description": "When the notification was sent.",
            "type": "string"
          }
        },
        "title": "AccessApprovalNotification",
        "type": "object"
      },
      "AccessApprovalNotificationResponse": {
        "description": "Contains the response for an AccessApprovalNotificationRequest.",
        "example": {
          "requirementId": 12345,
          "results": [
            {
              "notificationType": "REVOCATION",
              "recipientId": 12345,
              "requirementId": 12345,
              "sentOn": "..."
            },
            {
              "notificationType": "REVOCATION",
              "recipientId": 12345,
              "requirementId": 12345,
              "sentOn": "..."
            }
          ]
        },
        "properties": {
          "requirementId": {
            "description": "The id of the requested access requirement.",
            "type": "number"
          },
          "results": {
            "description": "The list of notifications, sorted by the recipient and the sentOn date.",
            "items": {
              "$ref": "#/components/schemas/AccessApprovalNotification"
            },
            "type": "array"
          }
        },
        "title": "AccessApprovalNotificationResponse",
        "type": "object"
      },
      "ACCESS_TYPE": {
        "title": "ACCESS_TYPE",
        "type": "string",
        "description": "The enumeration of possible permission.",
        "enum": [
          "CREATE",
          "READ",
          "UPDATE",
          "DELETE",
          "CHANGE_PERMISSIONS",
          "DOWNLOAD",
          "UPLOAD",
          "PARTICIPATE",
          "SUBMIT",
          "READ_PRIVATE_SUBMISSION",
          "UPDATE_SUBMISSION",
          "DELETE_SUBMISSION",
          "TEAM_MEMBERSHIP_UPDATE",
          "SEND_MESSAGE",
          "CHANGE_SETTINGS",
          "MODERATE"
        ]
      },
      "RestrictableObjectType": {
        "description": "JSON enum for the types of objects which can be restricted by an AccessRequirement.",
        "enum": [
          "ENTITY",
          "EVALUATION",
          "TEAM"
        ],
        "title": "RestrictableObjectType",
        "type": "string"
      },
      "RestrictableObjectDescriptor": {
        "description": "Restrictable object descriptor",
        "example": {
          "id": "...",
          "type": "EVALUATION"
        },
        "properties": {
          "id": {
            "description": "Id",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RestrictableObjectType"
          }
        },
        "title": "RestrictableObjectDescriptor",
        "type": "object"
      },
      "AccessRequirement": {
        "description": "Interface for JSON schema for AccessRequirement. The Access Requirement mechanism is\ndistinct from the access control list in that it is controlled not by the entity\nowner but by a separate authority: Access Requirements are created and maintained\nby the Synapse Access and Compliance Team (ACT). ACTAccessRequirements can only be\napproved by the ACT. Self-sign Access Requirements can be approved by the user\ndesiring access, but said user first has to meet 'terms of use' associated with the requirement.\n",
        "example": {
          "accessType": "SUBMIT",
          "concreteType": "...",
          "createdBy": "...",
          "createdOn": "...",
          "description": "...",
          "etag": "...",
          "id": 12345,
          "modifiedBy": "...",
          "modifiedOn": "...",
          "subjectIds": [
            {
              "id": "...",
              "type": "EVALUATION"
            },
            {
              "id": "...",
              "type": "TEAM"
            }
          ],
          "versionNumber": 12345
        },
        "properties": {
          "accessType": {
            "$ref": "#/components/schemas/ACCESS_TYPE"
          },
          "concreteType": {
            "description": "Indicates which type of AccessRequirement this object represents. Provided by the system, the user may not set this field.",
            "type": "string"
          },
          "createdBy": {
            "description": "The user that created this object. Provided by the system, the user may not set this field.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this object was created. Provided by the system, the user may not set this field.",
            "type": "string"
          },
          "description": {
            "description": "Short optional description for the AR. Limited to 50 characters.",
            "type": "string"
          },
          "etag": {
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent\nupdates. Since the E-Tag changes every time an entity is updated it is used to\ndetect when a client's current representation of an object is out-of-date.\n",
            "type": "string"
          },
          "id": {
            "description": "The unique immutable ID. Provided by the system, the user may not set this field.",
            "type": "number"
          },
          "modifiedBy": {
            "description": "The user that last modified this object. Provided by the system, the user may not set this field.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date this object was last modified. Provided by the system, the user may not set this field.",
            "type": "string"
          },
          "subjectIds": {
            "description": "The IDs of the items controlled by this Access Requirement. Required when creating or updating.",
            "items": {
              "$ref": "#/components/schemas/RestrictableObjectDescriptor"
            },
            "type": "array"
          },
          "versionNumber": {
            "description": "The version number issued to this version on the object.",
            "type": "integer"
          }
        },
        "title": "AccessRequirement",
        "type": "object"
      },
      "SubmissionInfoPageRequest": {
        "description": "A request to retrieve a page of Submission Information",
        "example": {
          "accessRequirementId": "...",
          "nextPageToken": "..."
        },
        "properties": {
          "accessRequirementId": {
            "description": "The ID of an AccessRequirement.",
            "type": "string"
          },
          "nextPageToken": {
            "description": "The token to get the next page result.",
            "type": "string"
          }
        },
        "title": "SubmissionInfoPageRequest",
        "type": "object"
      },
      "SubmissionInfo": {
        "description": "Information about a request to access controlled data and its related Research Project",
        "example": {
          "institution": "...",
          "intendedDataUseStatement": "...",
          "modifiedOn": "...",
          "projectLead": "..."
        },
        "properties": {
          "institution": {
            "description": "The institution that the research project belongs to.",
            "type": "string"
          },
          "intendedDataUseStatement": {
            "description": "A few short paragraph that explains how the controlled data will be used.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date the request submission was last modified.",
            "type": "string"
          },
          "projectLead": {
            "description": "The person who is leading the research project.",
            "type": "string"
          }
        },
        "title": "SubmissionInfo",
        "type": "object"
      },
      "SubmissionInfoPage": {
        "description": "A page of Submission Information",
        "example": {
          "nextPageToken": "...",
          "results": [
            {
              "institution": "...",
              "intendedDataUseStatement": "...",
              "modifiedOn": "...",
              "projectLead": "..."
            },
            {
              "institution": "...",
              "intendedDataUseStatement": "...",
              "modifiedOn": "...",
              "projectLead": "..."
            }
          ]
        },
        "properties": {
          "nextPageToken": {
            "description": "The token to get the next page result.",
            "type": "string"
          },
          "results": {
            "description": "A page of Submission Information",
            "items": {
              "$ref": "#/components/schemas/SubmissionInfo"
            },
            "type": "array"
          }
        },
        "title": "SubmissionInfoPage",
        "type": "object"
      },
      "AccessType": {
        "description": "The type of access change for this user. Users can gain access, renew access, or have access revoked.",
        "enum": [
          "GAIN_ACCESS",
          "RENEW_ACCESS",
          "REVOKE_ACCESS"
        ],
        "title": "AccessType",
        "type": "string"
      },
      "AccessorChange": {
        "description": "Request for a single user change access to a resource.",
        "example": {
          "type": "RENEW_ACCESS",
          "userId": "..."
        },
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AccessType"
          },
          "userId": {
            "description": "The ID of the user.",
            "type": "string"
          }
        },
        "title": "AccessorChange",
        "type": "object"
      },
      "RequestInterface": {
        "description": "This is the base interface that all Request implements.",
        "example": {
          "accessRequirementId": "...",
          "accessorChanges": [
            {
              "type": "RENEW_ACCESS",
              "userId": "..."
            },
            {
              "type": "RENEW_ACCESS",
              "userId": "..."
            }
          ],
          "attachments": [
            "...",
            "..."
          ],
          "concreteType": "...",
          "createdBy": "...",
          "createdOn": 12345,
          "ducFileHandleId": "...",
          "etag": "...",
          "id": "...",
          "irbFileHandleId": "...",
          "modifiedBy": "...",
          "modifiedOn": 12345,
          "researchProjectId": "..."
        },
        "properties": {
          "accessRequirementId": {
            "description": "The ID of the Access Requirement which requires a request to be\nsubmitted to gain access to a dataset. This request contains information\nthat satisfies those requirements.\n",
            "type": "string"
          },
          "accessorChanges": {
            "description": "List of user changes. A user can gain access, renew access or have access revoked.",
            "items": {
              "$ref": "#/components/schemas/AccessorChange"
            },
            "type": "array"
          },
          "attachments": {
            "description": "The set of file handle ID of attached files to this request.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "concreteType": {
            "description": "Indicates which implementation of RequestInterface this object represents.",
            "type": "string"
          },
          "createdBy": {
            "description": "The ID of the user that created this request.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this request was created.",
            "type": "number"
          },
          "ducFileHandleId": {
            "description": "The Data Use Certificate uploaded by user.",
            "type": "string"
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "id": {
            "description": "The unique immutable ID for this request. A new ID will be generated\nfor new Request. Once issued, this ID is guaranteed to never change\nor be re-issued.\n",
            "type": "string"
          },
          "irbFileHandleId": {
            "description": "The Institutional Review Board Approval document uploaded by user.",
            "type": "string"
          },
          "modifiedBy": {
            "description": "The ID of the user that last modified this request.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date this request was last modified.",
            "type": "number"
          },
          "researchProjectId": {
            "description": "The ID of the research project associated with this request.",
            "type": "string"
          }
        },
        "title": "RequestInterface",
        "type": "object"
      },
      "ResearchProject": {
        "description": "A research project describes a project at an institution that used a controlled data set for the purposes that are stated in the Intended Data Use Statement.",
        "example": {
          "accessRequirementId": "...",
          "createdBy": "...",
          "createdOn": "...",
          "etag": "...",
          "id": "...",
          "institution": "...",
          "intendedDataUseStatement": "...",
          "modifiedBy": "...",
          "modifiedOn": "...",
          "projectLead": "..."
        },
        "properties": {
          "accessRequirementId": {
            "description": "The ID of the Access Requirement which this research project needs to meet to gain access to the data.",
            "type": "string"
          },
          "createdBy": {
            "description": "The ID of the user that created this research project.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this research project was created.",
            "type": "string"
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "id": {
            "description": "The unique immutable ID for this research project.",
            "type": "string"
          },
          "institution": {
            "description": "The institution that this research project belongs to.",
            "type": "string"
          },
          "intendedDataUseStatement": {
            "description": "A few short paragraph that explains how the controlled data will be used.",
            "type": "string"
          },
          "modifiedBy": {
            "description": "The ID of the user that last modified this research project.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date this research project was last modified.",
            "type": "string"
          },
          "projectLead": {
            "description": "The person who is leading the project.",
            "type": "string"
          }
        },
        "title": "ResearchProject",
        "type": "object"
      },
      "AccessRequirementStatus": {
        "description": "The status of a user meeting an AccessRequirement.",
        "example": {
          "accessRequirementId": "...",
          "concreteType": "...",
          "expiredOn": "...",
          "isApproved": true
        },
        "properties": {
          "accessRequirementId": {
            "description": "The ID of the requested AccessRequirement.",
            "type": "string"
          },
          "concreteType": {
            "description": "Indicates which implementation of AccessRequirementStatus this object represents.",
            "type": "string"
          },
          "expiredOn": {
            "description": "The date that the user no longer have access to the data.",
            "type": "string"
          },
          "isApproved": {
            "description": "True if there is an AccessApproval for the user for the given AccessRequirement.",
            "type": "boolean"
          }
        },
        "title": "AccessRequirementStatus",
        "type": "object"
      },
      "RestrictableObjectDescriptorResponse": {
        "description": "A page of subjects",
        "example": {
          "nextPageToken": "...",
          "subjects": [
            {
              "id": "...",
              "type": "TEAM"
            },
            {
              "id": "...",
              "type": "EVALUATION"
            }
          ]
        },
        "properties": {
          "nextPageToken": {
            "description": "Token that can be used to get the next page. Null if there are no more results.",
            "type": "string"
          },
          "subjects": {
            "description": "a page of subjects",
            "items": {
              "$ref": "#/components/schemas/RestrictableObjectDescriptor"
            },
            "type": "array"
          }
        },
        "title": "RestrictableObjectDescriptorResponse",
        "type": "object"
      },
      "SubmissionState": {
        "description": "The state of a Submission.",
        "enum": [
          "SUBMITTED",
          "APPROVED",
          "REJECTED",
          "CANCELLED"
        ],
        "title": "SubmissionState",
        "type": "string"
      },
      "SubmissionOrder": {
        "description": "Submission Order",
        "enum": [
          "CREATED_ON",
          "MODIFIED_ON"
        ],
        "title": "SubmissionOrder",
        "type": "string"
      },
      "SubmissionPageRequest": {
        "description": "A request to retrieve a page of a Submission.",
        "example": {
          "accessRequirementId": "...",
          "filterBy": "APPROVED",
          "isAscending": true,
          "nextPageToken": "...",
          "orderBy": "MODIFIED_ON"
        },
        "properties": {
          "accessRequirementId": {
            "description": "The ID of an AccessRequirement.",
            "type": "string"
          },
          "filterBy": {
            "$ref": "#/components/schemas/SubmissionState"
          },
          "isAscending": {
            "description": "If true, order the returned result in ascending order. Otherwise, order the returned result in descending order.",
            "type": "boolean"
          },
          "nextPageToken": {
            "description": "The token to get the next page result.",
            "type": "string"
          },
          "orderBy": {
            "$ref": "#/components/schemas/SubmissionOrder"
          }
        },
        "title": "SubmissionPageRequest",
        "type": "object"
      },
      "Submission": {
        "description": "A submission to request access to controlled data.",
        "example": {
          "accessRequirementId": "...",
          "accessRequirementVersion": 12345,
          "accessorChanges": [
            {
              "type": "REVOKE_ACCESS",
              "userId": "..."
            },
            {
              "type": "REVOKE_ACCESS",
              "userId": "..."
            }
          ],
          "attachments": [
            "...",
            "..."
          ],
          "ducFileHandleId": "...",
          "etag": "...",
          "id": "...",
          "irbFileHandleId": "...",
          "isRenewalSubmission": true,
          "modifiedBy": "...",
          "modifiedOn": "...",
          "publication": "...",
          "rejectedReason": "...",
          "requestId": "...",
          "researchProjectSnapshot": {
            "accessRequirementId": "...",
            "createdBy": "...",
            "createdOn": "...",
            "etag": "...",
            "id": "...",
            "institution": "...",
            "intendedDataUseStatement": "...",
            "modifiedBy": "...",
            "modifiedOn": "...",
            "projectLead": "..."
          },
          "state": "SUBMITTED",
          "subjectId": "...",
          "subjectType": "TEAM",
          "submittedBy": "...",
          "submittedOn": "...",
          "summaryOfUse": "..."
        },
        "properties": {
          "accessRequirementId": {
            "description": "The ID of the Access Requirement which requires a request to be submitted to gain access to a dataset. This submission contains information that satisfies those requirements.",
            "type": "string"
          },
          "accessRequirementVersion": {
            "description": "The version of the Access Requirement which requires a request to be submitted to gain access to a dataset. This submission contains information that satisfies those requirements.",
            "type": "integer"
          },
          "accessorChanges": {
            "description": "List of user changes. A user can gain access, renew access or have access revoked.",
            "items": {
              "$ref": "#/components/schemas/AccessorChange"
            },
            "type": "array"
          },
          "attachments": {
            "description": "The set of file handle ID of attached files to this request.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ducFileHandleId": {
            "description": "The Data Use Certificate uploaded by user.",
            "type": "string"
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "id": {
            "description": "The unique immutable ID for this submission. A new ID will be generated for new Submission. Once issued, this ID is guaranteed to never change or be re-issued.",
            "type": "string"
          },
          "irbFileHandleId": {
            "description": "The Institutional Review Board Approval document uploaded by user.",
            "type": "string"
          },
          "isRenewalSubmission": {
            "description": "True if this submission is a renewal submission.",
            "type": "boolean"
          },
          "modifiedBy": {
            "description": "The ID of the user that last modified the status of this submission.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date this submission was reviewed or was cancelled.",
            "type": "string"
          },
          "publication": {
            "description": "Link(s) to publication that used the controlled data.",
            "type": "string"
          },
          "rejectedReason": {
            "description": "The reason this submission is rejected, if it's rejected.\n",
            "type": "string"
          },
          "requestId": {
            "description": "The ID of the Request which is used to create this submission.",
            "type": "string"
          },
          "researchProjectSnapshot": {
            "$ref": "#/components/schemas/ResearchProject"
          },
          "state": {
            "$ref": "#/components/schemas/SubmissionState"
          },
          "subjectId": {
            "description": "The ID of the subject user interested in. This information will be used to help user navigate back to where they were to continue their work.",
            "type": "string"
          },
          "subjectType": {
            "$ref": "#/components/schemas/RestrictableObjectType"
          },
          "submittedBy": {
            "description": "The ID of the user that submit this submission.",
            "type": "string"
          },
          "submittedOn": {
            "description": "The date this submission was created.",
            "type": "string"
          },
          "summaryOfUse": {
            "description": "Summary of how the data has been used.",
            "type": "string"
          }
        },
        "title": "Submission",
        "type": "object"
      },
      "SubmissionPage": {
        "description": "Page of AR submissions",
        "example": {
          "nextPageToken": "...",
          "results": [
            {
              "accessRequirementId": "...",
              "accessRequirementVersion": 12345,
              "accessorChanges": [
                {
                  "type": "GAIN_ACCESS",
                  "userId": "..."
                },
                {
                  "type": "REVOKE_ACCESS",
                  "userId": "..."
                }
              ],
              "attachments": [
                "...",
                "..."
              ],
              "ducFileHandleId": "...",
              "etag": "...",
              "id": "...",
              "irbFileHandleId": "...",
              "isRenewalSubmission": true,
              "modifiedBy": "...",
              "modifiedOn": "...",
              "publication": "...",
              "rejectedReason": "...",
              "requestId": "...",
              "researchProjectSnapshot": {
                "accessRequirementId": "...",
                "createdBy": "...",
                "createdOn": "...",
                "etag": "...",
                "id": "...",
                "institution": "...",
                "intendedDataUseStatement": "...",
                "modifiedBy": "...",
                "modifiedOn": "...",
                "projectLead": "..."
              },
              "state": "REJECTED",
              "subjectId": "...",
              "subjectType": "EVALUATION",
              "submittedBy": "...",
              "submittedOn": "...",
              "summaryOfUse": "..."
            },
            {
              "accessRequirementId": "...",
              "accessRequirementVersion": 12345,
              "accessorChanges": [
                {
                  "type": "GAIN_ACCESS",
                  "userId": "..."
                },
                {
                  "type": "RENEW_ACCESS",
                  "userId": "..."
                }
              ],
              "attachments": [
                "...",
                "..."
              ],
              "ducFileHandleId": "...",
              "etag": "...",
              "id": "...",
              "irbFileHandleId": "...",
              "isRenewalSubmission": true,
              "modifiedBy": "...",
              "modifiedOn": "...",
              "publication": "...",
              "rejectedReason": "...",
              "requestId": "...",
              "researchProjectSnapshot": {
                "accessRequirementId": "...",
                "createdBy": "...",
                "createdOn": "...",
                "etag": "...",
                "id": "...",
                "institution": "...",
                "intendedDataUseStatement": "...",
                "modifiedBy": "...",
                "modifiedOn": "...",
                "projectLead": "..."
              },
              "state": "APPROVED",
              "subjectId": "...",
              "subjectType": "ENTITY",
              "submittedBy": "...",
              "submittedOn": "...",
              "summaryOfUse": "..."
            }
          ]
        },
        "properties": {
          "nextPageToken": {
            "description": "The token to get the next page result.",
            "type": "string"
          },
          "results": {
            "description": "Page of AR submissions",
            "items": {
              "$ref": "#/components/schemas/Submission"
            },
            "type": "array"
          }
        },
        "title": "SubmissionPage",
        "type": "object"
      },
      "AccessRequirementConversionRequest": {
        "description": "A request to convert an ACTAccessRequirement to a ManagedACTAccessRequirement.",
        "example": {
          "accessRequirementId": "...",
          "currentVersion": 12345,
          "etag": "..."
        },
        "properties": {
          "accessRequirementId": {
            "description": "The ID of an ACTAccessRequirement.",
            "type": "string"
          },
          "currentVersion": {
            "description": "The current version of the AccessRequirement. This field is used for concurrency check.",
            "type": "number"
          },
          "etag": {
            "description": "The etag of the AccessRequirement. This field is used for concurrency check.",
            "type": "string"
          }
        },
        "title": "AccessRequirementConversionRequest",
        "type": "object"
      },
      "Empty": {
        "type": "object"
      },
      "Used": {
        "description": "Interface for JSON schema for a Used record in Provenance",
        "example": {
          "concreteType": "...",
          "wasExecuted": true
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "wasExecuted": {
            "description": "The enclosed entity was used and also executed in the Activity",
            "type": "boolean"
          }
        },
        "title": "Used",
        "type": "object"
      },
      "Activity": {
        "description": "Interface for JSON schema for Activity POJO.",
        "example": {
          "createdBy": "...",
          "createdOn": "...",
          "description": "...",
          "etag": "...",
          "id": "...",
          "modifiedBy": "...",
          "modifiedOn": "...",
          "name": "...",
          "used": [
            {
              "concreteType": "...",
              "wasExecuted": true
            },
            {
              "concreteType": "...",
              "wasExecuted": true
            }
          ]
        },
        "properties": {
          "createdBy": {
            "description": "The user that created this object.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this object was created.",
            "type": "string"
          },
          "description": {
            "description": "A description of this Activity.",
            "type": "string"
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "id": {
            "description": "The unique immutable ID",
            "type": "string"
          },
          "modifiedBy": {
            "description": "The user that last modified this object.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date this object was last modified.",
            "type": "string"
          },
          "name": {
            "description": "A name for this Activity.",
            "type": "string"
          },
          "used": {
            "description": "The entities used by this Activity.",
            "items": {
              "$ref": "#/components/schemas/Used"
            },
            "type": "array"
          }
        },
        "title": "Activity",
        "type": "object"
      },
      "Reference": {
        "description": "JSON schema for Reference POJO",
        "example": {
          "targetId": "...",
          "targetVersionNumber": 12345
        },
        "properties": {
          "targetId": {
            "description": "The the id of the entity to which this reference refers",
            "type": "string"
          },
          "targetVersionNumber": {
            "description": "The version number of the entity to which this reference refers",
            "type": "number"
          }
        },
        "title": "Reference",
        "type": "object"
      },
      "TotalNumberOfResults": {
        "description": "Calculating the actual totalNumberOfResults is not longer supported.\nTherefore, for each page, the totalNumberOfResults is estimated using the current page,\nlimit, and offset. When the page size equals the limit, the totalNumberOfResults will\nbe offset+pageSize+ 1. Otherwise, the totalNumberOfResults will be offset+pageSize.\n",
        "type": "integer"
      },
      "PaginatedResultsOfReference": {
        "description": "Page of References.",
        "example": {
          "results": [
            {
              "targetId": "...",
              "targetVersionNumber": 12345
            },
            {
              "targetId": "...",
              "targetVersionNumber": 12345
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "Page of References",
            "items": {
              "$ref": "#/components/schemas/Reference"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfReference",
        "type": "object"
      },
      "AsynchronousRequestBody": {
        "description": "The body of an Asynchronous job request.",
        "example": {
          "concreteType": "..."
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          }
        },
        "title": "AsynchronousRequestBody",
        "type": "object"
      },
      "AsynchJobState": {
        "description": "The job's state\n",
        "enum": [
          "PROCESSING",
          "FAILED",
          "COMPLETE"
        ],
        "title": "AsynchJobState",
        "type": "string"
      },
      "AsynchronousResponseBody": {
        "description": "The body of an Asynchronous job response.",
        "example": {
          "concreteType": "..."
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          }
        },
        "title": "AsynchronousResponseBody",
        "type": "object"
      },
      "AsynchronousJobStatus": {
        "description": "Object used to track the status of an Asynchronous Job.",
        "example": {
          "changedOn": "...",
          "errorDetails": "...",
          "errorMessage": "...",
          "etag": "...",
          "exception": "...",
          "jobCanceling": true,
          "jobId": "...",
          "jobState": "PROCESSING",
          "progressCurrent": 12345,
          "progressMessage": "...",
          "progressTotal": 12345,
          "requestBody": {
            "concreteType": "..."
          },
          "responseBody": {
            "concreteType": "..."
          },
          "runtimeMS": 12345,
          "startedByUserId": 12345,
          "startedOn": "..."
        },
        "properties": {
          "changedOn": {
            "description": "The date-time when the status of this table last changed.",
            "type": "string"
          },
          "errorDetails": {
            "description": "When processing fails, this is the full stack trace of the error.",
            "type": "string"
          },
          "errorMessage": {
            "description": "When processing fails, this is a one line error message.",
            "type": "string"
          },
          "etag": {
            "description": "The etag of the status will change whenever the status changes.",
            "type": "string"
          },
          "exception": {
            "description": "The exception that needs to be thrown",
            "type": "string"
          },
          "jobCanceling": {
            "description": "Was the job being asked to cancel.",
            "type": "boolean"
          },
          "jobId": {
            "description": "The ID if the job issued when this job request was issued.",
            "type": "string"
          },
          "jobState": {
            "$ref": "#/components/schemas/AsynchJobState"
          },
          "progressCurrent": {
            "description": "The progress current value indicates how much progress has been made.\nFor example: If progressTotal = 100; and progressCurrent = 50; then\nthe work is 50% complete.\n",
            "type": "integer"
          },
          "progressMessage": {
            "description": "The current message of the progress tracker.",
            "type": "string"
          },
          "progressTotal": {
            "description": "The progress total indicates the total amount of work to complete.\nFor example: If progressTotal = 100; and progressCurrent = 50; then\nthe work is 50% complete.\n",
            "type": "integer"
          },
          "requestBody": {
            "$ref": "#/components/schemas/AsynchronousRequestBody"
          },
          "responseBody": {
            "$ref": "#/components/schemas/AsynchronousResponseBody"
          },
          "runtimeMS": {
            "description": "The number of milliseconds from the start to completion of this job.",
            "type": "number"
          },
          "startedByUserId": {
            "description": "The ID of the user that started the job",
            "type": "integer"
          },
          "startedOn": {
            "description": "The date-time when the status of this table last changed to PROCESSING.",
            "type": "string"
          }
        },
        "title": "AsynchronousJobStatus",
        "type": "object"
      },
      "Challenge": {
        "title": "Challenge",
        "type": "object",
        "properties": {
          "etag": {
            "type": "string",
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date."
          },
          "projectId": {
            "type": "string",
            "description": "The ID of the Project the challenge is used with."
          },
          "participantTeamId": {
            "type": "string",
            "description": "The ID of the Team which users join to participate in the Challenge"
          },
          "id": {
            "type": "string",
            "description": "The ID of this Challenge object"
          }
        },
        "description": "Settings for a Challenge Project.",
        "example": {
          "etag": "32439w3qsdfw",
          "projectId": "syn22222",
          "participantTeamId": "333333",
          "id": "4321"
        }
      },
      "ChallengePagedResults": {
        "title": "ChallengePagedResults",
        "type": "object",
        "properties": {
          "totalNumberOfResults": {
            "type": "integer",
            "description": "The total number of results"
          },
          "results": {
            "type": "array",
            "description": "The list of results for this page",
            "items": {
              "$ref": "#/components/schemas/Challenge"
            }
          }
        },
        "description": "List the Challenges for which the given participant is registered. To be in the returned list the caller must have READ permission on the project associated with the Challenge.",
        "example": {
          "totalNumberOfResults": 12345,
          "results": [
            {
              "etag": "32439w3qsdfw",
              "projectId": "syn22222",
              "participantTeamId": "333333",
              "id": "4321"
            },
            {
              "etag": "32439w3qsdfwasd",
              "projectId": "syn33333",
              "participantTeamId": "4444",
              "id": "4322"
            }
          ]
        }
      },
      "ChallengeTeam": {
        "title": "ChallengeTeam",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of this ChallengeTeam object"
          },
          "teamId": {
            "type": "string",
            "description": "The ID of the Team"
          },
          "challengeId": {
            "type": "string",
            "description": "The ID of the Challenge"
          },
          "message": {
            "type": "string",
            "description": "A descriptive message for the Team in the context of the Challenge. Limited to 500 characters."
          },
          "etag": {
            "type": "string",
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date."
          }
        },
        "description": "Relationship between a Challenge and registered Team",
        "example": {
          "id": "1111",
          "teamId": "222222",
          "challengeId": "3423",
          "message": "Testing",
          "etag": "33492273ssdf"
        }
      },
      "ChallengeTeamPagedResults": {
        "title": "ChallengeTeamPagedResults",
        "type": "object",
        "properties": {
          "totalNumberOfResults": {
            "type": "integer",
            "description": "The total number of results"
          },
          "results": {
            "type": "array",
            "description": "The list of results for this page",
            "items": {
              "$ref": "#/components/schemas/ChallengeTeam"
            }
          }
        },
        "description": "List the Teams registered for a Challenge. You must have READ permission in the associated Project to make this request.",
        "example": {
          "totalNumberOfResults": 12345,
          "results": [
            {
              "id": "1111",
              "teamId": "222222",
              "challengeId": "3423",
              "message": "Testing",
              "etag": "33492273ssdf"
            },
            {
              "id": "1112",
              "teamId": "222233",
              "challengeId": "3421",
              "message": "Testing foo",
              "etag": "33492273ssdddf"
            }
          ]
        }
      },
      "PaginatedIds": {
        "title": "PaginatedIds",
        "type": "object",
        "properties": {
          "totalNumberOfResults": {
            "type": "integer",
            "description": "The total number of results"
          },
          "results": {
            "type": "array",
            "description": "The list of Object Ids for this page",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Paginated results of strings",
        "example": {
          "totalNumberOfResults": 12345,
          "results": [
            "test1",
            "test2"
          ]
        }
      },
      "ObjectType": {
        "description": "JSON enum for the types of objects in Synapse.",
        "enum": [
          "ENTITY",
          "ENTITY_CONTAINER",
          "PRINCIPAL",
          "ACTIVITY",
          "EVALUATION",
          "EVALUATION_ROUND",
          "SUBMISSION",
          "EVALUATION_SUBMISSIONS",
          "FILE",
          "MESSAGE",
          "WIKI",
          "FAVORITE",
          "ACCESS_REQUIREMENT",
          "ACCESS_APPROVAL",
          "TEAM",
          "TABLE",
          "ACCESS_CONTROL_LIST",
          "PROJECT_SETTING",
          "VERIFICATION_SUBMISSION",
          "CERTIFIED_USER_PASSING_RECORD",
          "FORUM",
          "THREAD",
          "REPLY",
          "FORM_GROUP",
          "ORGANIZATION",
          "FORM_DATA",
          "ENTITY_VIEW",
          "USER_PROFILE",
          "DATA_ACCESS_REQUEST",
          "DATA_ACCESS_SUBMISSION",
          "DATA_ACCESS_SUBMISSION_STATUS",
          "MEMBERSHIP_INVITATION"
        ],
        "title": "ObjectType",
        "type": "string"
      },
      "DoiAssociation": {
        "description": "All fields that associate a Synapse object with a DOI.\nThe objectId and objectType are required to create or mint a DOI in all circumstances.\n",
        "example": {
          "associatedBy": "...",
          "associatedOn": "...",
          "associationId": "...",
          "doiUri": "...",
          "doiUrl": "...",
          "etag": "...",
          "objectId": "...",
          "objectType": "WIKI",
          "objectVersion": 12345,
          "updatedBy": "...",
          "updatedOn": "..."
        },
        "properties": {
          "associatedBy": {
            "description": "The ID of the user that creates this DOI. Provided by Synapse.",
            "type": "string"
          },
          "associatedOn": {
            "description": "The date time this DOI is first created. Provided by Synapse.",
            "type": "string"
          },
          "associationId": {
            "description": "The unique ID of this DOI stored in Synapse. Provided by Synapse.",
            "type": "string"
          },
          "doiUri": {
            "description": "The unique URI of this DOI to which the resource can be resolved. Provided by Synapse.",
            "type": "string"
          },
          "doiUrl": {
            "description": "The DOI URL that will point to the Synapse object. Provided by Synapse.",
            "type": "string"
          },
          "etag": {
            "description": "For Optimistic Concurrency Control (OCC). Required to successfully update a DOI.",
            "type": "string"
          },
          "objectId": {
            "description": "The ID of the digital object in Synapse for which this DOI is created.",
            "type": "string"
          },
          "objectType": {
            "$ref": "#/components/schemas/ObjectType"
          },
          "objectVersion": {
            "description": "The version of the digital object. When null, the DOI is associated with the current version of the object.",
            "type": "integer"
          },
          "updatedBy": {
            "description": "The ID of the user that last updated this DOI. Provided by Synapse.",
            "type": "string"
          },
          "updatedOn": {
            "description": "The date time this DOI is last updated. Provided by Synapse.",
            "type": "string"
          }
        },
        "required": [
          "objectId"
        ],
        "title": "DoiAssociation",
        "type": "object"
      },
      "NameIdentifierScheme": {
        "description": "Describes the scheme of the nameIdentifier. Required if nameIdentifier is used.",
        "enum": [
          "ORCID",
          "ISNI"
        ],
        "title": "NameIdentifierScheme",
        "type": "string"
      },
      "DoiNameIdentifier": {
        "description": "Uniquely identifies an individual or legal entity, according to various schemas.",
        "example": {
          "identifier": "...",
          "nameIdentifierScheme": "ISNI"
        },
        "properties": {
          "identifier": {
            "description": "The identifier belonging to the creator.",
            "type": "string"
          },
          "nameIdentifierScheme": {
            "$ref": "#/components/schemas/NameIdentifierScheme"
          }
        },
        "required": [
          "identifier",
          "nameIdentifierScheme"
        ],
        "title": "DoiNameIdentifier",
        "type": "object"
      },
      "DoiCreator": {
        "description": "JSON schema for DOI Metadata Creator.",
        "example": {
          "creatorName": "...",
          "nameIdentifiers": [
            {
              "identifier": "...",
              "nameIdentifierScheme": "ISNI"
            },
            {
              "identifier": "...",
              "nameIdentifierScheme": "ORCID"
            }
          ]
        },
        "properties": {
          "creatorName": {
            "description": "May be a corporate/institutional or personal name (\"Family, Given\").",
            "type": "string"
          },
          "nameIdentifiers": {
            "description": "Uniquely identifies an individual or legal entity, according to various schemas.",
            "items": {
              "$ref": "#/components/schemas/DoiNameIdentifier"
            },
            "type": "array"
          }
        },
        "required": [
          "creatorName"
        ],
        "title": "DoiCreator",
        "type": "object"
      },
      "DoiResourceTypeGeneral": {
        "description": "Describes the general type of media that DOI Metadata refers to.",
        "enum": [
          "Audiovisual",
          "Collection",
          "DataPaper",
          "Dataset",
          "Event",
          "Image",
          "InteractiveResource",
          "Model",
          "PhysicalObject",
          "Service",
          "Software",
          "Sound",
          "Text",
          "Workflow",
          "Other"
        ],
        "title": "DoiResourceTypeGeneral",
        "type": "string"
      },
      "DoiResourceType": {
        "description": "Describes the type of media that the DOI Metadata refers to.",
        "example": {
          "resourceTypeGeneral": "Image"
        },
        "properties": {
          "resourceTypeGeneral": {
            "$ref": "#/components/schemas/DoiResourceTypeGeneral"
          }
        },
        "title": "DoiResourceType",
        "type": "object"
      },
      "DoiTitle": {
        "description": "JSON schema for DOI Metadata Title.",
        "example": {
          "title": "..."
        },
        "properties": {
          "title": {
            "description": "A name or title by which a resource is known",
            "type": "string"
          }
        },
        "title": "DoiTitle",
        "type": "object"
      },
      "Doi": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DoiAssociation"
          },
          {
            "properties": {
              "creators": {
                "description": "The main researchers involved in producing the data, or the authors\nof the publication, in priority order.\n",
                "items": {
                  "$ref": "#/components/schemas/DoiCreator"
                },
                "type": "array"
              },
              "publicationYear": {
                "description": "The year that this resource became publicly accessible. Must be in YYYY format.",
                "type": "integer"
              },
              "resourceType": {
                "$ref": "#/components/schemas/DoiResourceType"
              },
              "titles": {
                "description": "A name or title by which a resource is known.",
                "items": {
                  "$ref": "#/components/schemas/DoiTitle"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "publicationYear",
          "titles",
          "creators"
        ],
        "description": "JSON schema for fields associated with a DOI and its metadata.",
        "title": "Doi"
      },
      "DoiRequest": {
        "description": "An AsynchronousRequestBody to mint or modify DOIs.",
        "example": {
          "concreteType": "...",
          "doi": {
            "associatedBy": "...",
            "associatedOn": "...",
            "associationId": "...",
            "creators": [
              {
                "creatorName": "...",
                "nameIdentifiers": [
                  {
                    "identifier": "...",
                    "nameIdentifierScheme": "ORCID"
                  }
                ]
              },
              {
                "creatorName": "...",
                "nameIdentifiers": [
                  {
                    "identifier": "...",
                    "nameIdentifierScheme": "ORCID"
                  }
                ]
              }
            ],
            "doiUri": "...",
            "doiUrl": "...",
            "etag": "...",
            "objectId": "...",
            "objectType": "FORUM",
            "objectVersion": 12345,
            "publicationYear": 12345,
            "resourceType": {
              "resourceTypeGeneral": "Dataset"
            },
            "titles": [
              {
                "title": "..."
              },
              {
                "title": "..."
              }
            ],
            "updatedBy": "...",
            "updatedOn": "..."
          }
        },
        "properties": {
          "concreteType": {
            "description": "concrete type",
            "type": "string"
          },
          "doi": {
            "$ref": "#/components/schemas/Doi"
          }
        },
        "title": "DoiRequest",
        "type": "object"
      },
      "AsyncJobId": {
        "description": "Object used to track the status of an asynchronous job.",
        "example": {
          "token": "..."
        },
        "properties": {
          "token": {
            "description": "Token",
            "type": "string"
          }
        },
        "title": "AsyncJobId",
        "type": "object"
      },
      "DoiResponse": {
        "description": "An response to a DOI mint or update request.",
        "example": {
          "concreteType": "...",
          "doi": {
            "associatedBy": "...",
            "associatedOn": "...",
            "associationId": "...",
            "creators": [
              {
                "creatorName": "...",
                "nameIdentifiers": [
                  {
                    "identifier": "...",
                    "nameIdentifierScheme": "ORCID"
                  },
                  {
                    "identifier": "...",
                    "nameIdentifierScheme": "ORCID"
                  }
                ]
              },
              {
                "creatorName": "...",
                "nameIdentifiers": [
                  {
                    "identifier": "...",
                    "nameIdentifierScheme": "ORCID"
                  }
                ]
              }
            ],
            "doiUri": "...",
            "doiUrl": "...",
            "etag": "...",
            "objectId": "...",
            "objectType": "FORM_GROUP",
            "objectVersion": 12345,
            "publicationYear": 12345,
            "resourceType": {
              "resourceTypeGeneral": "Sound"
            },
            "titles": [
              {
                "title": "..."
              },
              {
                "title": "..."
              }
            ],
            "updatedBy": "...",
            "updatedOn": "..."
          }
        },
        "properties": {
          "concreteType": {
            "description": "concrete type",
            "type": "string"
          },
          "doi": {
            "$ref": "#/components/schemas/Doi"
          }
        },
        "title": "DoiResponse",
        "type": "object"
      },
      "Entity": {
        "description": "This is the base interface that all Entities implement.",
        "example": {
          "concreteType": "...",
          "createdBy": "...",
          "createdOn": "...",
          "description": "...",
          "etag": "...",
          "id": "...",
          "modifiedBy": "...",
          "modifiedOn": "...",
          "name": "Trial ' + (_) . 09",
          "parentId": "..."
        },
        "properties": {
          "concreteType": {
            "description": "Indicates which implementation of Entity this object represents.\nIt should be set to one of the following: org.sagebionetworks.repo.model.Project,\norg.sagebionetworks.repo.model.Folder, or org.sagebionetworks.repo.model.FileEntity.\n",
            "type": "string"
          },
          "createdBy": {
            "description": "The ID of the user that created this entity.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this entity was created.",
            "type": "string"
          },
          "description": {
            "description": "The description of this entity.",
            "type": "string",
            "maxLength": 1000
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "id": {
            "description": "The unique immutable ID for this entity. A new ID will be generated for new Entities.\nOnce issued, this ID is guaranteed to never change or be re-issued\n",
            "type": "string"
          },
          "modifiedBy": {
            "description": "The ID of the user that last modified this entity.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date this entity was last modified.",
            "type": "string"
          },
          "name": {
            "description": "The name of this entity. Names may only contain:\nletters, numbers, spaces, underscores, hyphens, periods,\nplus signs, apostrophes, and parentheses\n",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9 +.'(_)]*$"
          },
          "parentId": {
            "description": "The ID of the Entity that is the parent of this Entity.",
            "type": "string"
          }
        },
        "title": "Entity",
        "type": "object"
      },
      "BooleanResult": {
        "description": "Boolean result",
        "example": {
          "result": true
        },
        "properties": {
          "result": {
            "description": "Boolean result",
            "type": "boolean"
          }
        },
        "title": "BooleanResult",
        "type": "object"
      },
      "PaginatedResultsOfAccessRequirement": {
        "description": "Retrieve paginated list of ALL Access Requirements associated with a Team.",
        "example": {
          "results": [
            {
              "accessType": "READ",
              "concreteType": "...",
              "createdBy": "...",
              "createdOn": "...",
              "description": "...",
              "etag": "...",
              "id": 12345,
              "modifiedBy": "...",
              "modifiedOn": "...",
              "subjectIds": [
                {
                  "id": "...",
                  "type": "EVALUATION"
                },
                {
                  "id": "...",
                  "type": "TEAM"
                }
              ],
              "versionNumber": 12345
            },
            {
              "accessType": "UPLOAD",
              "concreteType": "...",
              "createdBy": "...",
              "createdOn": "...",
              "description": "...",
              "etag": "...",
              "id": 12345,
              "modifiedBy": "...",
              "modifiedOn": "...",
              "subjectIds": [
                {
                  "id": "...",
                  "type": "ENTITY"
                },
                {
                  "id": "...",
                  "type": "TEAM"
                }
              ],
              "versionNumber": 12345
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "The the id of the entity to which this reference refers",
            "items": {
              "$ref": "#/components/schemas/AccessRequirement"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "description": "Calculating the actual totalNumberOfResults is not longer supported.\nTherefore, for each page, the totalNumberOfResults is estimated using\nthe current page, limit, and offset. When the page size equals the limit,\nthe totalNumberOfResults will be offset+pageSize+ 1. Otherwise, the\ntotalNumberOfResults will be offset+pageSize.\n",
            "type": "integer"
          }
        },
        "title": "PaginatedResultsOfAccessRequirement",
        "type": "object"
      },
      "ResourceAccess": {
        "title": "ResourceAccess",
        "type": "object",
        "description": "JSON schema for a ResourceAccess POJO",
        "example": {
          "accessType": [
            "UPDATE",
            "DELETE_SUBMISSION"
          ],
          "principalId": 12345
        },
        "properties": {
          "accessType": {
            "description": "A list of types of access granted to the given principal",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ACCESS_TYPE"
            }
          },
          "principalId": {
            "description": "The id of the principal who is granted access",
            "type": "integer"
          }
        }
      },
      "AccessControlList": {
        "title": "AccessControlList",
        "type": "object",
        "description": "Contains list of principals who can access the data with the allowed types of access for each.",
        "properties": {
          "createdBy": {
            "description": "UNUSED -- maintained only for backwards compatibility with archived objects",
            "type": "string"
          },
          "creationDate": {
            "description": "Created Date",
            "type": "string"
          },
          "etag": {
            "description": "Synapse etag value",
            "type": "string"
          },
          "id": {
            "description": "The entity id",
            "type": "string"
          },
          "modifiedBy": {
            "description": "UNUSED -- maintained only for backwards compatibility with archived objects",
            "type": "string"
          },
          "modifiedOn": {
            "description": "UNUSED -- maintained only for backwards compatibility with archived objects",
            "type": "string"
          },
          "resourceAccess": {
            "description": "The list of principals who can access the data with the allowed types of access for each.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceAccess"
            }
          }
        },
        "example": {
          "createdBy": "...",
          "creationDate": "12345",
          "etag": "...",
          "id": "...",
          "modifiedBy": "...",
          "modifiedOn": "12345",
          "resourceAccess": [
            {
              "accessType": [
                "UPDATE_SUBMISSION",
                "CHANGE_PERMISSIONS"
              ],
              "principalId": 12345
            },
            {
              "accessType": [
                "UPDATE",
                "SEND_MESSAGE"
              ],
              "principalId": 12345
            }
          ]
        }
      },
      "AnnotationsValueType": {
        "title": "AnnotationsValueType",
        "type": "string",
        "description": "describes the type of a AnnotationV2's value\n",
        "enum": [
          "STRING",
          "DOUBLE",
          "LONG",
          "TIMESTAMP_MS"
        ]
      },
      "AnnotationsValue": {
        "description": "Contains a AnnotationV2's value and its type\n",
        "example": {
          "type": "DOUBLE",
          "value": [
            "...",
            "..."
          ]
        },
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AnnotationsValueType"
          },
          "value": {
            "description": "List of values as strings. Clients should use the \"type\" field to determine how to\ninterpret the strings. Single values Annotations are represented as a list of size 1,\nand multiple values size > 1. Empty list or null is not allowed\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "AnnotationsValue",
        "type": "object"
      },
      "Annotations_v2": {
        "description": "Annotations are additional key-value pair metadata that are associated with an object.",
        "example": {
          "annotations": {
            "property1": {
              "type": "STRING",
              "value": [
                "...",
                "..."
              ]
            },
            "property2": {
              "type": "STRING",
              "value": [
                "...",
                "..."
              ]
            }
          },
          "etag": "...",
          "id": "..."
        },
        "properties": {
          "annotations": {
            "additionalProperties": {
              "$ref": "#/components/schemas/AnnotationsValue"
            },
            "description": "Additional metadata associated with the object. The key is the name of your desired annotations. The value is an object containing a list of string values (use empty list to represent no values for key) and the value type associated with all values in the list",
            "type": "object"
          },
          "etag": {
            "description": "Etag of the object to which this annotation belongs. To update an AnnotationV2, this field must match the current etag on the object.",
            "type": "string"
          },
          "id": {
            "description": "ID of the object to which this annotation belongs",
            "type": "string"
          }
        },
        "title": "Annotations",
        "type": "object"
      },
      "EntityHeader": {
        "description": "JSON schema for EntityHeader POJO",
        "example": {
          "benefactorId": 12345,
          "createdBy": "...",
          "createdOn": "...",
          "id": "...",
          "modifiedBy": "...",
          "modifiedOn": "...",
          "name": "...",
          "type": "...",
          "versionLabel": "...",
          "versionNumber": 12345
        },
        "properties": {
          "benefactorId": {
            "description": "The ID of the entity that this Entity's ACL is inherited from.'\n",
            "type": "number"
          },
          "createdBy": {
            "description": "The ID of the user that created this entity.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this entity was created.",
            "type": "string"
          },
          "id": {
            "description": "The id of the entity",
            "type": "string"
          },
          "modifiedBy": {
            "description": "The ID of the user that last modified this entity.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date this entity was last modified.",
            "type": "string"
          },
          "name": {
            "description": "The name of the entity",
            "type": "string"
          },
          "type": {
            "description": "The type of the entity",
            "type": "string"
          },
          "versionLabel": {
            "description": "The user defined version label of the entity",
            "type": "string"
          },
          "versionNumber": {
            "description": "The version number of the entity",
            "type": "number"
          }
        },
        "title": "EntityHeader",
        "type": "object"
      },
      "EntityBundleCreate_v2": {
        "description": "Used to create Entity and associated metadata in a single transaction",
        "example": {
          "accessControlList": {
            "createdBy": "...",
            "creationDate": "...",
            "etag": "...",
            "id": "...",
            "modifiedBy": "...",
            "modifiedOn": "...",
            "resourceAccess": [
              {
                "accessType": [
                  "PARTICIPATE",
                  "UPDATE_SUBMISSION"
                ],
                "principalId": 12345
              },
              {
                "accessType": [
                  "DELETE",
                  "UPLOAD"
                ],
                "principalId": 12345
              }
            ]
          },
          "annotations": {
            "annotations": {
              "property1": {
                "type": "STRING",
                "value": [
                  "...",
                  "..."
                ]
              },
              "property2": {
                "type": "STRING",
                "value": [
                  "...",
                  "..."
                ]
              }
            },
            "etag": "...",
            "id": "..."
          },
          "entity": {
            "concreteType": "...",
            "createdBy": "...",
            "createdOn": "...",
            "description": "...",
            "etag": "...",
            "id": "...",
            "modifiedBy": "...",
            "modifiedOn": "...",
            "name": "...",
            "parentId": "..."
          }
        },
        "properties": {
          "accessControlList": {
            "$ref": "#/components/schemas/AccessControlList"
          },
          "annotations": {
            "$ref": "#/components/schemas/Annotations_v2"
          },
          "entity": {
            "$ref": "#/components/schemas/Entity"
          }
        },
        "title": "EntityBundleCreate",
        "type": "object"
      },
      "EntityType": {
        "description": "Type of the Entity",
        "enum": [
          "project",
          "folder",
          "file",
          "table",
          "link",
          "entityview",
          "dockerrepo",
          "submissionview"
        ],
        "title": "EntityType",
        "type": "string"
      },
      "FileHandle": {
        "description": "The FileHandle interface defines all of the fields that are common to all implementations.",
        "example": {
          "concreteType": "...",
          "contentMd5": "...",
          "contentSize": 12345,
          "contentType": "...",
          "createdBy": "...",
          "createdOn": "...",
          "etag": "...",
          "fileName": "...",
          "id": "...",
          "storageLocationId": 12345
        },
        "properties": {
          "concreteType": {
            "description": "This is used to indicate the implementation of this interface.\nFor example, an S3FileHandle should be set to: org.sagebionetworks.repo.model.file.S3FileHandle\n",
            "type": "string"
          },
          "contentMd5": {
            "description": "The file's content MD5.\n",
            "type": "string"
          },
          "contentSize": {
            "description": "The size of the file in bytes.",
            "type": "integer"
          },
          "contentType": {
            "description": "Must be: http://en.wikipedia.org/wiki/Internet_media_type\n",
            "type": "string"
          },
          "createdBy": {
            "description": "The ID Of the user that created this file.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date when this file was uploaded.",
            "type": "string"
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "fileName": {
            "description": "The short, user visible name for this file.",
            "type": "string"
          },
          "id": {
            "description": "The ID of this FileHandle. All references to this FileHandle will use this ID.\nSynapse will generate this ID when the FileHandle is created.\n",
            "type": "string"
          },
          "storageLocationId": {
            "description": "The optional storage location descriptor",
            "type": "integer"
          }
        },
        "title": "FileHandle",
        "type": "object"
      },
      "EntityPath": {
        "description": "All entities in this Entity's path\n",
        "example": {
          "path": [
            {
              "benefactorId": 12345,
              "createdBy": "...",
              "createdOn": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "...",
              "type": "...",
              "versionLabel": "...",
              "versionNumber": 12345
            },
            {
              "benefactorId": 12345,
              "createdBy": "...",
              "createdOn": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "...",
              "type": "...",
              "versionLabel": "...",
              "versionNumber": 12345
            }
          ]
        },
        "properties": {
          "path": {
            "description": "The list of all entities in this entites path.\nThe first element is the root parent and the last element (n) is the entity.\n",
            "items": {
              "$ref": "#/components/schemas/EntityHeader"
            },
            "type": "array"
          }
        },
        "title": "EntityPath",
        "type": "object"
      },
      "UserEntityPermissions": {
        "description": "The permission a User has for a given Entity",
        "example": {
          "canAddChild": true,
          "canCertifiedUserAddChild": true,
          "canCertifiedUserEdit": true,
          "canChangePermissions": true,
          "canChangeSettings": true,
          "canDelete": true,
          "canDownload": true,
          "canEdit": true,
          "canEnableInheritance": true,
          "canModerate": true,
          "canPublicRead": true,
          "canUpload": true,
          "canView": true,
          "isCertificationRequired": true,
          "isCertifiedUser": true,
          "ownerPrincipalId": 12345
        },
        "properties": {
          "canAddChild": {
            "description": "Can the user add a child entity to this entity?",
            "type": "boolean"
          },
          "canCertifiedUserAddChild": {
            "description": "Can the user add a child entity to this entity once they become a Certified User?",
            "type": "boolean"
          },
          "canCertifiedUserEdit": {
            "description": "Can the user edit this entity once they become a Certified User?",
            "type": "boolean"
          },
          "canChangePermissions": {
            "description": "Can the user change the permissions of this entity?",
            "type": "boolean"
          },
          "canChangeSettings": {
            "description": "Can the user change the settings of this entity?",
            "type": "boolean"
          },
          "canDelete": {
            "description": "Can the user delete this entity?",
            "type": "boolean"
          },
          "canDownload": {
            "description": "Are there any access requirements precluding the user from downloading this entity?",
            "type": "boolean"
          },
          "canEdit": {
            "description": "Can the user edit this entity?",
            "type": "boolean"
          },
          "canEnableInheritance": {
            "description": "Can the user delete the entity's access control list (so it inherits settings from an ancestor)?'\n",
            "type": "boolean"
          },
          "canModerate": {
            "description": "Can the user moderate the forum associated with this entity? Note that only project entity has forum.",
            "type": "boolean"
          },
          "canPublicRead": {
            "description": "Is this entity considered public?",
            "type": "boolean"
          },
          "canUpload": {
            "description": "Are there any access requirements precluding the user from uploading into this entity (folder or project)?",
            "type": "boolean"
          },
          "canView": {
            "description": "Can the user view this entity?",
            "type": "boolean"
          },
          "isCertificationRequired": {
            "description": "Is the certification requirement enabled for the project of the entity?",
            "type": "boolean"
          },
          "isCertifiedUser": {
            "description": "Is this user certified?",
            "type": "boolean"
          },
          "ownerPrincipalId": {
            "description": "The principal ID of the entity's owner (i.e. the entity's 'createdBy')'\n",
            "type": "number"
          }
        },
        "title": "UserEntityPermissions",
        "type": "object"
      },
      "RestrictionLevel": {
        "description": "ACT restriction levels",
        "enum": [
          "OPEN",
          "RESTRICTED_BY_TERMS_OF_USE",
          "CONTROLLED_BY_ACT"
        ],
        "title": "RestrictionLevel",
        "type": "string"
      },
      "RestrictionInformationResponse": {
        "description": "The information about restriction level on a restrict-able object.",
        "example": {
          "hasUnmetAccessRequirement": true,
          "restrictionLevel": "CONTROLLED_BY_ACT"
        },
        "properties": {
          "hasUnmetAccessRequirement": {
            "description": "True if user has at least one unmet access requirement on this restrict-able object; false otherwise.",
            "type": "boolean"
          },
          "restrictionLevel": {
            "$ref": "#/components/schemas/RestrictionLevel"
          }
        },
        "title": "RestrictionInformationResponse",
        "type": "object"
      },
      "ColumnType": {
        "description": "The column type determines the type of data that can be stored in a column.\nSwitching between types (using a transaction with TableUpdateTransactionRequest\nin the \"changes\" list) is generally allowed except for switching to \"_LIST\" suffixed types.\nIn such cases, a new column must be created and data must be copied over manually\n\n<table border=\"1\">\n\n<tr>\n\n<th>name</th>\n\n<th>description</th>\n\n</tr>\n\n<tr>\n\n<td>STRING</td>\n\n<td>The STRING data type is a small text strings with between 1 and 1,000 characters. Each STRING column will have a declared maximum size between 1 and 1,000 characters (with 50 characters as the default when maximumSize = null). The maximum STRING size is applied to the budget of the maximum table width, therefore it is best to use the smallest possible maximum size for the data. For strings larger than 250 characters, consider using the LARGETEXT column type for improved performance. Each STRING column counts as maxSize*4 (4 bytes per character) towards the total width of a table.</td>\n\n</tr>\n\n<tr>\n\n<td>DOUBLE</td>\n\n<td>The DOUBLE data type is a double-precision 64-bit IEEE 754 floating point. Its range of values is approximately +/-1.79769313486231570E+308 (15 significant decimal digits). Each DOUBLE column counts as 23 bytes towards the total width of a table.</td>\n\n</tr>\n\n<tr>\n\n<td>INTEGER</td>\n\n<td>The INTEGER data type is a 64-bit two's complement integer. The signed integer has a minimum value of -2^63 and a maximum value of 2^63-1. Each INTEGER column counts as 20 bytes towards the total width of a table.</td>\n\n</tr>\n\n<tr>\n\n<td>BOOLEAN</td>\n\n<td>The BOOLEAN data type has only two possible values: 'true' and 'false'. Each BOOLEAN column counts as 5 bytes towards the total width of a table.</td>\n\n</tr>\n\n<tr>\n\n<td>DATE</td>\n\n<td>The DATE data type represent the specified number of milliseconds since the standard base time known as 'the epoch', namely January 1, 1970, 00:00:00 GM. Each DATE column counts as 20 bytes towards the total width of a table.</td>\n\n</tr>\n\n<tr>\n\n<td>FILEHANDLEID</td>\n\n<td>The FILEHANDLEID data type represents a file stored within a table. To store a file in a table, first use the 'File Services' to upload a file to generate a new FileHandle, then apply the fileHandle.id as the value for this column. Note: This column type works best for files that are binary (non-text) or text files that are 1 MB or larger. For text files that are smaller than 1 MB consider using the LARGETEXT column type to improve download performance. Each FILEHANDLEID column counts as 20 bytes towards the total width of a table.</td>\n\n</tr>\n\n<tr>\n\n<td>ENTITYID</td>\n\n<td>The ENTITYID type represents a reference to a Synapse Entity. Values will include the 'syn' prefix, such as 'syn123'. Each ENTITYID column counts as 44 bytes towards the total width of a table.</td>\n\n</tr>\n\n<tr>\n\n<td>SUBMISSIONID</td>\n\n<td>The SUBMISSIONID type represents a reference to an evaluation submission. The value should be the ID of the referenced submission. Each SUBMISSIONID column counts as 20 bytes towards the total width of a table.</td>\n\n</tr>\n\n<tr>\n\n<td>EVALUATIONID</td>\n\n<td>The EVALUATIONID type represents a reference to an evaluation. The value should be the ID of the referenced evaluation. Each EVALUATIONID column counts as 20 bytes towards the total width of a table.</td>\n\n</tr>\n\n<tr>\n\n<td>LINK</td>\n\n<td>The LINK data type represents any URL with 1,000 characters or less. Each LINK column counts as maxSize*4 (4 bytes per character) towards the total width of a table.</td>\n\n</tr>\n\n<tr>\n\n<td>LARGETEXT</td>\n\n<td>The LARGETEXT data type represents a string that is greater than 250 characters but less than 524,288 characters (2 MB of UTF-8 4 byte chars). For smaller strings consider using the STRING column type. For larger strings, consider using the FILEHANDELID column type. Each LARGE_TEXT column counts as 2133 bytes towards the total width of a table.</td>\n\n</tr>\n\n<tr>\n\n<td>USERID</td>\n\n<td>The USERID data type represents a reference to a Synapse User. The value should be the ID of the referenced User. Each USERID column counts as 20 bytes towards the total width of a table.</td>\n\n</tr>\n\n<tr>\n\n<td>STRING_LIST</td>\n\n<td>Multiple values of STRING</td>\n\n</tr>\n\n<tr>\n\n<td>INTEGER_LIST</td>\n\n<td>Multiple values of INTEGER.</td>\n\n</tr>\n\n<tr>\n\n<td>BOOLEAN_LIST</td>\n\n<td>Multiple values of BOOLEAN.</td>\n\n</tr>\n\n<tr>\n\n<td>DOUBLE</td>\n\n<td></td>\n\n</tr>\n<tr>\n\n<td>DATE_LIST</td>\n\n<td>Multiple values of DATE.</td>\n\n</tr>\n\n<tr>\n\n<td>ENTITYID_LIST</td>\n\n<td>Multiple values of ENTITYID.</td>\n\n</tr>\n\n<tr>\n\n<td>USERID_LIST</td>\n\n<td>Multiple values of USERID.</td>\n\n</tr>\n\n</table>\n",
        "enum": [
          "STRING",
          "DOUBLE",
          "INTEGER",
          "BOOLEAN",
          "DATE",
          "FILEHANDLEID",
          "ENTITYID",
          "SUBMISSIONID",
          "EVALUATIONID",
          "LINK",
          "LARGETEXT",
          "USERID",
          "STRING_LIST",
          "INTEGER_LIST",
          "BOOLEAN_LIST",
          "DATE_LIST",
          "ENTITYID_LIST",
          "USERID_LIST"
        ],
        "title": "ColumnType",
        "type": "string"
      },
      "FacetType": {
        "description": "Table Facet Type",
        "enum": [
          "enumeration",
          "range"
        ],
        "title": "FacetType",
        "type": "string"
      },
      "ColumnModel": {
        "description": "A column model contains the metadata of a single column of a TableEntity",
        "example": {
          "columnType": "INTEGER_LIST",
          "defaultValue": "...",
          "enumValues": [
            "...",
            "..."
          ],
          "facetType": "enumeration",
          "id": "...",
          "maximumListLength": 100,
          "maximumSize": 12345,
          "name": "..."
        },
        "properties": {
          "columnType": {
            "$ref": "#/components/schemas/ColumnType"
          },
          "defaultValue": {
            "description": "The default value for this column. Columns of type ENTITYID, FILEHANDLEID, USERID,\nand LARGETEXT are not allowed to have default values.\n",
            "type": "string"
          },
          "enumValues": {
            "description": "Columns of type STRING can be constrained to an enumeration values set on this list.\nThe maximum number of entries for an enum is 100\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "facetType": {
            "$ref": "#/components/schemas/FacetType"
          },
          "id": {
            "description": "The immutable ID issued to new columns",
            "type": "string"
          },
          "maximumListLength": {
            "description": "Required if using a columnType with a \"_LIST\" suffix.\nDescribes the maximum number of values that will appear in that list.\n",
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 100
          },
          "maximumSize": {
            "description": "A parameter for columnTypes with a maximum size. For example, ColumnType. STRINGs\nhave a default maximum size of 50 characters, but can be set to a maximumSize of\n1 to 1000 characters. For columnType of STRING_LIST, this limits the size of\nindividual string elements in the list\n",
            "type": "number"
          },
          "name": {
            "description": "The display name of the column",
            "type": "string"
          }
        },
        "title": "ColumnModel",
        "type": "object"
      },
      "TableBundle": {
        "description": "Metadata about a TableEntity that can be included in an EntityBundle",
        "example": {
          "columnModels": [
            {
              "columnType": "EVALUATIONID",
              "defaultValue": "...",
              "enumValues": [
                "...",
                "..."
              ],
              "facetType": "enumeration",
              "id": "...",
              "maximumListLength": 100,
              "maximumSize": 12345,
              "name": "..."
            },
            {
              "columnType": "STRING",
              "defaultValue": "...",
              "enumValues": [
                "...",
                "..."
              ],
              "facetType": "range",
              "id": "...",
              "maximumListLength": 100,
              "maximumSize": 12345,
              "name": "..."
            }
          ],
          "maxRowsPerPage": 12345
        },
        "properties": {
          "columnModels": {
            "description": "The list of ColumnModels currently used by this table.",
            "items": {
              "$ref": "#/components/schemas/ColumnModel"
            },
            "type": "array"
          },
          "maxRowsPerPage": {
            "description": "The maximum number of rows that can be requested or posted for this table in a single call.\nThis is a function of the columns that are currently assigned to this table.\n",
            "type": "number"
          }
        },
        "title": "TableBundle",
        "type": "object"
      },
      "EntityBundle_v2": {
        "description": "Bundle to transport an Entity and related data objects",
        "example": {
          "accessControlList": {
            "createdBy": "...",
            "creationDate": "...",
            "etag": "...",
            "id": "...",
            "modifiedBy": "...",
            "modifiedOn": "...",
            "resourceAccess": [
              {
                "accessType": [
                  "CHANGE_PERMISSIONS",
                  "UPDATE_SUBMISSION"
                ],
                "principalId": 12345
              },
              {
                "accessType": [
                  "DOWNLOAD",
                  "MODERATE"
                ],
                "principalId": 12345
              }
            ]
          },
          "annotations": {
            "annotations": {
              "property1": {
                "type": "STRING",
                "value": [
                  "...",
                  "..."
                ]
              },
              "property2": {
                "type": "TIMESTAMP_MS",
                "value": [
                  "...",
                  "..."
                ]
              }
            },
            "etag": "...",
            "id": "..."
          },
          "benefactorAcl": {
            "createdBy": "...",
            "creationDate": "...",
            "etag": "...",
            "id": "...",
            "modifiedBy": "...",
            "modifiedOn": "...",
            "resourceAccess": [
              {
                "accessType": [
                  "UPLOAD",
                  "DELETE"
                ],
                "principalId": 12345
              },
              {
                "accessType": [
                  "CHANGE_SETTINGS",
                  "CREATE"
                ],
                "principalId": 12345
              }
            ]
          },
          "doiAssociation": {
            "associatedBy": "...",
            "associatedOn": "...",
            "associationId": "...",
            "doiUri": "...",
            "doiUrl": "...",
            "etag": "...",
            "objectId": "...",
            "objectType": "VERIFICATION_SUBMISSION",
            "objectVersion": 12345,
            "updatedBy": "...",
            "updatedOn": "..."
          },
          "entity": {
            "concreteType": "...",
            "createdBy": "...",
            "createdOn": "...",
            "description": "...",
            "etag": "...",
            "id": "...",
            "modifiedBy": "...",
            "modifiedOn": "...",
            "name": "...",
            "parentId": "..."
          },
          "entityType": "entityview",
          "fileHandles": [
            {
              "concreteType": "...",
              "contentMd5": "...",
              "contentSize": 12345,
              "contentType": "...",
              "createdBy": "...",
              "createdOn": "...",
              "etag": "...",
              "fileName": "...",
              "id": "...",
              "storageLocationId": 12345
            },
            {
              "concreteType": "...",
              "contentMd5": "...",
              "contentSize": 12345,
              "contentType": "...",
              "createdBy": "...",
              "createdOn": "...",
              "etag": "...",
              "fileName": "...",
              "id": "...",
              "storageLocationId": 12345
            }
          ],
          "fileName": "...",
          "hasChildren": true,
          "path": {
            "path": [
              {
                "benefactorId": 12345,
                "createdBy": "...",
                "createdOn": "...",
                "id": "...",
                "modifiedBy": "...",
                "modifiedOn": "...",
                "name": "...",
                "type": "...",
                "versionLabel": "...",
                "versionNumber": 12345
              },
              {
                "benefactorId": 12345,
                "createdBy": "...",
                "createdOn": "...",
                "id": "...",
                "modifiedBy": "...",
                "modifiedOn": "...",
                "name": "...",
                "type": "...",
                "versionLabel": "...",
                "versionNumber": 12345
              }
            ]
          },
          "permissions": {
            "canAddChild": true,
            "canCertifiedUserAddChild": true,
            "canCertifiedUserEdit": true,
            "canChangePermissions": true,
            "canChangeSettings": true,
            "canDelete": true,
            "canDownload": true,
            "canEdit": true,
            "canEnableInheritance": true,
            "canModerate": true,
            "canPublicRead": true,
            "canUpload": true,
            "canView": true,
            "isCertificationRequired": true,
            "isCertifiedUser": true,
            "ownerPrincipalId": 12345
          },
          "restrictionInformation": {
            "hasUnmetAccessRequirement": true,
            "restrictionLevel": "RESTRICTED_BY_TERMS_OF_USE"
          },
          "rootWikiId": "...",
          "tableBundle": {
            "columnModels": [
              {
                "columnType": "STRING",
                "defaultValue": "...",
                "enumValues": [
                  "...",
                  "..."
                ],
                "facetType": "enumeration",
                "id": "...",
                "maximumListLength": 100,
                "maximumSize": 12345,
                "name": "..."
              },
              {
                "columnType": "USERID_LIST",
                "defaultValue": "...",
                "enumValues": [
                  "...",
                  "..."
                ],
                "facetType": "range",
                "id": "...",
                "maximumListLength": 100,
                "maximumSize": 12345,
                "name": "..."
              }
            ],
            "maxRowsPerPage": 12345
          },
          "threadCount": 12345
        },
        "properties": {
          "accessControlList": {
            "$ref": "#/components/schemas/AccessControlList"
          },
          "annotations": {
            "$ref": "#/components/schemas/Annotations_v2"
          },
          "benefactorAcl": {
            "$ref": "#/components/schemas/AccessControlList"
          },
          "doiAssociation": {
            "$ref": "#/components/schemas/DoiAssociation"
          },
          "entity": {
            "$ref": "#/components/schemas/Entity"
          },
          "entityType": {
            "$ref": "#/components/schemas/EntityType"
          },
          "fileHandles": {
            "description": "FileHandles associated with this Entity",
            "items": {
              "$ref": "#/components/schemas/FileHandle"
            },
            "type": "array"
          },
          "fileName": {
            "description": "If this Entity is a FileEntity, this is its filename",
            "type": "string"
          },
          "hasChildren": {
            "description": "Whether or not this Entity has children",
            "type": "boolean"
          },
          "path": {
            "$ref": "#/components/schemas/EntityPath"
          },
          "permissions": {
            "$ref": "#/components/schemas/UserEntityPermissions"
          },
          "restrictionInformation": {
            "$ref": "#/components/schemas/RestrictionInformationResponse"
          },
          "rootWikiId": {
            "description": "Id of the root Wiki associated with this Entity",
            "type": "string"
          },
          "tableBundle": {
            "$ref": "#/components/schemas/TableBundle"
          },
          "threadCount": {
            "description": "Number of disucssion threads that reference this Entity",
            "type": "number"
          }
        },
        "title": "EntityBundle",
        "type": "object"
      },
      "EntityBundleRequest": {
        "description": "Specifies what fields to include in an EntityBundle",
        "example": {
          "includeAccessControlList": true,
          "includeAnnotations": true,
          "includeBenefactorACL": true,
          "includeDOIAssociation": true,
          "includeEntity": true,
          "includeEntityPath": true,
          "includeFileHandles": true,
          "includeFileName": true,
          "includeHasChildren": true,
          "includePermissions": true,
          "includeRestrictionInformation": true,
          "includeRootWikiId": true,
          "includeTableBundle": true,
          "includeThreadCount": true
        },
        "properties": {
          "includeAccessControlList": {
            "description": "Include the AccessControlList for this Entity",
            "type": "boolean"
          },
          "includeAnnotations": {
            "description": "Include Annotations associated with the Entity in the response.",
            "type": "boolean"
          },
          "includeBenefactorACL": {
            "description": "Include the ACL of the Entity from which this Entity inherits its AccessControlList",
            "type": "boolean"
          },
          "includeDOIAssociation": {
            "description": "Include DOIs associated with this Entity",
            "type": "boolean"
          },
          "includeEntity": {
            "description": "Include the Entity in the response.",
            "type": "boolean"
          },
          "includeEntityPath": {
            "description": "Include EntityHeaders for all Entities in this Entity's path\n",
            "type": "boolean"
          },
          "includeFileHandles": {
            "description": "Include all FileHandles associated with this Entity.",
            "type": "boolean"
          },
          "includeFileName": {
            "description": "If this Entity is a FileEntity, include its filename",
            "type": "boolean"
          },
          "includeHasChildren": {
            "description": "Include boolean indicating whether this Entity has children",
            "type": "boolean"
          },
          "includePermissions": {
            "description": "Include permissions of the current user on the entity.",
            "type": "boolean"
          },
          "includeRestrictionInformation": {
            "description": "Include the RestrictionLevel of this Entity",
            "type": "boolean"
          },
          "includeRootWikiId": {
            "description": "Include the id of the root Wiki associated with this Entity",
            "type": "boolean"
          },
          "includeTableBundle": {
            "description": "If the Entity is a TableEntity, include Table specific metadata.",
            "type": "boolean"
          },
          "includeThreadCount": {
            "description": "Include the number of discussion threads that mention this Entity",
            "type": "boolean"
          }
        },
        "title": "EntityBundleRequest",
        "type": "object"
      },
      "PaginatedColumnModels": {
        "description": "Paginated results of a ColumnModel",
        "example": {
          "results": [
            {
              "columnType": "LINK",
              "defaultValue": "...",
              "enumValues": [
                "...",
                "..."
              ],
              "facetType": "range",
              "id": "...",
              "maximumListLength": 100,
              "maximumSize": 12345,
              "name": "..."
            },
            {
              "columnType": "SUBMISSIONID",
              "defaultValue": "...",
              "enumValues": [
                "...",
                "..."
              ],
              "facetType": "range",
              "id": "...",
              "maximumListLength": 100,
              "maximumSize": 12345,
              "name": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "The list of ColumnModels for this page",
            "items": {
              "$ref": "#/components/schemas/ColumnModel"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "description": "The total number of results",
            "type": "integer"
          }
        },
        "title": "PaginatedColumnModels",
        "type": "object"
      },
      "DataType": {
        "description": "Enumeration of data types the describe the contents of objects like Tables and Files.\n\n* SENSITIVE_DATA: The default type assigned to all Tables and Files. Sensitive_data indicates\nthat the contents 'might' contain Protected Health Data (PHI), data with access restriction,\ndata with special terms-of-use, or data that should not be released to the public.\n\n* OPEN_DATA: Open_data is data that is safe to release to the public. Open_data must not\ninclude Protected Health Data (PHI), data with access restrictions, or any type of terms-of-use.\n",
        "enum": [
          "SENSITIVE_DATA",
          "OPEN_DATA"
        ],
        "title": "DataType",
        "type": "string"
      },
      "DataTypeResponse": {
        "description": "Response for an Object's DataType.\n",
        "example": {
          "dataType": "OPEN_DATA",
          "objectId": "...",
          "objectType": "FORM_GROUP",
          "updatedBy": "...",
          "updatedOn": "..."
        },
        "properties": {
          "dataType": {
            "$ref": "#/components/schemas/DataType"
          },
          "objectId": {
            "description": "The ID of the object.",
            "type": "string"
          },
          "objectType": {
            "$ref": "#/components/schemas/ObjectType"
          },
          "updatedBy": {
            "description": "The user that last updated this object's DataType.\n",
            "type": "string"
          },
          "updatedOn": {
            "description": "The date this object's DataType was last updated.\n",
            "type": "string"
          }
        },
        "title": "DataTypeResponse",
        "type": "object"
      },
      "DockerCommit": {
        "description": "Metadata for an image in a Docker Repository: A digest and optional tag.",
        "example": {
          "createdOn": "...",
          "digest": "...",
          "tag": "..."
        },
        "properties": {
          "createdOn": {
            "description": "The date this commit was created.",
            "type": "string"
          },
          "digest": {
            "description": "A unique id for the commit, generated by hashing its content.",
            "type": "string"
          },
          "tag": {
            "description": "A user supplied name for a specific version of a repository.",
            "type": "string"
          }
        },
        "title": "DockerCommit",
        "type": "object"
      },
      "PaginatedResultsOfDockerCommit": {
        "description": "JSON schema for Row POJO",
        "example": {
          "results": [
            {
              "createdOn": "...",
              "digest": "...",
              "tag": "..."
            },
            {
              "createdOn": "...",
              "digest": "...",
              "tag": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "List of Docker commits.",
            "items": {
              "$ref": "#/components/schemas/DockerCommit"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfDockerCommit",
        "type": "object"
      },
      "SubmissionQuota": {
        "title": "SubmissionQuota",
        "type": "object",
        "description": "Maximum submissions per team/participant per submission round. If round information is omitted, then this indicates the overall submission limit per team/participant.",
        "example": {
          "firstRoundStart": "33333333",
          "numberOfRounds": 1,
          "roundDurationMillis": 12345,
          "submissionLimit": 2
        },
        "properties": {
          "firstRoundStart": {
            "description": "The date/time at which the first round begins.",
            "type": "string"
          },
          "numberOfRounds": {
            "description": "The number of rounds, or null if there is no end.",
            "type": "integer"
          },
          "roundDurationMillis": {
            "description": "The duration of each round in milliseconds",
            "type": "integer"
          },
          "submissionLimit": {
            "description": "the maximum number of submissions per team/participant per round.",
            "type": "integer"
          }
        }
      },
      "EvaluationStatus": {
        "title": "EvaluationStatus",
        "type": "string",
        "description": "The possible states of a Synapse Evaluation.",
        "enum": [
          "PLANNED",
          "OPEN",
          "CLOSED",
          "COMPLETED"
        ]
      },
      "Evaluation": {
        "title": "Evaluation",
        "type": "object",
        "description": "An Evaluation is the core object of the Evaluation API, used to support collaborative data analysis challenges in Synapse.",
        "example": {
          "contentSource": "syn234444",
          "createdOn": "12345",
          "description": "Evaluation Queue",
          "etag": "aaaaa",
          "id": "12345",
          "name": "Test Evaluation",
          "ownerId": "22222",
          "quota": {
            "firstRoundStart": "12345",
            "numberOfRounds": 12345,
            "roundDurationMillis": 12345,
            "submissionLimit": 12345
          },
          "status": "PLANNED",
          "submissionInstructionsMessage": "Instructions",
          "submissionReceiptMessage": "Received"
        },
        "properties": {
          "contentSource": {
            "description": "The Synapse ID of the Entity to which this Evaluation belongs, e.g. a reference to a Synapse project.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date on which Evaluation was created.",
            "type": "string"
          },
          "description": {
            "description": "A text description of this Evaluation.",
            "type": "string"
          },
          "etag": {
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates.\nThe eTag changes every time an Evaluation is updated; it is used to detect when a client's\ncopy of an Evaluation is out-of-date.\n",
            "type": "string"
          },
          "id": {
            "description": "The unique immutable ID for this Evaluation.",
            "type": "string"
          },
          "name": {
            "description": "The name of this Evaluation",
            "type": "string"
          },
          "ownerId": {
            "description": "The ID of the Synapse user who created this Evaluation.",
            "type": "string"
          },
          "quota": {
            "$ref": "#/components/schemas/SubmissionQuota"
          },
          "status": {
            "$ref": "#/components/schemas/EvaluationStatus"
          },
          "submissionInstructionsMessage": {
            "description": "Message to display to users detailing acceptable formatting for Submissions to this Evaluation.",
            "type": "string"
          },
          "submissionReceiptMessage": {
            "description": "Message to display to users upon successful submission to this Evaluation.",
            "type": "string"
          }
        }
      },
      "PaginatedResultsOfEvaluation": {
        "title": "PaginatedResultsOfEvaluation",
        "type": "object",
        "description": "Gets a collection of Evaluations, within a given range.",
        "properties": {
          "results": {
            "type": "array",
            "description": "List of evaluations",
            "items": {
              "$ref": "#/components/schemas/Evaluation"
            }
          },
          "totalNumberOfResults": {
            "description": "Number of results per page",
            "type": "integer"
          }
        }
      },
      "FileHandleResults": {
        "description": "List of file handles",
        "example": {
          "list": [
            {
              "concreteType": "...",
              "contentMd5": "...",
              "contentSize": 12345,
              "contentType": "...",
              "createdBy": "...",
              "createdOn": "...",
              "etag": "...",
              "fileName": "...",
              "id": "...",
              "storageLocationId": 12345
            },
            {
              "concreteType": "...",
              "contentMd5": "...",
              "contentSize": 12345,
              "contentType": "...",
              "createdBy": "...",
              "createdOn": "...",
              "etag": "...",
              "fileName": "...",
              "id": "...",
              "storageLocationId": 12345
            }
          ]
        },
        "properties": {
          "list": {
            "description": "List of file handles",
            "items": {
              "$ref": "#/components/schemas/FileHandle"
            },
            "type": "array"
          }
        },
        "title": "FileHandleResults",
        "type": "object"
      },
      "JSONObject": {
        "description": "Json Object",
        "example": {},
        "title": "JSONObject",
        "type": "object"
      },
      "MessageToUser": {
        "description": "JSON schema for a message to another user",
        "example": {
          "bcc": "...",
          "cc": "...",
          "createdBy": "...",
          "createdOn": "...",
          "fileHandleId": "...",
          "id": "...",
          "inReplyTo": "...",
          "inReplyToRoot": "...",
          "isNotificationMessage": true,
          "notificationUnsubscribeEndpoint": "...",
          "recipients": [
            "...",
            "..."
          ],
          "subject": "...",
          "to": "...",
          "userProfileSettingEndpoint": "...",
          "withProfileSettingLink": true,
          "withUnsubscribeLink": true
        },
        "properties": {
          "bcc": {
            "description": "The email addresses in the 'bcc' field of the email message\n",
            "type": "string"
          },
          "cc": {
            "description": "The email addresses in the 'cc' field of the email message\n",
            "type": "string"
          },
          "createdBy": {
            "description": "The unique identifier of the sender of this message",
            "type": "string"
          },
          "createdOn": {
            "description": "When this message was created",
            "type": "string"
          },
          "fileHandleId": {
            "description": "The S3 file handle storing the body of this message. Note: The file's mime type\nshould be 'text/plain' or 'text/html'. If no character encoding is specified,\nthen UTF-8 is assumed.\n",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the message or comment",
            "type": "string"
          },
          "inReplyTo": {
            "description": "The unique identifier of the message being replied to. Can be null",
            "type": "string"
          },
          "inReplyToRoot": {
            "description": "The unique identifier of the root message being replied to",
            "type": "string"
          },
          "isNotificationMessage": {
            "description": "A notification message is sent from a noreply email address, delivery failures are not sent back to the sender",
            "type": "boolean"
          },
          "notificationUnsubscribeEndpoint": {
            "description": "the portal prefix for one-click email unsubscription.\nA signed, serialized token is appended to create the complete URL.\nIf omitted, the default endpoint will be used.\n",
            "type": "string"
          },
          "recipients": {
            "description": "The unique identifiers of the intended recipients of a message",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subject": {
            "description": "Topic of this message. Optional",
            "type": "string"
          },
          "to": {
            "description": "The email addresses in the 'to' field of the email message\n",
            "type": "string"
          },
          "userProfileSettingEndpoint": {
            "description": "the portal link to user profile setting page. If omitted, the default endpoint will be used.",
            "type": "string"
          },
          "withProfileSettingLink": {
            "description": "should the user profile setting link be included in the email?",
            "type": "boolean"
          },
          "withUnsubscribeLink": {
            "description": "should the unsubscribe link be included in the email?",
            "type": "boolean"
          }
        },
        "title": "MessageToUser",
        "type": "object"
      },
      "JsonSchemaVersionInfo": {
        "description": "Information about a single version of a JSON schema.",
        "example": {
          "$id": "...",
          "createdBy": "...",
          "createdOn": "...",
          "jsonSHA256Hex": "...",
          "organizationId": "...",
          "organizationName": "...",
          "schemaId": "...",
          "schemaName": "...",
          "semanticVersion": "...",
          "versionId": "..."
        },
        "properties": {
          "$id": {
            "description": "The full '$id' of this schema version\n",
            "type": "string"
          },
          "createdBy": {
            "description": "The ID of the user that created this JSON schema version.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this JSON schema version was created.",
            "type": "string"
          },
          "jsonSHA256Hex": {
            "description": "The SHA-256 hexadecimal hash of the UTF-8 encoded JSON schema.",
            "type": "string"
          },
          "organizationId": {
            "description": "The Synapse issued numeric identifier for the organization.",
            "type": "string"
          },
          "organizationName": {
            "description": "The name of the organization to which this schema belongs.",
            "type": "string"
          },
          "schemaId": {
            "description": "The Synapse issued numeric identifier for the schema.",
            "type": "string"
          },
          "schemaName": {
            "description": "The name of the this schema.",
            "type": "string"
          },
          "semanticVersion": {
            "description": "The semantic version label provided when this version was created.\nCan be null if a semantic version was not provided when this version was created.\n",
            "type": "string"
          },
          "versionId": {
            "description": "The Synapse issued numeric identifier for this version.",
            "type": "string"
          }
        },
        "title": "JsonSchemaVersionInfo",
        "type": "object"
      },
      "BoundObjectType": {
        "description": "Object types that can be bound to a JSON schema.",
        "enum": [
          "entity"
        ],
        "title": "BoundObjectType",
        "type": "string"
      },
      "JsonSchemaObjectBinding": {
        "description": "Describes the binding of a JSON schema to an object",
        "example": {
          "createdBy": "...",
          "createdOn": "...",
          "jsonSchemaVersionInfo": {
            "$id": "...",
            "createdBy": "...",
            "createdOn": "...",
            "jsonSHA256Hex": "...",
            "organizationId": "...",
            "organizationName": "...",
            "schemaId": "...",
            "schemaName": "...",
            "semanticVersion": "...",
            "versionId": "..."
          },
          "objectId": 12345,
          "objectType": "entity"
        },
        "properties": {
          "createdBy": {
            "description": "The ID of the user that bound this object to the schema.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this binding was created.",
            "type": "string"
          },
          "jsonSchemaVersionInfo": {
            "$ref": "#/components/schemas/JsonSchemaVersionInfo"
          },
          "objectId": {
            "description": "The numeric identifier of the object bound to a JSON schema",
            "type": "integer"
          },
          "objectType": {
            "$ref": "#/components/schemas/BoundObjectType"
          }
        },
        "title": "JsonSchemaObjectBinding",
        "type": "object"
      },
      "BindSchemaToEntityRequest": {
        "description": "Request to bind an Entity to a JSON schema.",
        "example": {
          "entityId": "...",
          "schema$id": "..."
        },
        "properties": {
          "entityId": {
            "description": "The ID of the the entity.",
            "type": "string"
          },
          "schema$id": {
            "description": "The $id of the JSON schema to bind to the entity.\nNote: If the $id includes a semantic version then entity will be\nbound to that specific version. If the $id excludes the semantic\nversion then the entity will be bound to the latest version of that schema.\n",
            "type": "string"
          }
        },
        "title": "BindSchemaToEntityRequest",
        "type": "object"
      },
      "ObjectType_schema": {
        "description": "Type of Synapse objects that can have a JSON schema.",
        "enum": [
          "entity"
        ],
        "title": "ObjectType",
        "type": "string"
      },
      "ValidationException": {
        "description": "A recursive ValidationException that describes all schema violations for an entire schema tree.",
        "example": {
          "causingExceptions": [
            {
              "causingExceptions": [
                {},
                {}
              ],
              "keyword": "...",
              "message": "...",
              "pointerToViolation": "...",
              "schemaLocation": "..."
            },
            {
              "causingExceptions": [
                {},
                {}
              ],
              "keyword": "...",
              "message": "...",
              "pointerToViolation": "...",
              "schemaLocation": "..."
            }
          ],
          "keyword": "...",
          "message": "...",
          "pointerToViolation": "...",
          "schemaLocation": "..."
        },
        "properties": {
          "causingExceptions": {
            "description": "An array of sub-exceptions.",
            "items": {
              "$ref": "#/components/schemas/ValidationException"
            },
            "type": "array"
          },
          "keyword": {
            "description": "The JSON schema keyword which was violated.",
            "type": "string"
          },
          "message": {
            "description": "The description of the validation failure.",
            "type": "string"
          },
          "pointerToViolation": {
            "description": "A JSON Pointer denoting the path from the input document root to its fragment which caused the validation failure.",
            "type": "string"
          },
          "schemaLocation": {
            "description": "A JSON Pointer denoting the path from the schema JSON root to the violated keyword.",
            "type": "string"
          }
        },
        "title": "ValidationException",
        "type": "object"
      },
      "ValidationResults": {
        "description": "Results of validating an object against a schema",
        "example": {
          "allValidationMessages": [
            "...",
            "..."
          ],
          "isValid": true,
          "objectEtag": "...",
          "objectId": "...",
          "objectType": "entity",
          "schema$id": "...",
          "validatedOn": "...",
          "validationErrorMessage": "...",
          "validationException": {
            "causingExceptions": [
              {},
              {}
            ],
            "keyword": "...",
            "message": "...",
            "pointerToViolation": "...",
            "schemaLocation": "..."
          }
        },
        "properties": {
          "allValidationMessages": {
            "description": "If the object is not valid according to the schema, a the flat list\nof error messages will be provided with one error message per sub-schema.\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isValid": {
            "description": "True if the object is currently valid according to the schema.",
            "type": "boolean"
          },
          "objectEtag": {
            "description": "The etag of the object at the time of validation.\nNote: If this etag does not match the current etag of the object then\nthese validation results should be considered out of date.\n",
            "type": "string"
          },
          "objectId": {
            "description": "The identifier of the object that was validated.",
            "type": "string"
          },
          "objectType": {
            "$ref": "#/components/schemas/ObjectType_schema"
          },
          "schema$id": {
            "description": "The $id of the schema that the object was validated against.",
            "type": "string"
          },
          "validatedOn": {
            "description": "The date-time this object was validated",
            "type": "string"
          },
          "validationErrorMessage": {
            "description": "If the object is not valid according to the schema, a simple one\nline error message will be provided.\n",
            "type": "string"
          },
          "validationException": {
            "$ref": "#/components/schemas/ValidationException"
          }
        },
        "title": "ValidationResults",
        "type": "object"
      },
      "ListValidationResultsRequest": {
        "description": "Request to get a single page of JSON schema validation results for a given Entity container.",
        "example": {
          "containerId": "...",
          "nextPageToken": "..."
        },
        "properties": {
          "containerId": {
            "description": "The ID of the Entity container to get.",
            "type": "string"
          },
          "nextPageToken": {
            "description": "Forward the returned 'nextPageToken' to get the next page of results.\n",
            "type": "string"
          }
        },
        "title": "ListValidationResultsRequest",
        "type": "object"
      },
      "ListValidationResultsResponse": {
        "description": "A single page of the JSON schema validation results.",
        "example": {
          "nextPageToken": "...",
          "page": [
            {
              "allValidationMessages": [
                "...",
                "..."
              ],
              "isValid": true,
              "objectEtag": "...",
              "objectId": "...",
              "objectType": "entity",
              "schema$id": "...",
              "validatedOn": "...",
              "validationErrorMessage": "...",
              "validationException": {
                "causingExceptions": [
                  {},
                  {}
                ],
                "keyword": "...",
                "message": "...",
                "pointerToViolation": "...",
                "schemaLocation": "..."
              }
            },
            {
              "allValidationMessages": [
                "...",
                "..."
              ],
              "isValid": true,
              "objectEtag": "...",
              "objectId": "...",
              "objectType": "entity",
              "schema$id": "...",
              "validatedOn": "...",
              "validationErrorMessage": "...",
              "validationException": {
                "causingExceptions": [
                  {},
                  {}
                ],
                "keyword": "...",
                "message": "...",
                "pointerToViolation": "...",
                "schemaLocation": "..."
              }
            }
          ]
        },
        "properties": {
          "nextPageToken": {
            "description": "Forward this token to get the next page of results.",
            "type": "string"
          },
          "page": {
            "description": "Page of results",
            "items": {
              "$ref": "#/components/schemas/ValidationResults"
            },
            "type": "array"
          }
        },
        "title": "ListValidationResultsResponse",
        "type": "object"
      },
      "ValidationSummaryStatistics": {
        "description": "Summary statistics for the JSON schema validation results for the children of an Entity container (Project or Folder)",
        "example": {
          "containerId": "...",
          "generatedOn": "...",
          "numberOfInvalidChildren": 12345,
          "numberOfUnknownChildren": 12345,
          "numberOfValidChildren": 12345,
          "totalNumberOfChildren": 12345
        },
        "properties": {
          "containerId": {
            "description": "The ID of the container Entity.",
            "type": "string"
          },
          "generatedOn": {
            "description": "The date-time when the statistics were calculated.",
            "type": "string"
          },
          "numberOfInvalidChildren": {
            "description": "The total number of children that are invalid according to their bound JSON schema.",
            "type": "integer"
          },
          "numberOfUnknownChildren": {
            "description": "The total number of children that do not have validation results. This can occur when a child does not have a bound JSON schema or when a child has not been validated yet.",
            "type": "integer"
          },
          "numberOfValidChildren": {
            "description": "The total number of children that are valid according to their bound JSON schema.",
            "type": "integer"
          },
          "totalNumberOfChildren": {
            "description": "The total number of children in the container.",
            "type": "integer"
          }
        },
        "title": "ValidationSummaryStatistics",
        "type": "object"
      },
      "StsCredentials": {
        "description": "Temporary AWS credentials vended by STS (Security Token Service).",
        "example": {
          "accessKeyId": "...",
          "baseKey": "...",
          "bucket": "...",
          "expiration": "...",
          "secretAccessKey": "...",
          "sessionToken": "..."
        },
        "properties": {
          "accessKeyId": {
            "description": "AWS access key ID.",
            "type": "string"
          },
          "baseKey": {
            "description": "The S3 key prefix that these credentials have access to.",
            "type": "string"
          },
          "bucket": {
            "description": "The bucket that these credentials have access to.",
            "type": "string"
          },
          "expiration": {
            "description": "The date-time that these credentials expire.",
            "type": "string"
          },
          "secretAccessKey": {
            "description": "AWS secret access key.",
            "type": "string"
          },
          "sessionToken": {
            "description": "AWS temporary session token.",
            "type": "string"
          }
        },
        "title": "StsCredentials",
        "type": "object"
      },
      "SelectColumn": {
        "description": "A column model contains the metadata of a single column of a TableEntity",
        "example": {
          "columnType": "BOOLEAN",
          "id": "...",
          "name": "..."
        },
        "properties": {
          "columnType": {
            "$ref": "#/components/schemas/ColumnType"
          },
          "id": {
            "description": "The optional ID of the select column, if this is a direct column selected",
            "type": "string"
          },
          "name": {
            "description": "The required display name of the column",
            "type": "string"
          }
        },
        "title": "SelectColumn",
        "type": "object"
      },
      "DownloadFromTableResult": {
        "description": "The response body of an asynchronous CSV table download job.",
        "example": {
          "concreteType": "...",
          "etag": "...",
          "headers": [
            {
              "columnType": "LINK",
              "id": "...",
              "name": "..."
            },
            {
              "columnType": "STRING_LIST",
              "id": "...",
              "name": "..."
            }
          ],
          "resultsFileHandleId": "...",
          "tableId": "..."
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "etag": {
            "description": "Any RowSet returned from Synapse will contain the current etag of the change set.\nTo update any rows from a RowSet the etag must be provided with the POST.\n",
            "type": "string"
          },
          "headers": {
            "description": "The list of SelectColumns that describes the rows of this set.",
            "items": {
              "$ref": "#/components/schemas/SelectColumn"
            },
            "type": "array"
          },
          "resultsFileHandleId": {
            "description": "The resulting file handle ID can be used to download the CSV file\ncreated by this job. The file will contain all of the data requested in the\nquery SQL provided when the job was started.\n",
            "type": "string"
          },
          "tableId": {
            "description": "The ID of the table identified in the from clause of the table query.",
            "type": "string"
          }
        },
        "title": "DownloadFromTableResult",
        "type": "object"
      },
      "QueryFilter": {
        "description": "Query filter",
        "example": {},
        "title": "QueryFilter",
        "type": "object"
      },
      "FacetColumnRequest": {
        "description": "A set of values that have been selected for filtering in a faceted column",
        "example": {
          "columnName": "...",
          "concreteType": "..."
        },
        "properties": {
          "columnName": {
            "description": "The name of the faceted column",
            "type": "string"
          },
          "concreteType": {
            "description": "Conrete Type",
            "type": "string"
          }
        },
        "title": "FacetColumnRequest",
        "type": "object"
      },
      "SortDirection": {
        "description": "Optional sort direction. Default is the default mysql sort direction for that type.",
        "enum": [
          "ASC",
          "DESC"
        ],
        "title": "SortDirection",
        "type": "string"
      },
      "SortItem": {
        "description": "Sort schema",
        "example": {
          "column": "...",
          "direction": "ASC"
        },
        "properties": {
          "column": {
            "description": "The column to sort on.",
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/SortDirection"
          }
        },
        "title": "SortItem",
        "type": "object"
      },
      "Query": {
        "description": "Query",
        "example": {
          "additionalFilters": [
            {},
            {}
          ],
          "includeEntityEtag": true,
          "limit": 12345,
          "offset": 12345,
          "selectedFacets": [
            {
              "columnName": "...",
              "concreteType": "..."
            },
            {
              "columnName": "...",
              "concreteType": "..."
            }
          ],
          "sort": [
            {
              "column": "...",
              "direction": "ASC"
            },
            {
              "column": "...",
              "direction": "DESC"
            }
          ],
          "sql": "..."
        },
        "properties": {
          "additionalFilters": {
            "description": "Appends additional filters to the SQL query. These are applied before facets.\nFilters within the list have an AND relationship. If a WHERE clause already\nexists on the SQL query or facets are selected, it will also be ANDed with\nthe query generated by these additional filters.\n",
            "items": {
              "$ref": "#/components/schemas/QueryFilter"
            },
            "type": "array"
          },
          "includeEntityEtag": {
            "description": "Optional, default false. When true, a query results against views will\ninclude the Etag of each entity in the results. Note: The etag is necessary\nto update Entities in the view.\n",
            "type": "boolean"
          },
          "limit": {
            "description": "The optional limit to the results",
            "type": "integer"
          },
          "offset": {
            "description": "The optional offset into the results",
            "type": "integer"
          },
          "selectedFacets": {
            "description": "The selected facet filters.",
            "items": {
              "$ref": "#/components/schemas/FacetColumnRequest"
            },
            "type": "array"
          },
          "sort": {
            "description": "To sort values",
            "items": {
              "$ref": "#/components/schemas/SortItem"
            },
            "type": "array"
          },
          "sql": {
            "description": "The SQL query string.",
            "type": "string"
          }
        },
        "title": "Query",
        "type": "object"
      },
      "CsvTableDescriptor": {
        "description": "The description of a csv for upload or download.",
        "example": {
          "escapeCharacter": "...",
          "isFirstLineHeader": true,
          "lineEnd": "...",
          "quoteCharacter": "...",
          "separator": "..."
        },
        "properties": {
          "escapeCharacter": {
            "description": "The escape character to be used for escaping a separator or quote in the\nresulting file. The default character '\\\\' will be used if this is not\nprovided by the caller.\n",
            "type": "string"
          },
          "isFirstLineHeader": {
            "description": "Is the first line a header? The default value of 'true' will\nbe used if this is not provided by the caller.\n",
            "type": "boolean"
          },
          "lineEnd": {
            "description": "The line feed terminator to be used for the resulting file.\nThe default value of '\\n' will be used if this is not provided by the caller.\n",
            "type": "string"
          },
          "quoteCharacter": {
            "description": "The character to be used for quoted elements in the resulting file.\nThe default character '\"' will be used if this is not provided by the caller.\n",
            "type": "string"
          },
          "separator": {
            "description": "The delimiter to be used for separating entries in the resulting file.\nThe default character ',' will be used if this is not provided by the caller.\nFor tab-separated values use '\\t'\n",
            "type": "string"
          }
        },
        "title": "CsvTableDescriptor",
        "type": "object"
      },
      "DownloadFromTableRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Query"
          },
          {
            "properties": {
              "concreteType": {
                "description": "Concrete Type",
                "type": "string"
              },
              "csvTableDescriptor": {
                "$ref": "#/components/schemas/CsvTableDescriptor"
              },
              "entityId": {
                "description": "Entity Id",
                "type": "string"
              },
              "includeRowIdAndRowVersion": {
                "description": "Should the first two columns contain the row ID and row version?\nThe default value is 'true'.\n",
                "type": "boolean",
                "default": true
              },
              "writeHeader": {
                "description": "Should the first line contain the columns names as a header in the resulting file?\nSet to 'true' to include the headers else, 'false'. The default value is 'true'.\n",
                "type": "boolean",
                "default": true
              }
            },
            "type": "object"
          }
        ],
        "description": "A CSV table download request.",
        "title": "DownloadFromTableRequest"
      },
      "RowReference": {
        "description": "Reference for a single Row of a TableEntity",
        "example": {
          "rowId": 12345,
          "versionNumber": 12345
        },
        "properties": {
          "rowId": {
            "description": "The immutable ID issued to a new row.",
            "type": "integer"
          },
          "versionNumber": {
            "description": "The version number of this row. Each row version is immutable, so when a row is updated a new version is created.",
            "type": "integer"
          }
        },
        "title": "RowReference",
        "type": "object"
      },
      "RowReferenceSet": {
        "description": "Represents a set of RowReferences of a TableEntity",
        "example": {
          "etag": "...",
          "headers": [
            {
              "columnType": "DATE",
              "id": "...",
              "name": "..."
            },
            {
              "columnType": "USERID",
              "id": "...",
              "name": "..."
            }
          ],
          "rows": [
            {
              "rowId": 12345,
              "versionNumber": 12345
            },
            {
              "rowId": 12345,
              "versionNumber": 12345
            }
          ],
          "tableId": "..."
        },
        "properties": {
          "etag": {
            "description": "When a RowReferenceSet is returned from a table update, this will be set to the current etag of the table.",
            "type": "string"
          },
          "headers": {
            "description": "The list of ColumnModels ID that describes the rows of this set.",
            "items": {
              "$ref": "#/components/schemas/SelectColumn"
            },
            "type": "array"
          },
          "rows": {
            "description": "Each RowReference of this list refers to a single version of a single row of a TableEntity.",
            "items": {
              "$ref": "#/components/schemas/RowReference"
            },
            "type": "array"
          },
          "tableId": {
            "description": "The ID of the TableEntity than owns these rows",
            "type": "string"
          }
        },
        "title": "RowReferenceSet",
        "type": "object"
      },
      "TableFileHandleResults": {
        "description": "JSON schema for TableFileHandleResults.",
        "example": {
          "headers": [
            {
              "columnType": "EVALUATIONID",
              "id": "...",
              "name": "..."
            },
            {
              "columnType": "DATE_LIST",
              "id": "...",
              "name": "..."
            }
          ],
          "rows": [
            {
              "list": [
                {
                  "concreteType": "...",
                  "contentMd5": "...",
                  "contentSize": 12345,
                  "contentType": "...",
                  "createdBy": "...",
                  "createdOn": "...",
                  "etag": "...",
                  "fileName": "...",
                  "id": "...",
                  "storageLocationId": 12345
                },
                {
                  "concreteType": "...",
                  "contentMd5": "...",
                  "contentSize": 12345,
                  "contentType": "...",
                  "createdBy": "...",
                  "createdOn": "...",
                  "etag": "...",
                  "fileName": "...",
                  "id": "...",
                  "storageLocationId": 12345
                }
              ]
            },
            {
              "list": [
                {
                  "concreteType": "...",
                  "contentMd5": "...",
                  "contentSize": 12345,
                  "contentType": "...",
                  "createdBy": "...",
                  "createdOn": "...",
                  "etag": "...",
                  "fileName": "...",
                  "id": "...",
                  "storageLocationId": 12345
                },
                {
                  "concreteType": "...",
                  "contentMd5": "...",
                  "contentSize": 12345,
                  "contentType": "...",
                  "createdBy": "...",
                  "createdOn": "...",
                  "etag": "...",
                  "fileName": "...",
                  "id": "...",
                  "storageLocationId": 12345
                }
              ]
            }
          ],
          "tableId": "..."
        },
        "properties": {
          "headers": {
            "description": "The list of ColumnModels ID that describes the rows of this set.",
            "items": {
              "$ref": "#/components/schemas/SelectColumn"
            },
            "type": "array"
          },
          "rows": {
            "description": "For each row a list of file handles for each requested column",
            "items": {
              "$ref": "#/components/schemas/FileHandleResults"
            },
            "type": "array"
          },
          "tableId": {
            "description": "The ID of the TableEntity than owns these rows",
            "type": "string"
          }
        },
        "title": "TableFileHandleResults",
        "type": "object"
      },
      "FacetColumnResult": {
        "description": "Resulting information about a faceted column",
        "example": {
          "columnName": "...",
          "concreteType": "...",
          "facetType": "enumeration"
        },
        "properties": {
          "columnName": {
            "description": "The name of the faceted column",
            "type": "string"
          },
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "facetType": {
            "$ref": "#/components/schemas/FacetType"
          }
        },
        "title": "FacetColumnResult",
        "type": "object"
      },
      "QueryNextPageToken": {
        "description": "Next page token for query",
        "example": {
          "concreteType": "...",
          "entityId": "...",
          "token": "..."
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "entityId": {
            "description": "The ID of an Entity.",
            "type": "string"
          },
          "token": {
            "description": "The token for the next page.",
            "type": "string"
          }
        },
        "title": "QueryNextPageToken",
        "type": "object"
      },
      "Row_table": {
        "description": "Represents a single row of a TableEntity",
        "example": {
          "etag": "...",
          "rowId": 12345,
          "values": [
            "...",
            "..."
          ],
          "versionNumber": 12345
        },
        "properties": {
          "etag": {
            "description": "For queries against EntityViews with query.includeEtag=true, this field will contain the etag of the entity. Will be null for all other cases.",
            "type": "string"
          },
          "rowId": {
            "description": "The immutable ID issued to a new row.",
            "type": "integer"
          },
          "values": {
            "description": "The values for each column of this row. To delete a row, set this to an empty list: []",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "versionNumber": {
            "description": "The version number of this row. Each row version is immutable, so when a row is updated a new version is created.",
            "type": "integer"
          }
        },
        "title": "Row",
        "type": "object"
      },
      "RowSet": {
        "description": "Represents a set of row of a TableEntity",
        "example": {
          "concreteType": "...",
          "etag": "...",
          "headers": [
            {
              "columnType": "FILEHANDLEID",
              "id": "...",
              "name": "..."
            },
            {
              "columnType": "SUBMISSIONID",
              "id": "...",
              "name": "..."
            }
          ],
          "rows": [
            {
              "etag": "...",
              "rowId": 12345,
              "values": [
                "...",
                "..."
              ],
              "versionNumber": 12345
            },
            {
              "etag": "...",
              "rowId": 12345,
              "values": [
                "...",
                "..."
              ],
              "versionNumber": 12345
            }
          ],
          "tableId": "..."
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "etag": {
            "description": "Any RowSet returned from Synapse will contain the current etag of the change set. To update any rows from a RowSet the etag must be provided with the POST.",
            "type": "string"
          },
          "headers": {
            "description": "The list of SelectColumns that describes the rows of this set.",
            "items": {
              "$ref": "#/components/schemas/SelectColumn"
            },
            "type": "array"
          },
          "rows": {
            "description": "The Rows of this set. The index of each row value aligns with the index of each header.",
            "items": {
              "$ref": "#/components/schemas/Row_table"
            },
            "type": "array"
          },
          "tableId": {
            "description": "The ID of the TableEntity than owns these rows",
            "type": "string"
          }
        },
        "title": "RowSet",
        "type": "object"
      },
      "QueryResult": {
        "description": "A page of query result.",
        "example": {
          "concreteType": "...",
          "nextPageToken": {
            "concreteType": "...",
            "entityId": "...",
            "token": "..."
          },
          "queryResults": {
            "concreteType": "...",
            "etag": "...",
            "headers": [
              {
                "columnType": "BOOLEAN_LIST",
                "id": "...",
                "name": "..."
              },
              {
                "columnType": "USERID_LIST",
                "id": "...",
                "name": "..."
              }
            ],
            "rows": [
              {
                "etag": "...",
                "rowId": 12345,
                "values": [
                  "...",
                  "..."
                ],
                "versionNumber": 12345
              },
              {
                "etag": "...",
                "rowId": 12345,
                "values": [
                  "...",
                  "..."
                ],
                "versionNumber": 12345
              }
            ],
            "tableId": "..."
          }
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "nextPageToken": {
            "$ref": "#/components/schemas/QueryNextPageToken"
          },
          "queryResults": {
            "$ref": "#/components/schemas/RowSet"
          }
        },
        "title": "QueryResult",
        "type": "object"
      },
      "SumFileSizes": {
        "description": "The sum of the file size for all files in the given view query.\nUse mask = 0x40 to include in the bundle.\n",
        "example": {
          "greaterThan": true,
          "sumFileSizesBytes": 12345
        },
        "properties": {
          "greaterThan": {
            "description": "When true, the actual sum of the files sizes is greater than the value\nprovided with 'sumFileSizesBytes'. When false, the actual sum of the\nfiles sizes is equlas the value provided with 'sumFileSizesBytes'\n",
            "type": "boolean"
          },
          "sumFileSizesBytes": {
            "description": "The sum of the file size in bytes.",
            "type": "integer"
          }
        },
        "title": "SumFileSizes",
        "type": "object"
      },
      "QueryResultBundle": {
        "description": "A bundle of information about a query result.",
        "example": {
          "columnModels": [
            {
              "columnType": "DATE_LIST",
              "defaultValue": "...",
              "enumValues": [
                "...",
                "..."
              ],
              "facetType": "enumeration",
              "id": "...",
              "maximumListLength": 100,
              "maximumSize": 12345,
              "name": "..."
            },
            {
              "columnType": "DOUBLE",
              "defaultValue": "...",
              "enumValues": [
                "...",
                "..."
              ],
              "facetType": "range",
              "id": "...",
              "maximumListLength": 100,
              "maximumSize": 100,
              "name": "..."
            }
          ],
          "concreteType": "...",
          "facets": [
            {
              "columnName": "...",
              "concreteType": "...",
              "facetType": "enumeration"
            },
            {
              "columnName": "...",
              "concreteType": "...",
              "facetType": "enumeration"
            }
          ],
          "lastUpdatedOn": "...",
          "maxRowsPerPage": 12345,
          "queryCount": 12345,
          "queryResult": {
            "concreteType": "...",
            "nextPageToken": {
              "concreteType": "...",
              "entityId": "...",
              "token": "..."
            },
            "queryResults": {
              "concreteType": "...",
              "etag": "...",
              "headers": [
                {},
                {}
              ],
              "rows": [
                {},
                {}
              ],
              "tableId": "..."
            }
          },
          "selectColumns": [
            {
              "columnType": "USERID_LIST",
              "id": "...",
              "name": "..."
            },
            {
              "columnType": "EVALUATIONID",
              "id": "...",
              "name": "..."
            }
          ],
          "sumFileSizes": {
            "greaterThan": true,
            "sumFileSizesBytes": 12345
          }
        },
        "properties": {
          "columnModels": {
            "description": "The list of ColumnModels for the table. Use mask = 0x10 to include in the bundle.",
            "items": {
              "$ref": "#/components/schemas/ColumnModel"
            },
            "type": "array"
          },
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "facets": {
            "description": "The list of facets for the search results",
            "items": {
              "$ref": "#/components/schemas/FacetColumnResult"
            },
            "type": "array"
          },
          "lastUpdatedOn": {
            "description": "The date-time when this table/view was last updated.\nNote: Since views are eventually consistent a view might still be\nout-of-date even if it was recently updated. Use mask = 0x80 to include in the bundle.\n",
            "type": "string"
          },
          "maxRowsPerPage": {
            "description": "The maximum number of rows that can be retrieved in a single call. This is a function of the columns that are selected in the query. Use mask = 0x8 to include in the bundle.",
            "type": "integer"
          },
          "queryCount": {
            "description": "The total number of rows that match the query. Use mask = 0x2 to include in the bundle.",
            "type": "integer"
          },
          "queryResult": {
            "$ref": "#/components/schemas/QueryResult"
          },
          "selectColumns": {
            "description": "The list of SelectColumns from the select clause. Use mask = 0x4 to include in the bundle.",
            "items": {
              "$ref": "#/components/schemas/SelectColumn"
            },
            "type": "array"
          },
          "sumFileSizes": {
            "$ref": "#/components/schemas/SumFileSizes"
          }
        },
        "title": "QueryResultBundle",
        "type": "object"
      },
      "QueryBundleRequest": {
        "description": "Query Bundle Request",
        "example": {
          "concreteType": "...",
          "entityId": "...",
          "partMask": 1,
          "query": {
            "additionalFilters": [
              {},
              {}
            ],
            "includeEntityEtag": true,
            "limit": 12345,
            "offset": 12345,
            "selectedFacets": [
              {
                "columnName": "...",
                "concreteType": "..."
              },
              {
                "columnName": "...",
                "concreteType": "..."
              }
            ],
            "sort": [
              {
                "column": "...",
                "direction": "DESC"
              },
              {
                "column": "...",
                "direction": "ASC"
              }
            ],
            "sql": "..."
          }
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "entityId": {
            "description": "Entity Id",
            "type": "string"
          },
          "partMask": {
            "description": "Optional, default all. The 'partsMask' is an integer mask that can be combined into to request any desired part.\nThe mask is defined as follows:\n* Query Results (queryResults) = 0x1\n* Query Count (queryCount) = 0x2\n* Select Columns (selectColumns) = 0x4\n* Max Rows Per Page (maxRowsPerPage) = 0x8\n* The Table Columns (columnModels) = 0x10\n* Facet statistics for each faceted column (facetStatistics) = 0x20\n* The sum of the file sizes (sumFileSizesBytes) = 0x40\n",
            "type": "integer"
          },
          "query": {
            "$ref": "#/components/schemas/Query"
          }
        },
        "title": "QueryBundleRequest",
        "type": "object"
      },
      "SnapshotRequest": {
        "description": "Request to create a new snapshot of a table or view. The provided comment,\nlabel, and activity ID will be applied to the current version thereby creating\na snapshot and locking the current version. After the snapshot is created a\nnew version will be started with an 'in-progress' label.\n",
        "example": {
          "snapshotActivityId": "...",
          "snapshotComment": "...",
          "snapshotLabel": "..."
        },
        "properties": {
          "snapshotActivityId": {
            "description": "Optional. If createNewSnapshot=true, the Activity ID to be applied to the\nsnapshot version. Null by default\n",
            "type": "string"
          },
          "snapshotComment": {
            "description": "Optional. If createNewSnapshot=true, the comment to be applied to the\nsnapshot version. Null by default\n",
            "type": "string"
          },
          "snapshotLabel": {
            "description": "Optional. If createNewSnapshot=true, the label to be applied to the\nsnapshot version. Null by default\n",
            "type": "string"
          }
        },
        "title": "SnapshotRequest",
        "type": "object"
      },
      "SnapshotResponse": {
        "description": "Response to creating a snapshot of a table of view.",
        "example": {
          "snapshotVersionNumber": 12345
        },
        "properties": {
          "snapshotVersionNumber": {
            "description": "The version number of the resulting snapshot.",
            "type": "integer"
          }
        },
        "title": "SnapshotResponse",
        "type": "object"
      },
      "TableUpdateResponse": {
        "description": "Abstraction for a response to update a table.",
        "example": {
          "concreteType": "..."
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          }
        },
        "title": "TableUpdateResponse",
        "type": "object"
      },
      "TableUpdateTransactionResponse": {
        "description": "An AsynchronousResponseBody returned from a table update transaction.",
        "example": {
          "concreteType": "...",
          "results": [
            {
              "concreteType": "..."
            },
            {
              "concreteType": "..."
            }
          ],
          "snapshotVersionNumber": 12345
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "results": {
            "description": "List of responses. There will be one response for each request in the transaction.",
            "items": {
              "$ref": "#/components/schemas/TableUpdateResponse"
            },
            "type": "array"
          },
          "snapshotVersionNumber": {
            "description": "The version number of the snapshot. Returned only, if a new snapshot was requested.",
            "type": "number"
          }
        },
        "title": "TableUpdateTransactionResponse",
        "type": "object"
      },
      "TableUpdateRequest": {
        "description": "Abstraction for a request to update a table.",
        "example": {
          "concreteType": "...",
          "entityId": "..."
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "entityId": {
            "description": "Entity Id",
            "type": "string"
          }
        },
        "title": "TableUpdateRequest",
        "type": "object"
      },
      "TableUpdateTransactionRequest": {
        "description": "An AsynchronousRequestBody to used make multiple changes to a table as a single 'transaction'.\nAll changes will either succeed or fail as a unit.\n",
        "example": {
          "changes": [
            {
              "concreteType": "...",
              "entityId": "..."
            },
            {
              "concreteType": "...",
              "entityId": "..."
            }
          ],
          "concreteType": "...",
          "createSnapshot": true,
          "entityId": "...",
          "snapshotOptions": {
            "snapshotActivityId": "...",
            "snapshotComment": "...",
            "snapshotLabel": "..."
          }
        },
        "properties": {
          "changes": {
            "description": "List of changes that describes schema and/or row changes to a table.",
            "items": {
              "$ref": "#/components/schemas/TableUpdateRequest"
            },
            "type": "array"
          },
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "createSnapshot": {
            "description": "When set to 'true', a snapshot of the table will be created after the change\nfrom this transaction request are applied to the table.\n",
            "type": "boolean"
          },
          "entityId": {
            "description": "Entity Id",
            "type": "string"
          },
          "snapshotOptions": {
            "$ref": "#/components/schemas/SnapshotRequest"
          }
        },
        "title": "TableUpdateTransactionRequest",
        "type": "object"
      },
      "DiscussionThreadBundle": {
        "description": "The Thread model object represents a single Thread.",
        "example": {
          "activeAuthors": [
            "...",
            "..."
          ],
          "createdBy": "...",
          "createdOn": "...",
          "etag": "...",
          "forumId": "...",
          "id": "...",
          "isDeleted": true,
          "isEdited": true,
          "isPinned": true,
          "lastActivity": "...",
          "messageKey": "...",
          "modifiedOn": "...",
          "numberOfReplies": 12345,
          "numberOfViews": 12345,
          "projectId": "...",
          "title": "..."
        },
        "properties": {
          "activeAuthors": {
            "description": "The list of userId whose most active on this Thread",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "createdBy": {
            "description": "The id of the user that created this Thread",
            "type": "string"
          },
          "createdOn": {
            "description": "The timestamp when this Thread was created",
            "type": "string"
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "forumId": {
            "description": "The ID of the forum this Thread belongs to",
            "type": "string"
          },
          "id": {
            "description": "The ID of the Thread",
            "type": "string"
          },
          "isDeleted": {
            "description": "Has this Thread been deleted?",
            "type": "boolean"
          },
          "isEdited": {
            "description": "Has the author edited this Thread?",
            "type": "boolean"
          },
          "isPinned": {
            "description": "Has this Thread been pinned?",
            "type": "boolean"
          },
          "lastActivity": {
            "description": "The timestamp when the last activity occurs on this Thread",
            "type": "string"
          },
          "messageKey": {
            "description": "The S3 key where the actual message stored",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The timestamp when this Thread was last modified",
            "type": "string"
          },
          "numberOfReplies": {
            "description": "The number of replies to this thread",
            "type": "integer"
          },
          "numberOfViews": {
            "description": "The number of unique users who has viewed this thread",
            "type": "integer"
          },
          "projectId": {
            "description": "The ID of the project this Thread belongs to",
            "type": "string"
          },
          "title": {
            "description": "The title of the Thread",
            "type": "string"
          }
        },
        "title": "DiscussionThreadBundle",
        "type": "object"
      },
      "PaginatedResultsOfDiscussionThreadBundle": {
        "description": "Page of Discussion Thread Bundles",
        "example": {
          "results": [
            {
              "activeAuthors": [
                "...",
                "..."
              ],
              "createdBy": "...",
              "createdOn": "...",
              "etag": "...",
              "forumId": "...",
              "id": "...",
              "isDeleted": true,
              "isEdited": true,
              "isPinned": true,
              "lastActivity": "...",
              "messageKey": "...",
              "modifiedOn": "...",
              "numberOfReplies": 12345,
              "numberOfViews": 12345,
              "projectId": "...",
              "title": "..."
            },
            {
              "activeAuthors": [
                "...",
                "..."
              ],
              "createdBy": "...",
              "createdOn": "...",
              "etag": "...",
              "forumId": "...",
              "id": "...",
              "isDeleted": true,
              "isEdited": true,
              "isPinned": true,
              "lastActivity": "...",
              "messageKey": "...",
              "modifiedOn": "...",
              "numberOfReplies": 12345,
              "numberOfViews": 12345,
              "projectId": "...",
              "title": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "Page of discussion thread bundles",
            "items": {
              "$ref": "#/components/schemas/DiscussionThreadBundle"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfDiscussionThreadBundle",
        "type": "object"
      },
      "VersionInfo": {
        "description": "JSON schema for VersionInfo POJO",
        "example": {
          "contentMd5": "...",
          "contentSize": "...",
          "id": "...",
          "modifiedBy": "...",
          "modifiedByPrincipalId": "...",
          "modifiedOn": "...",
          "versionComment": "...",
          "versionLabel": "...",
          "versionNumber": 12345
        },
        "properties": {
          "contentMd5": {
            "description": "Calculated md5 of the associated file (when applicable and available).",
            "type": "string"
          },
          "contentSize": {
            "description": "The size of the associated file (when applicable and available).",
            "type": "string"
          },
          "id": {
            "description": "The id of the entity",
            "type": "string"
          },
          "modifiedBy": {
            "description": "The display name of the user that last modified this entity.",
            "type": "string"
          },
          "modifiedByPrincipalId": {
            "description": "The user that last modified this entity.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date this entity was last modified.",
            "type": "string"
          },
          "versionComment": {
            "description": "The user defined version label of the entity",
            "type": "string"
          },
          "versionLabel": {
            "description": "The user defined version label of the entity",
            "type": "string"
          },
          "versionNumber": {
            "description": "The version number of the entity",
            "type": "integer"
          }
        },
        "title": "VersionInfo",
        "type": "object"
      },
      "PaginatedResultsOfVersionInfo": {
        "description": "JSON schema for Row POJO",
        "example": {
          "results": [
            {
              "contentMd5": "...",
              "contentSize": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedByPrincipalId": "...",
              "modifiedOn": "...",
              "versionComment": "...",
              "versionLabel": "...",
              "versionNumber": 12345
            },
            {
              "contentMd5": "...",
              "contentSize": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedByPrincipalId": "...",
              "modifiedOn": "...",
              "versionComment": "...",
              "versionLabel": "...",
              "versionNumber": 12345
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "Page of version info",
            "items": {
              "$ref": "#/components/schemas/VersionInfo"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfVersionInfo",
        "type": "object"
      },
      "FileHandleUpdateRequest": {
        "description": "Reuqest that can be used to update the file handle of an FileEntity",
        "example": {
          "newFileHandleId": "...",
          "oldFileHandleId": "..."
        },
        "properties": {
          "newFileHandleId": {
            "description": "The id of the new file handle to be associated with the FileEntity.\nThe user performing the request must be the owner of the file handle.\n",
            "type": "string"
          },
          "oldFileHandleId": {
            "description": "The id of the file handle currently associated to the FileEntity.\nUsed to avoid conflicting cuncurrent updates, if the id does not match\nthe current file handle id the request will be rejected with a\nPRECONDITION_FAILED (412) response.\n",
            "type": "string"
          }
        },
        "title": "FileHandleUpdateRequest",
        "type": "object"
      },
      "EntityId": {
        "description": "JSON schema for EntityId POJO",
        "example": {
          "id": "..."
        },
        "properties": {
          "id": {
            "description": "The id of an entity.",
            "type": "string"
          }
        },
        "title": "EntityId",
        "type": "object"
      },
      "EntityLookupRequest": {
        "description": "A request to look up an entity given parentId and the entity name.",
        "example": {
          "entityName": "...",
          "parentId": "..."
        },
        "properties": {
          "entityName": {
            "description": "The entity name",
            "type": "string"
          },
          "parentId": {
            "description": "The parentID",
            "type": "string"
          }
        },
        "title": "EntityLookupRequest",
        "type": "object"
      },
      "SortBy": {
        "description": "How results should be sorted.",
        "enum": [
          "NAME",
          "CREATED_ON",
          "MODIFIED_ON"
        ],
        "title": "SortBy",
        "type": "string"
      },
      "EntityChildrenRequest": {
        "description": "Request for EntityHeaders of the children of a given parent Entity",
        "example": {
          "includeSumFileSizes": true,
          "includeTotalChildCount": true,
          "includeTypes": [
            "entityview",
            "project"
          ],
          "nextPageToken": "...",
          "parentId": "...",
          "sortBy": "CREATED_ON",
          "sortDirection": "DESC"
        },
        "properties": {
          "includeSumFileSizes": {
            "description": "When true, the sum of the files sizes (bytes) with the given parentId and types will be included. False by default",
            "type": "boolean",
            "default": false
          },
          "includeTotalChildCount": {
            "description": "When true, the total number of children with the givenparentId and types will be included. False by default",
            "type": "boolean",
            "default": false
          },
          "includeTypes": {
            "description": "The types of children to be include. Must include at least one type.",
            "items": {
              "$ref": "#/components/schemas/EntityType"
            },
            "type": "array"
          },
          "nextPageToken": {
            "description": "Optional parameter used to fetch the next page of results. When NULL, the first page will be returned. The nextPageToken is provided with the results if there is another page of results.",
            "type": "string"
          },
          "parentId": {
            "description": "The ID of the parent. Set to null to list projects.",
            "type": "string"
          },
          "sortBy": {
            "$ref": "#/components/schemas/SortBy"
          },
          "sortDirection": {
            "$ref": "#/components/schemas/SortDirection"
          }
        },
        "title": "EntityChildrenRequest",
        "type": "object"
      },
      "EntityChildrenResponse": {
        "description": "Response of EntityHeaders for the children of a given parent Entity",
        "example": {
          "nextPageToken": "...",
          "page": [
            {
              "benefactorId": 12345,
              "createdBy": "...",
              "createdOn": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "...",
              "type": "...",
              "versionLabel": "...",
              "versionNumber": 12345
            },
            {
              "benefactorId": 12345,
              "createdBy": "...",
              "createdOn": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "...",
              "type": "...",
              "versionLabel": "...",
              "versionNumber": 12345
            }
          ],
          "sumFileSizesBytes": 12345,
          "totalChildCount": 12345
        },
        "properties": {
          "nextPageToken": {
            "description": "Token that can be used to get the next page. Null if there are no more results.",
            "type": "string"
          },
          "page": {
            "description": "The headers of each child.",
            "items": {
              "$ref": "#/components/schemas/EntityHeader"
            },
            "type": "array"
          },
          "sumFileSizesBytes": {
            "description": "The sum of the file sizes (bytes) with the requested parentId and types. Only returned if requested.",
            "type": "integer"
          },
          "totalChildCount": {
            "description": "The total number of children with the requested parentId and types. Only returned if requested.",
            "type": "integer"
          }
        },
        "title": "EntityChildrenResponse",
        "type": "object"
      },
      "ReferenceList": {
        "description": "An array of Reference objects",
        "example": {
          "references": [
            {
              "targetId": "...",
              "targetVersionNumber": 12345
            },
            {
              "targetId": "...",
              "targetVersionNumber": 12345
            }
          ]
        },
        "properties": {
          "references": {
            "description": "The list of references",
            "items": {
              "$ref": "#/components/schemas/Reference"
            },
            "type": "array"
          }
        },
        "title": "ReferenceList",
        "type": "object"
      },
      "PaginatedResultsOfEntityHeader": {
        "description": "Page of Entity Headers.",
        "example": {
          "results": [
            {
              "benefactorId": 12345,
              "createdBy": "...",
              "createdOn": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "...",
              "type": "...",
              "versionLabel": "...",
              "versionNumber": 12345
            },
            {
              "benefactorId": 12345,
              "createdBy": "...",
              "createdOn": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "...",
              "type": "...",
              "versionLabel": "...",
              "versionNumber": 12345
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "A page of entity headers.",
            "items": {
              "$ref": "#/components/schemas/EntityHeader"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfEntityHeader",
        "type": "object"
      },
      "EntityIdList": {
        "description": "List of Entity Ids",
        "example": {
          "idList": [
            "...",
            "..."
          ]
        },
        "properties": {
          "idList": {
            "description": "List of Entity Ids",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "EntityIdList",
        "type": "object"
      },
      "EntityThreadCount": {
        "description": "The model object represents the number of threads that mentioned a particular entity.",
        "example": {
          "count": 12345,
          "entityId": "..."
        },
        "properties": {
          "count": {
            "description": "The number of threads that the current user can view.",
            "type": "number"
          },
          "entityId": {
            "description": "The ID of an Entity.",
            "type": "string"
          }
        },
        "title": "EntityThreadCount",
        "type": "object"
      },
      "EntityThreadCounts": {
        "description": "The model object represents a list of EntityThreadCounts",
        "example": {
          "list": [
            {
              "count": 12345,
              "entityId": "..."
            },
            {
              "count": 12345,
              "entityId": "..."
            }
          ]
        },
        "properties": {
          "list": {
            "description": "List of Entity Thread Counts.",
            "items": {
              "$ref": "#/components/schemas/EntityThreadCount"
            },
            "type": "array"
          }
        },
        "title": "EntityThreadCounts",
        "type": "object"
      },
      "EvaluationRoundLimitType": {
        "title": "EvaluationRoundLimitType",
        "type": "string",
        "description": "Round limit type",
        "enum": [
          "TOTAL",
          "DAILY",
          "WEEKLY",
          "MONTHLY"
        ]
      },
      "EvaluationRoundLimit": {
        "title": "EvaluationRoundLimit",
        "type": "object",
        "description": "Round limit",
        "example": {
          "limitType": "MONTHLY",
          "maximumSubmissions": 2
        },
        "properties": {
          "limitType": {
            "$ref": "#/components/schemas/EvaluationRoundLimitType"
          },
          "maximumSubmissions": {
            "description": "Max number of submissions",
            "type": "integer"
          }
        }
      },
      "EvaluationRound": {
        "title": "EvaluationRound",
        "type": "object",
        "description": "Evaluation Round",
        "example": {
          "etag": "...",
          "evaluationId": "...",
          "id": "...",
          "limits": [
            {
              "limitType": "TOTAL",
              "maximumSubmissions": 12345
            },
            {
              "limitType": "WEEKLY",
              "maximumSubmissions": 12345
            }
          ],
          "roundEnd": "12345",
          "roundStart": "12345"
        },
        "properties": {
          "etag": {
            "description": "Synapse etag",
            "type": "string"
          },
          "evaluationId": {
            "description": "The unique immutable ID for this Evaluation.",
            "type": "string"
          },
          "id": {
            "description": "Evaluation round Id",
            "type": "string"
          },
          "limits": {
            "description": "List of round limits",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvaluationRoundLimit"
            }
          },
          "roundEnd": {
            "description": "End of round",
            "type": "string"
          },
          "roundStart": {
            "description": "Start of round",
            "type": "string"
          }
        }
      },
      "EvaluationRoundListRequest": {
        "title": "EvaluationRoundListRequest",
        "type": "object",
        "description": "Round list request",
        "example": {
          "nextPageToken": "..."
        },
        "properties": {
          "nextPageToken": {
            "description": "The token required to be sent with the subsequent batch.",
            "type": "string"
          }
        }
      },
      "EvaluationRoundListResponse": {
        "title": "EvaluationRoundListResponse",
        "type": "object",
        "description": "List of evaluation rounds",
        "example": {
          "nextPageToken": "...",
          "page": [
            {
              "etag": "...",
              "evaluationId": "...",
              "id": "...",
              "limits": [
                {
                  "limitType": "TOTAL",
                  "maximumSubmissions": 12345
                },
                {
                  "limitType": "TOTAL",
                  "maximumSubmissions": 12345
                }
              ],
              "roundEnd": "12345",
              "roundStart": "12345"
            },
            {
              "etag": "...",
              "evaluationId": "...",
              "id": "...",
              "limits": [
                {
                  "limitType": "TOTAL",
                  "maximumSubmissions": 12345
                },
                {
                  "limitType": "MONTHLY",
                  "maximumSubmissions": 12345
                }
              ],
              "roundEnd": "12345",
              "roundStart": "12345"
            }
          ]
        },
        "properties": {
          "nextPageToken": {
            "description": "The token required to be sent with the subsequent batch.",
            "type": "string"
          },
          "page": {
            "description": "Evaluation round",
            "items": {
              "$ref": "#/components/schemas/EvaluationRound"
            },
            "type": "array"
          }
        }
      },
      "DoubleAnnotation": {
        "description": "An Annotation containing a Float value",
        "example": {
          "isPrivate": true,
          "key": "...",
          "value": 1.2
        },
        "properties": {
          "isPrivate": {
            "description": "Flag denoting whether this Annotation should be private.",
            "type": "boolean"
          },
          "key": {
            "description": "The key of this Annotation",
            "type": "string"
          },
          "value": {
            "description": "The value of this Annotation",
            "type": "number"
          }
        },
        "title": "DoubleAnnotation",
        "type": "object"
      },
      "LongAnnotation": {
        "description": "An Annotation containing a Integer value",
        "example": {
          "isPrivate": true,
          "key": "...",
          "value": 12345
        },
        "properties": {
          "isPrivate": {
            "description": "Flag denoting whether this Annotation should be private.",
            "type": "boolean"
          },
          "key": {
            "description": "The key of this Annotation",
            "type": "string"
          },
          "value": {
            "description": "The value of this Annotation",
            "type": "integer"
          }
        },
        "title": "LongAnnotation",
        "type": "object"
      },
      "StringAnnotation": {
        "title": "StringAnnotation",
        "type": "object",
        "description": "An Annotation containing a String value",
        "example": {
          "isPrivate": true,
          "key": "...",
          "value": "..."
        },
        "properties": {
          "isPrivate": {
            "description": "Flag denoting whether this Annotation should be private.",
            "type": "boolean"
          },
          "key": {
            "description": "The key of this Annotation",
            "type": "string"
          },
          "value": {
            "description": "The value of this Annotation",
            "type": "string"
          }
        }
      },
      "Annotations_annotation": {
        "title": "Annotations",
        "type": "object",
        "description": "Primary container object for Annotations on a Synapse object",
        "example": {
          "doubleAnnos": [
            {
              "isPrivate": true,
              "key": "...",
              "value": 12345
            },
            {
              "isPrivate": true,
              "key": "...",
              "value": 12345
            }
          ],
          "longAnnos": [
            {
              "isPrivate": true,
              "key": "...",
              "value": 12345
            },
            {
              "isPrivate": true,
              "key": "...",
              "value": 12345
            }
          ],
          "objectId": "...",
          "scopeId": "...",
          "stringAnnos": [
            {
              "isPrivate": true,
              "key": "...",
              "value": "..."
            },
            {
              "isPrivate": true,
              "key": "...",
              "value": "..."
            }
          ],
          "version": 12345
        },
        "properties": {
          "doubleAnnos": {
            "description": "A list of DoubleAnnnotations",
            "items": {
              "$ref": "#/components/schemas/DoubleAnnotation"
            },
            "type": "array"
          },
          "longAnnos": {
            "description": "A list of LongAnnnotations",
            "items": {
              "$ref": "#/components/schemas/LongAnnotation"
            },
            "type": "array"
          },
          "objectId": {
            "description": "The Synapse ID of the object with which these Annotations are associated",
            "type": "string"
          },
          "scopeId": {
            "description": "The Synapse ID of the umbrella object above the object with which these Annotations are associated",
            "type": "string"
          },
          "stringAnnos": {
            "description": "A list of StringAnnnotations",
            "items": {
              "$ref": "#/components/schemas/StringAnnotation"
            },
            "type": "array"
          },
          "version": {
            "description": "The system controlled version of this collection of annotations",
            "type": "integer"
          }
        }
      },
      "SubmissionStatusEnum": {
        "description": "The possible states of a Synapse Submission.",
        "enum": [
          "OPEN",
          "CLOSED",
          "SCORED",
          "INVALID",
          "VALIDATED",
          "EVALUATION_IN_PROGRESS",
          "RECEIVED",
          "REJECTED",
          "ACCEPTED"
        ],
        "title": "SubmissionStatusEnum",
        "type": "string"
      },
      "SubmissionStatus_model": {
        "description": "A SubmissionStatus is a secondary, mutable object associated with a Submission.\nThis object should be used to contain scoring data about the Submission.\n",
        "example": {
          "annotations": {
            "doubleAnnos": [
              {
                "isPrivate": true,
                "key": "...",
                "value": 12345
              },
              {
                "isPrivate": true,
                "key": "...",
                "value": 12345
              }
            ],
            "longAnnos": [
              {
                "isPrivate": true,
                "key": "...",
                "value": 12345
              },
              {
                "isPrivate": true,
                "key": "...",
                "value": 12345
              }
            ],
            "objectId": "...",
            "scopeId": "...",
            "stringAnnos": [
              {
                "isPrivate": true,
                "key": "...",
                "value": "..."
              },
              {
                "isPrivate": true,
                "key": "...",
                "value": "..."
              }
            ],
            "version": 12345
          },
          "canCancel": true,
          "cancelRequested": true,
          "entityId": "...",
          "etag": "...",
          "id": "...",
          "modifiedOn": "12345",
          "status": "ACCEPTED",
          "statusVersion": 12345,
          "submissionAnnotations": {
            "annotations": {
              "property1": {
                "type": "TIMESTAMP_MS",
                "value": [
                  "...",
                  "..."
                ]
              },
              "property2": {
                "type": "TIMESTAMP_MS",
                "value": [
                  "...",
                  "..."
                ]
              }
            },
            "etag": "...",
            "id": "..."
          },
          "versionNumber": 12345
        },
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/Annotations_annotation"
          },
          "canCancel": {
            "description": "Can this submission be cancelled? By default, this will be set to False.\nUsers can read this value. Only the queue's scoring application can change this value.\n",
            "type": "boolean"
          },
          "cancelRequested": {
            "description": "Has user requested to cancel this submission? By default, this will be set to False. Submission owner can read and request to change this value.",
            "type": "boolean"
          },
          "entityId": {
            "description": "The Synapse ID of the Entity in this Submission.",
            "type": "string"
          },
          "etag": {
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates.\nThe eTag changes every time an SubmissionStatus is updated; it is used to detect when a client's\ncopy of an SubmissionStatus is out-of-date.\n",
            "type": "string"
          },
          "id": {
            "description": "The unique, immutable Synapse ID of the Submission.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date on which this SubmissionStatus was last modified.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SubmissionStatusEnum"
          },
          "statusVersion": {
            "description": "A version of the status, auto-generated and auto-incremented by the system and read-only to the client.",
            "type": "number"
          },
          "submissionAnnotations": {
            "$ref": "#/components/schemas/Annotations_v2"
          },
          "versionNumber": {
            "description": "The version number of the Entity in this Submission.",
            "type": "integer"
          }
        },
        "title": "SubmissionStatus",
        "type": "object"
      },
      "SubmissionStatusBatch": {
        "description": "A batch of status objects, to be updated en masse.",
        "example": {
          "batchToken": "...",
          "isFirstBatch": true,
          "isLastBatch": true,
          "statuses": [
            {
              "annotations": {
                "doubleAnnos": [
                  {},
                  {}
                ],
                "longAnnos": [
                  {},
                  {}
                ],
                "objectId": "...",
                "scopeId": "...",
                "stringAnnos": [
                  {},
                  {}
                ],
                "version": 12345
              },
              "canCancel": true,
              "cancelRequested": true,
              "entityId": "...",
              "etag": "...",
              "id": "...",
              "modifiedOn": "12345",
              "status": "RECEIVED",
              "statusVersion": 12345,
              "submissionAnnotations": {
                "annotations": {
                  "property1": {},
                  "property2": {}
                },
                "etag": "...",
                "id": "..."
              },
              "versionNumber": 12345
            },
            {
              "annotations": {
                "doubleAnnos": [
                  {},
                  {}
                ],
                "longAnnos": [
                  {},
                  {}
                ],
                "objectId": "...",
                "scopeId": "...",
                "stringAnnos": [
                  {},
                  {}
                ],
                "version": 12345
              },
              "canCancel": true,
              "cancelRequested": true,
              "entityId": "...",
              "etag": "...",
              "id": "...",
              "modifiedOn": "12345",
              "status": "CLOSED",
              "statusVersion": 12345,
              "submissionAnnotations": {
                "annotations": {
                  "property1": {},
                  "property2": {}
                },
                "etag": "...",
                "id": "..."
              },
              "versionNumber": 12345
            }
          ]
        },
        "properties": {
          "batchToken": {
            "description": "A token required to accept a batch submission for all but the first batch.",
            "type": "string"
          },
          "isFirstBatch": {
            "description": "true if and only if this is the first batch to upload",
            "type": "boolean"
          },
          "isLastBatch": {
            "description": "true if and only if this is the last batch to upload",
            "type": "boolean"
          },
          "statuses": {
            "description": "A collection of Submission Statuses",
            "items": {
              "$ref": "#/components/schemas/SubmissionStatus_model"
            },
            "type": "array"
          }
        },
        "title": "SubmissionStatusBatch",
        "type": "object"
      },
      "BatchUploadResponse": {
        "title": "BatchUploadResponse",
        "type": "object",
        "description": "The response for a batch SubmissionStatus upload.",
        "example": {
          "nextUploadToken": "..."
        },
        "properties": {
          "nextUploadToken": {
            "description": "The token required to be sent with the subsequent batch.",
            "type": "string"
          }
        }
      },
      "SubmissionContributor": {
        "description": "A contributor to an evaluation Submission",
        "example": {
          "createdOn": "...",
          "principalId": "..."
        },
        "properties": {
          "createdOn": {
            "description": "'date when contributor was added to Submission.\nNormally this will match the creation date of the Submission, but administrative override is allowed.'\n",
            "type": "string"
          },
          "principalId": {
            "description": "ID of the contributor",
            "type": "string"
          }
        },
        "title": "SubmissionContributor",
        "type": "object"
      },
      "Submission_model": {
        "description": "A Submission to a Synapse Evaluation is a pointer to a versioned Entity.\nSubmissions are immutable, so we archive a copy of the EntityBundle at the time of submission.\n",
        "example": {
          "contributors": [
            {
              "createdOn": "...",
              "principalId": "..."
            },
            {
              "createdOn": "...",
              "principalId": "..."
            }
          ],
          "createdOn": "...",
          "dockerDigest": "...",
          "dockerRepositoryName": "...",
          "entityBundleJSON": "...",
          "entityId": "...",
          "evaluationId": "...",
          "evaluationRoundId": "...",
          "id": "...",
          "name": "...",
          "submitterAlias": "...",
          "teamId": "...",
          "userId": "...",
          "versionNumber": 12345
        },
        "properties": {
          "contributors": {
            "description": "User ids of the submitter and (if a team submission) the team members involved in creating the submission.\n",
            "items": {
              "$ref": "#/components/schemas/SubmissionContributor"
            },
            "type": "array"
          },
          "createdOn": {
            "description": "The date on which Submission was created.",
            "type": "string"
          },
          "dockerDigest": {
            "description": "For Docker repositories, the digest from the commit. Null for other entity types.",
            "type": "string"
          },
          "dockerRepositoryName": {
            "description": "For Docker repositories, the name of the submitted repository. Null for other entity types.",
            "type": "string"
          },
          "entityBundleJSON": {
            "description": "The Bundled Entity and Annotations JSON at the time of submission.",
            "type": "string"
          },
          "entityId": {
            "description": "The Synapse ID of the Entity in this Submission.",
            "type": "string"
          },
          "evaluationId": {
            "description": "The Synapse ID of the Evaluation this Submission is for.",
            "type": "string"
          },
          "evaluationRoundId": {
            "description": "The Synapse ID of the EvaluationRound to which this was submitted. DO NOT specify a value for this. It will be filled in automatically upon creation of the Submission if the Evaluation is configured with an EvaluationRound.",
            "type": "string"
          },
          "id": {
            "description": "The unique, immutable Synapse ID of this Submission.",
            "type": "string"
          },
          "name": {
            "description": "The title of this Submission.",
            "type": "string"
          },
          "submitterAlias": {
            "description": "The alias for the user or team creating the submission.",
            "type": "string"
          },
          "teamId": {
            "description": "optional Team which collaborated on the submission",
            "type": "string"
          },
          "userId": {
            "description": "The Synapse ID of the user who created this Submission.",
            "type": "string"
          },
          "versionNumber": {
            "description": "The submitted version number of the Entity.",
            "type": "integer"
          }
        },
        "title": "Submission",
        "type": "object"
      },
      "PaginatedResultsOfSubmission": {
        "title": "PaginatedResultsOfSubmission",
        "type": "object",
        "description": "Paginated Results of submissions",
        "example": {
          "results": [
            {
              "contributors": [
                {
                  "createdOn": "...",
                  "principalId": "..."
                },
                {
                  "createdOn": "...",
                  "principalId": "..."
                }
              ],
              "createdOn": "...",
              "dockerDigest": "...",
              "dockerRepositoryName": "...",
              "entityBundleJSON": "...",
              "entityId": "...",
              "evaluationId": "...",
              "evaluationRoundId": "...",
              "id": "...",
              "name": "...",
              "submitterAlias": "...",
              "teamId": "...",
              "userId": "...",
              "versionNumber": 12345
            },
            {
              "contributors": [
                {
                  "createdOn": "...",
                  "principalId": "..."
                },
                {
                  "createdOn": "...",
                  "principalId": "..."
                }
              ],
              "createdOn": "...",
              "dockerDigest": "...",
              "dockerRepositoryName": "...",
              "entityBundleJSON": "...",
              "entityId": "...",
              "evaluationId": "...",
              "evaluationRoundId": "...",
              "id": "...",
              "name": "...",
              "submitterAlias": "...",
              "teamId": "...",
              "userId": "...",
              "versionNumber": 12345
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "Submission results",
            "items": {
              "$ref": "#/components/schemas/Submission_model"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "description": "Calculating the actual totalNumberOfResults is not longer supported.\nTherefore, for each page, the totalNumberOfResults is estimated using the current page,\nlimit, and offset. When the page size equals the limit,\nthe totalNumberOfResults will be offset+pageSize+ 1. Otherwise,\nthe totalNumberOfResults will be offset+pageSize.'\n",
            "type": "integer"
          }
        }
      },
      "SubmissionBundle": {
        "description": "A bundle object to contain a Submission and its accompanying SubmissionStatus.",
        "example": {
          "submission": {
            "contributors": [
              {
                "createdOn": "...",
                "principalId": "..."
              },
              {
                "createdOn": "...",
                "principalId": "..."
              }
            ],
            "createdOn": "...",
            "dockerDigest": "...",
            "dockerRepositoryName": "...",
            "entityBundleJSON": "...",
            "entityId": "...",
            "evaluationId": "...",
            "evaluationRoundId": "...",
            "id": "...",
            "name": "...",
            "submitterAlias": "...",
            "teamId": "...",
            "userId": "...",
            "versionNumber": 12345
          },
          "submissionStatus": {
            "annotations": {
              "doubleAnnos": [
                {},
                {}
              ],
              "longAnnos": [
                {},
                {}
              ],
              "objectId": "...",
              "scopeId": "...",
              "stringAnnos": [
                {},
                {}
              ],
              "version": 12345
            },
            "canCancel": true,
            "cancelRequested": true,
            "entityId": "...",
            "etag": "...",
            "id": "...",
            "modifiedOn": "...",
            "status": "RECEIVED",
            "statusVersion": 12345,
            "submissionAnnotations": {
              "annotations": {
                "property1": {},
                "property2": {}
              },
              "etag": "...",
              "id": "..."
            },
            "versionNumber": 12345
          }
        },
        "properties": {
          "submission": {
            "$ref": "#/components/schemas/Submission_model"
          },
          "submissionStatus": {
            "$ref": "#/components/schemas/SubmissionStatus_model"
          }
        },
        "title": "SubmissionBundle",
        "type": "object"
      },
      "PaginatedResultsOfSubmissionBundle": {
        "description": "Gets the requesting user's bundled Submissions and SubmissionStatuses\nto a specified Evaluation.\n",
        "example": {
          "results": [
            {
              "submission": {
                "contributors": [
                  {},
                  {}
                ],
                "createdOn": "...",
                "dockerDigest": "...",
                "dockerRepositoryName": "...",
                "entityBundleJSON": "...",
                "entityId": "...",
                "evaluationId": "...",
                "evaluationRoundId": "...",
                "id": "...",
                "name": "...",
                "submitterAlias": "...",
                "teamId": "...",
                "userId": "...",
                "versionNumber": 12345
              },
              "submissionStatus": {
                "annotations": {},
                "canCancel": true,
                "cancelRequested": true,
                "entityId": "...",
                "etag": "...",
                "id": "...",
                "modifiedOn": "...",
                "status": "REJECTED",
                "statusVersion": 12345,
                "submissionAnnotations": {},
                "versionNumber": 12345
              }
            },
            {
              "submission": {
                "contributors": [
                  {},
                  {}
                ],
                "createdOn": "...",
                "dockerDigest": "...",
                "dockerRepositoryName": "...",
                "entityBundleJSON": "...",
                "entityId": "...",
                "evaluationId": "...",
                "evaluationRoundId": "...",
                "id": "...",
                "name": "...",
                "submitterAlias": "...",
                "teamId": "...",
                "userId": "...",
                "versionNumber": 12345
              },
              "submissionStatus": {
                "annotations": {},
                "canCancel": true,
                "cancelRequested": true,
                "entityId": "...",
                "etag": "...",
                "id": "...",
                "modifiedOn": "...",
                "status": "VALIDATED",
                "statusVersion": 12345,
                "submissionAnnotations": {},
                "versionNumber": 12345
              }
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "The the id of the entity to which this reference refers",
            "items": {
              "$ref": "#/components/schemas/SubmissionBundle"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "description": "Calculating the actual totalNumberOfResults is not longer supported. Therefore,\nfor each page, the totalNumberOfResults is estimated using the current page,\nlimit, and offset. When the page size equals the limit, the totalNumberOfResults\nwill be offset+pageSize+ 1. Otherwise, the totalNumberOfResults will be offset+pageSize.\n",
            "type": "integer"
          }
        },
        "title": "PaginatedResultsOfSubmissionBundle",
        "type": "object"
      },
      "Integer": {
        "description": "Integer value",
        "type": "integer"
      },
      "PaginatedResultsOfSubmissionStatus": {
        "description": "Gets a collection of SubmissionStatuses to a specified Evaluation.",
        "example": {
          "results": [
            {
              "annotations": {
                "doubleAnnos": [
                  {},
                  {}
                ],
                "longAnnos": [
                  {},
                  {}
                ],
                "objectId": "...",
                "scopeId": "...",
                "stringAnnos": [
                  {},
                  {}
                ],
                "version": 12345
              },
              "canCancel": true,
              "cancelRequested": true,
              "entityId": "...",
              "etag": "...",
              "id": "...",
              "modifiedOn": "...",
              "status": "ACCEPTED",
              "statusVersion": 12345,
              "submissionAnnotations": {
                "annotations": {
                  "property1": {},
                  "property2": {}
                },
                "etag": "...",
                "id": "..."
              },
              "versionNumber": 12345
            },
            {
              "annotations": {
                "doubleAnnos": [
                  {},
                  {}
                ],
                "longAnnos": [
                  {},
                  {}
                ],
                "objectId": "...",
                "scopeId": "...",
                "stringAnnos": [
                  {},
                  {}
                ],
                "version": 12345
              },
              "canCancel": true,
              "cancelRequested": true,
              "entityId": "...",
              "etag": "...",
              "id": "...",
              "modifiedOn": "...",
              "status": "ACCEPTED",
              "statusVersion": 12345,
              "submissionAnnotations": {
                "annotations": {
                  "property1": {},
                  "property2": {}
                },
                "etag": "...",
                "id": "..."
              },
              "versionNumber": 12345
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "The the id of the entity to which this reference refers",
            "items": {
              "$ref": "#/components/schemas/SubmissionStatus_model"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "description": "Calculating the actual totalNumberOfResults is not longer supported.\nTherefore, for each page, the totalNumberOfResults is estimated using\nthe current page, limit, and offset. When the page size equals the limit,\nthe totalNumberOfResults will be offset+pageSize+ 1.\nOtherwise, the totalNumberOfResults will be offset+pageSize.\n",
            "type": "integer"
          }
        },
        "title": "PaginatedResultsOfSubmissionStatus",
        "type": "object"
      },
      "MemberSubmissionEligibility": {
        "description": "Describes the eligibility of an indivdiual to submit to an Evaluation queue,\nreflecting the queue's submission quotas and current submissions.\n",
        "example": {
          "hasConflictingSubmission": true,
          "isEligible": true,
          "isQuotaFilled": true,
          "isRegistered": true,
          "principalId": 12345
        },
        "properties": {
          "hasConflictingSubmission": {
            "description": "true if the individual has submitted alone or with another team",
            "type": "boolean"
          },
          "isEligible": {
            "description": "true if all criteria are met",
            "type": "boolean"
          },
          "isQuotaFilled": {
            "description": "true if team/individual has reached the submission quota (for the given submission round)",
            "type": "boolean"
          },
          "isRegistered": {
            "description": "true if team/individual is registered for challenge",
            "type": "boolean"
          },
          "principalId": {
            "description": "Synapse user id",
            "type": "number"
          }
        },
        "title": "MemberSubmissionEligibility",
        "type": "object"
      },
      "SubmissionEligibility": {
        "description": "Describes the eligibility of a to submit to an Evaluation queue,\nreflecting the queue's submission quotas and current submissions.\n",
        "example": {
          "isEligible": true,
          "isQuotaFilled": true,
          "isRegistered": true
        },
        "properties": {
          "isEligible": {
            "description": "true if all criteria are met",
            "type": "boolean"
          },
          "isQuotaFilled": {
            "description": "true if team/individual has reached the submission quota (for the given submission round)",
            "type": "boolean"
          },
          "isRegistered": {
            "description": "true if team/individual is registered for challenge",
            "type": "boolean"
          }
        },
        "title": "SubmissionEligibility",
        "type": "object"
      },
      "TeamSubmissionEligibility": {
        "description": "Describes the eligibility of a Challenge Team to submit to an Evalution queue,\nreflecting the queue's submission quotas and current submissions.\n",
        "example": {
          "eligibilityStateHash": 12345,
          "evaluationId": "...",
          "membersEligibility": [
            {
              "hasConflictingSubmission": true,
              "isEligible": true,
              "isQuotaFilled": true,
              "isRegistered": true,
              "principalId": 12345
            },
            {
              "hasConflictingSubmission": true,
              "isEligible": true,
              "isQuotaFilled": true,
              "isRegistered": true,
              "principalId": 12345
            }
          ],
          "teamEligibility": {
            "isEligible": true,
            "isQuotaFilled": true,
            "isRegistered": true
          },
          "teamId": "..."
        },
        "properties": {
          "eligibilityStateHash": {
            "description": "A hash of this object, used for optimistic concurrency.",
            "type": "integer"
          },
          "evaluationId": {
            "description": "The ID of the Evaluation of interest",
            "type": "string"
          },
          "membersEligibility": {
            "description": "Describes the submission eligibility of the contributors to the Submission.",
            "items": {
              "$ref": "#/components/schemas/MemberSubmissionEligibility"
            },
            "type": "array"
          },
          "teamEligibility": {
            "$ref": "#/components/schemas/SubmissionEligibility"
          },
          "teamId": {
            "description": "The ID of the Team of interest",
            "type": "string"
          }
        },
        "title": "TeamSubmissionEligibility",
        "type": "object"
      },
      "FormChangeRequest": {
        "description": "Request changes to a FormData object.",
        "example": {
          "fileHandleId": "...",
          "name": "..."
        },
        "properties": {
          "fileHandleId": {
            "description": "The fileHandleId for the data of the form.",
            "type": "string"
          },
          "name": {
            "description": "The name of the form. Required for FormData create.\nOptional for FormData update. Between 3 and 256 characters'\n",
            "type": "string",
            "minLength": 3,
            "maxLength": 256
          }
        },
        "title": "FormChangeRequest",
        "type": "object"
      },
      "StateEnum": {
        "description": "The enumeration of possible FormData submission states.",
        "enum": [
          "WAITING_FOR_SUBMISSION",
          "SUBMITTED_WAITING_FOR_REVIEW",
          "ACCEPTED",
          "REJECTED"
        ],
        "title": "StateEnum",
        "type": "string"
      },
      "SubmissionStatus_form": {
        "description": "The status of a a submitted FormData object.",
        "example": {
          "rejectionMessage": "...",
          "reviewedBy": "...",
          "reviewedOn": "...",
          "state": "WAITING_FOR_SUBMISSION",
          "submittedOn": "..."
        },
        "properties": {
          "rejectionMessage": {
            "description": "The message provided by the reviewer when a submission is rejected.",
            "type": "string"
          },
          "reviewedBy": {
            "description": "The id of the service user that reviewed the submission.",
            "type": "string"
          },
          "reviewedOn": {
            "description": "The date when this submission was reviewed.",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/StateEnum"
          },
          "submittedOn": {
            "description": "The date when the object was submitted.",
            "type": "string"
          }
        },
        "title": "SubmissionStatus",
        "type": "object"
      },
      "FormData": {
        "description": "User's data gathered from a form template.\nAll FormData belongs to a single FormGroup.\n",
        "example": {
          "createdBy": "...",
          "createdOn": "...",
          "dataFileHandleId": "...",
          "etag": "...",
          "formDataId": "...",
          "groupId": "...",
          "modifiedOn": "...",
          "name": "...",
          "submissionStatus": {
            "rejectionMessage": "...",
            "reviewedBy": "...",
            "reviewedOn": "...",
            "state": "REJECTED",
            "submittedOn": "..."
          }
        },
        "properties": {
          "createdBy": {
            "description": "Id of the user that created this object",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this object was originally created.",
            "type": "string"
          },
          "dataFileHandleId": {
            "description": "The identifier of the data FileHandle for this object.",
            "type": "string"
          },
          "etag": {
            "description": "Will change whenever there is a change to the this data or its status.",
            "type": "string"
          },
          "formDataId": {
            "description": "The system issued identifier that uniquely identifies this object.",
            "type": "string"
          },
          "groupId": {
            "description": "The identifier of the group that manages this data. Required.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date this object was last modified.",
            "type": "string"
          },
          "name": {
            "description": "User provided name for this submission. Required.",
            "type": "string"
          },
          "submissionStatus": {
            "$ref": "#/components/schemas/SubmissionStatus_form"
          }
        },
        "title": "FormData",
        "type": "object"
      },
      "FormRejection": {
        "description": "Form reviewer rejection data",
        "example": {
          "reason": "..."
        },
        "properties": {
          "reason": {
            "description": "The reason for the rejection. Limit 500 characters or less.",
            "type": "string",
            "maxLength": 500
          }
        },
        "title": "FormRejection",
        "type": "object"
      },
      "ListRequest": {
        "description": "Request for a list of FormData matching the provided filters.",
        "example": {
          "filterByState": [
            "SUBMITTED_WAITING_FOR_REVIEW",
            "ACCEPTED"
          ],
          "groupId": "...",
          "nextPageToken": "..."
        },
        "properties": {
          "filterByState": {
            "description": "Only return results with a state that matches elements from this set.\nRequired. Must include at least one element.\n",
            "items": {
              "$ref": "#/components/schemas/StateEnum"
            },
            "type": "array"
          },
          "groupId": {
            "description": "The group identifier. Required.",
            "type": "string"
          },
          "nextPageToken": {
            "description": "The results are automatically paginated. To get the next page,\nforward the nextPageToken returned from the last request.\n",
            "type": "string"
          }
        },
        "title": "ListRequest",
        "type": "object"
      },
      "ListResponse": {
        "description": "A single page of results from a ListRequest.",
        "example": {
          "nextPageToken": "...",
          "page": [
            {
              "createdBy": "...",
              "createdOn": "...",
              "dataFileHandleId": "...",
              "etag": "...",
              "formDataId": "...",
              "groupId": "...",
              "modifiedOn": "...",
              "name": "...",
              "submissionStatus": {
                "rejectionMessage": "...",
                "reviewedBy": "...",
                "reviewedOn": "...",
                "state": "ACCEPTED",
                "submittedOn": "..."
              }
            },
            {
              "createdBy": "...",
              "createdOn": "...",
              "dataFileHandleId": "...",
              "etag": "...",
              "formDataId": "...",
              "groupId": "...",
              "modifiedOn": "...",
              "name": "...",
              "submissionStatus": {
                "rejectionMessage": "...",
                "reviewedBy": "...",
                "reviewedOn": "...",
                "state": "ACCEPTED",
                "submittedOn": "..."
              }
            }
          ]
        },
        "properties": {
          "nextPageToken": {
            "description": "The results are automatically paginated. If another page of\nresults exists then a nextPageToken will be provided. Forward the\nprovided nextPageTokens in a subsequent list request to get the next page.\n",
            "type": "string"
          },
          "page": {
            "description": "A single page of results matching the request.",
            "items": {
              "$ref": "#/components/schemas/FormData"
            },
            "type": "array"
          }
        },
        "title": "ListResponse",
        "type": "object"
      },
      "FormGroup": {
        "description": "All form data belongs to a form group. Access to the group is managed via the ACL of the group.",
        "example": {
          "createdBy": "...",
          "createdOn": "...",
          "groupId": "...",
          "name": "..."
        },
        "properties": {
          "createdBy": {
            "description": "Id of the user that created this group",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this object was originally created.",
            "type": "string"
          },
          "groupId": {
            "description": "Unique identifier provided by the system.",
            "type": "string"
          },
          "name": {
            "description": "Unique name for the group provided by the caller.",
            "type": "string"
          }
        },
        "title": "FormGroup",
        "type": "object"
      },
      "Forum": {
        "description": "A Forum schema",
        "example": {
          "etag": "...",
          "id": "...",
          "projectId": "..."
        },
        "properties": {
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "id": {
            "description": "The ID of this object",
            "type": "string"
          },
          "projectId": {
            "description": "The ID of the project to which this forum belongs.\nThis ID may or may not start with prefix 'syn'.\n",
            "type": "string"
          }
        },
        "title": "Forum",
        "type": "object"
      },
      "ThreadCount": {
        "description": "The total number of threads.",
        "example": {
          "count": 12345
        },
        "properties": {
          "count": {
            "description": "The total number of threads.",
            "type": "number"
          }
        },
        "title": "ThreadCount",
        "type": "object"
      },
      "MembershipInvitation": {
        "description": "JSON schema for MembershipInvitation POJO",
        "example": {
          "createdBy": "...",
          "createdOn": "...",
          "expiresOn": "...",
          "id": "...",
          "inviteeEmail": "...",
          "inviteeId": "...",
          "message": "...",
          "teamId": "..."
        },
        "properties": {
          "createdBy": {
            "description": "The ID of the user that created this MembershipInvitation.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this MembershipInvitation was created.",
            "type": "string"
          },
          "expiresOn": {
            "description": "The date this invitation expires (optional).",
            "type": "string"
          },
          "id": {
            "description": "The id of the MembershipInvitation.",
            "type": "string"
          },
          "inviteeEmail": {
            "description": "The email address of the user being invited to join the Team.",
            "type": "string"
          },
          "inviteeId": {
            "description": "The principal ID of the user being invited to join the Team.",
            "type": "string"
          },
          "message": {
            "description": "The invitation message (optional).",
            "type": "string"
          },
          "teamId": {
            "description": "The id of the Team which the user is invited to join.",
            "type": "string"
          }
        },
        "title": "MembershipInvitation",
        "type": "object"
      },
      "MembershipInvtnSignedToken": {
        "description": "Signed token containing the information needed to retrieve a membership invitation.",
        "example": {
          "concreteType": "...",
          "createdOn": "...",
          "expiresOn": "...",
          "hmac": "...",
          "membershipInvitationId": "...",
          "version": 12345
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "createdOn": {
            "description": "The date-time the token was generated.",
            "type": "string"
          },
          "expiresOn": {
            "description": "The date-time when this token expires.",
            "type": "string"
          },
          "hmac": {
            "description": "The hash message authentication code for the message.",
            "type": "string"
          },
          "membershipInvitationId": {
            "description": "The ID of the membership invitation.",
            "type": "string"
          },
          "version": {
            "description": "The version of the key used to generate the HMAC.",
            "type": "integer"
          }
        },
        "title": "MembershipInvtnSignedToken",
        "type": "object"
      },
      "InviteeVerificationSignedToken": {
        "description": "Signed token containing the information needed to update the inviteeId of a MembershipInvitation.",
        "example": {
          "concreteType": "...",
          "createdOn": "...",
          "expiresOn": "...",
          "hmac": "...",
          "inviteeId": "...",
          "membershipInvitationId": "...",
          "version": 12345
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "createdOn": {
            "description": "The date-time the token was generated.",
            "type": "string"
          },
          "expiresOn": {
            "description": "The date-time when this token expires.",
            "type": "string"
          },
          "hmac": {
            "description": "The hash message authentication code for the message.",
            "type": "string"
          },
          "inviteeId": {
            "description": "The ID of the invitee.",
            "type": "string"
          },
          "membershipInvitationId": {
            "description": "The ID of the MembershipInvitation to update.",
            "type": "string"
          },
          "version": {
            "description": "The version of the key used to generate the HMAC.",
            "type": "integer"
          }
        },
        "title": "InviteeVerificationSignedToken",
        "type": "object"
      },
      "Count": {
        "description": "Count of items",
        "example": {
          "count": 12345
        },
        "properties": {
          "count": {
            "description": "Count of items",
            "type": "integer"
          }
        },
        "title": "Count",
        "type": "object"
      },
      "MembershipRequest": {
        "description": "JSON schema for MembershipRequest POJO",
        "example": {
          "createdBy": "...",
          "createdOn": "...",
          "expiresOn": "...",
          "id": "...",
          "message": "...",
          "teamId": "...",
          "userId": "..."
        },
        "properties": {
          "createdBy": {
            "description": "The ID of the user that created this MembershipRequest.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this MembershipRequest was created.",
            "type": "string"
          },
          "expiresOn": {
            "description": "The date this MembershipRequest expires (optional).",
            "type": "string"
          },
          "id": {
            "description": "The id of the MembershipRequest.",
            "type": "string"
          },
          "message": {
            "description": "The request message (optional).",
            "type": "string"
          },
          "teamId": {
            "description": "The id of the Team to which the request is sent.",
            "type": "string"
          },
          "userId": {
            "description": "The id of the user for whom membership is requested.",
            "type": "string"
          }
        },
        "title": "MembershipRequest",
        "type": "object"
      },
      "PaginatedResultsOfMessageToUser": {
        "description": "Page of messages",
        "example": {
          "results": [
            {
              "bcc": "...",
              "cc": "...",
              "createdBy": "...",
              "createdOn": "...",
              "fileHandleId": "...",
              "id": "...",
              "inReplyTo": "...",
              "inReplyToRoot": "...",
              "isNotificationMessage": true,
              "notificationUnsubscribeEndpoint": "...",
              "recipients": [
                "...",
                "..."
              ],
              "subject": "...",
              "to": "...",
              "userProfileSettingEndpoint": "...",
              "withProfileSettingLink": true,
              "withUnsubscribeLink": true
            },
            {
              "bcc": "...",
              "cc": "...",
              "createdBy": "...",
              "createdOn": "...",
              "fileHandleId": "...",
              "id": "...",
              "inReplyTo": "...",
              "inReplyToRoot": "...",
              "isNotificationMessage": true,
              "notificationUnsubscribeEndpoint": "...",
              "recipients": [
                "...",
                "..."
              ],
              "subject": "...",
              "to": "...",
              "userProfileSettingEndpoint": "...",
              "withProfileSettingLink": true,
              "withUnsubscribeLink": true
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "Page of messages",
            "items": {
              "$ref": "#/components/schemas/MessageToUser"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfMessageToUser",
        "type": "object"
      },
      "MessageRecipientSet": {
        "description": "Contains a set of IDs of the intended recipients of a message",
        "example": {
          "recipients": [
            "...",
            "..."
          ]
        },
        "properties": {
          "recipients": {
            "description": "The unique identifiers of the intended recipients of a message",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "MessageRecipientSet",
        "type": "object"
      },
      "MessageStatusType": {
        "description": "The status of the message, from the RECIPIENT'S standpoint\n",
        "enum": [
          "READ",
          "UNREAD",
          "ARCHIVED"
        ],
        "title": "MessageStatusType",
        "type": "string"
      },
      "MessageStatus": {
        "description": "JSON schema for a user message bundled with a status",
        "example": {
          "messageId": "...",
          "recipientId": "...",
          "status": "ARCHIVED"
        },
        "properties": {
          "messageId": {
            "description": "The unique identifier of the message.",
            "type": "string"
          },
          "recipientId": {
            "description": "The unique identifier of the recipient of this message.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/MessageStatusType"
          }
        },
        "title": "MessageStatus",
        "type": "object"
      },
      "MessageBundle": {
        "description": "JSON schema for a user message bundled with a status",
        "example": {
          "message": {
            "bcc": "...",
            "cc": "...",
            "createdBy": "...",
            "createdOn": "...",
            "fileHandleId": "...",
            "id": "...",
            "inReplyTo": "...",
            "inReplyToRoot": "...",
            "isNotificationMessage": true,
            "notificationUnsubscribeEndpoint": "...",
            "recipients": [
              "...",
              "..."
            ],
            "subject": "...",
            "to": "...",
            "userProfileSettingEndpoint": "...",
            "withProfileSettingLink": true,
            "withUnsubscribeLink": true
          },
          "status": {
            "messageId": "...",
            "recipientId": "...",
            "status": "UNREAD"
          }
        },
        "properties": {
          "message": {
            "$ref": "#/components/schemas/MessageToUser"
          },
          "status": {
            "$ref": "#/components/schemas/MessageStatus"
          }
        },
        "title": "MessageBundle",
        "type": "object"
      },
      "PaginatedResultsOfMessageBundle": {
        "description": "Page of message bundles",
        "example": {
          "effectiveSchema": "...",
          "results": [
            {
              "message": {
                "bcc": "...",
                "cc": "...",
                "createdBy": "...",
                "createdOn": "...",
                "fileHandleId": "...",
                "id": "...",
                "inReplyTo": "...",
                "inReplyToRoot": "...",
                "isNotificationMessage": true,
                "notificationUnsubscribeEndpoint": "...",
                "recipients": [
                  "...",
                  "..."
                ],
                "subject": "...",
                "to": "...",
                "userProfileSettingEndpoint": "...",
                "withProfileSettingLink": true,
                "withUnsubscribeLink": true
              },
              "status": {
                "messageId": "...",
                "recipientId": "...",
                "status": "ARCHIVED"
              }
            },
            {
              "message": {
                "bcc": "...",
                "cc": "...",
                "createdBy": "...",
                "createdOn": "...",
                "fileHandleId": "...",
                "id": "...",
                "inReplyTo": "...",
                "inReplyToRoot": "...",
                "isNotificationMessage": true,
                "notificationUnsubscribeEndpoint": "...",
                "recipients": [
                  "...",
                  "..."
                ],
                "subject": "...",
                "to": "...",
                "userProfileSettingEndpoint": "...",
                "withProfileSettingLink": true,
                "withUnsubscribeLink": true
              },
              "status": {
                "messageId": "...",
                "recipientId": "...",
                "status": "ARCHIVED"
              }
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "Page of message bundles",
            "items": {
              "$ref": "#/components/schemas/MessageBundle"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfMessageBundle",
        "type": "object"
      },
      "CreateDiscussionReply": {
        "description": "The model object represents a single Reply creation.",
        "example": {
          "messageMarkdown": "...",
          "threadId": "..."
        },
        "properties": {
          "messageMarkdown": {
            "description": "The markdown of the Reply's message\n",
            "type": "string"
          },
          "threadId": {
            "description": "The ID of the thread this Reply belongs to",
            "type": "string"
          }
        },
        "title": "CreateDiscussionReply",
        "type": "object"
      },
      "DiscussionReplyBundle": {
        "description": "The Reply model object represents a single reply in a thread.",
        "example": {
          "createdBy": "...",
          "createdOn": "...",
          "etag": "...",
          "forumId": "...",
          "id": "...",
          "isDeleted": true,
          "isEdited": true,
          "messageKey": "...",
          "modifiedOn": "...",
          "projectId": "...",
          "threadId": "..."
        },
        "properties": {
          "createdBy": {
            "description": "The id of the user that created this Reply",
            "type": "string"
          },
          "createdOn": {
            "description": "The timestamp when this Reply was created",
            "type": "string"
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "forumId": {
            "description": "The ID of the forum this Reply belongs to",
            "type": "string"
          },
          "id": {
            "description": "The ID of the reply",
            "type": "string"
          },
          "isDeleted": {
            "description": "Has this Reply been deleted?",
            "type": "boolean"
          },
          "isEdited": {
            "description": "Has the author edited this Reply?",
            "type": "boolean"
          },
          "messageKey": {
            "description": "The S3 key where the actual message stored",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The timestamp when this Reply was last modified",
            "type": "string"
          },
          "projectId": {
            "description": "The ID of the project this Reply belongs to",
            "type": "string"
          },
          "threadId": {
            "description": "The ID of the thread this Reply belongs to",
            "type": "string"
          }
        },
        "title": "DiscussionReplyBundle",
        "type": "object"
      },
      "UpdateReplyMessage": {
        "description": "The new message markdown",
        "example": {
          "messageMarkdown": "..."
        },
        "properties": {
          "messageMarkdown": {
            "description": "The new message markdown",
            "type": "string"
          }
        },
        "title": "UpdateReplyMessage",
        "type": "object"
      },
      "MessageURL": {
        "description": "The URL to download the file which contains the message.",
        "example": {
          "messageUrl": "..."
        },
        "properties": {
          "messageUrl": {
            "description": "The URL to download the file which contains the message.",
            "type": "string"
          }
        },
        "title": "MessageURL",
        "type": "object"
      },
      "ListJsonSchemaInfoRequest": {
        "description": "Request to list a single page of JsonSchemaInfo for the given organization name.",
        "example": {
          "nextPageToken": "...",
          "organizationName": "..."
        },
        "properties": {
          "nextPageToken": {
            "description": "Forward the returned 'nextPageToken' to get the next page of results.\n",
            "type": "string"
          },
          "organizationName": {
            "description": "The name of the Organization to list schemas for.",
            "type": "string"
          }
        },
        "title": "ListJsonSchemaInfoRequest",
        "type": "object"
      },
      "JsonSchemaInfo": {
        "description": "Information about a single JSON schema.",
        "example": {
          "createdBy": "...",
          "createdOn": "...",
          "organizationId": "...",
          "organizationName": "...",
          "schemaId": "...",
          "schemaName": "..."
        },
        "properties": {
          "createdBy": {
            "description": "The ID of the user that created this JsonSchema.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this JsonSchema was created.",
            "type": "string"
          },
          "organizationId": {
            "description": "The Synapse identifier issued to the Organization to which this JsonSchema belongs.",
            "type": "string"
          },
          "organizationName": {
            "description": "The name of the Organization to which this JsonSchema belongs.",
            "type": "string"
          },
          "schemaId": {
            "description": "The Synapse identifier issued to the JsonSchema.",
            "type": "string"
          },
          "schemaName": {
            "description": "The name of the JsonSchema.",
            "type": "string"
          }
        },
        "title": "JsonSchemaInfo",
        "type": "object"
      },
      "ListJsonSchemaInfoResponse": {
        "description": "A single page of the currently registered Organizations",
        "example": {
          "nextPageToken": "...",
          "page": [
            {
              "createdBy": "...",
              "createdOn": "...",
              "organizationId": "...",
              "organizationName": "...",
              "schemaId": "...",
              "schemaName": "..."
            },
            {
              "createdBy": "...",
              "createdOn": "...",
              "organizationId": "...",
              "organizationName": "...",
              "schemaId": "...",
              "schemaName": "..."
            }
          ]
        },
        "properties": {
          "nextPageToken": {
            "description": "Forward this token to get the next page of results.",
            "type": "string"
          },
          "page": {
            "description": "Page of JsonSchemaInfo.",
            "items": {
              "$ref": "#/components/schemas/JsonSchemaInfo"
            },
            "type": "array"
          }
        },
        "title": "ListJsonSchemaInfoResponse",
        "type": "object"
      },
      "Organization": {
        "description": "The first step in creating new type schema in Synapse is to setup and configure\nan organization. The name of the organization serves as the root for each schema's\n$id managed by that organization. The organization name 'org.sagebionetworks'\nis reserved for the core Synapse model objects. Each organization also has an\nAccess Control List (ACL) that controls who can add schemas to an organization.\nAll schemas created under an Organization will be considered publicly readable\nand reference-able. Organizations are immutable\n",
        "example": {
          "createdBy": "...",
          "createdOn": "...",
          "id": "...",
          "name": "..."
        },
        "properties": {
          "createdBy": {
            "description": "The ID of the user that created this Organization.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this Organization was created.",
            "type": "string"
          },
          "id": {
            "description": "The Synapse identifier issued to the Organization.",
            "type": "string"
          },
          "name": {
            "description": "The name of the organization servers as the root for each schema's\n$id managed under an organization, and each name must be unique.\n",
            "type": "string"
          }
        },
        "title": "Organization",
        "type": "object"
      },
      "CreateOrganizationRequest": {
        "description": "Request to create a new Organization.",
        "example": {
          "organizationName": "testing0983"
        },
        "properties": {
          "organizationName": {
            "description": "An organization name must be one or more alphanumeric strings\neach separated by a dot [ ('.')]. An alphanumeric string must start\nwith a letter followed by one or more letters or digits a-z.\nNames are case insensitive. Names cannot contain the reserved word 'sagebionetworks'\n",
            "type": "string",
            "minLength": 6,
            "maxLength": 250,
            "pattern": "^((?!sagebionetworks)[a-zA-Z0-9.])*$"
          }
        },
        "title": "CreateOrganizationRequest",
        "type": "object"
      },
      "ListOrganizationsRequest": {
        "description": "Request to list a single page of the currently registered Organizations",
        "example": {
          "nextPageToken": "..."
        },
        "properties": {
          "nextPageToken": {
            "description": "Forward the returned 'nextPageToken' to get the next page of results.\n",
            "type": "string"
          }
        },
        "title": "ListOrganizationsRequest",
        "type": "object"
      },
      "ListOrganizationsResponse": {
        "description": "A single page of the currently registered Organizations",
        "example": {
          "nextPageToken": "...",
          "page": [
            {
              "createdBy": "...",
              "createdOn": "...",
              "id": "...",
              "name": "..."
            },
            {
              "createdBy": "...",
              "createdOn": "...",
              "id": "...",
              "name": "..."
            }
          ]
        },
        "properties": {
          "nextPageToken": {
            "description": "Forward this token to get the next page of results.",
            "type": "string"
          },
          "page": {
            "description": "Page of Organizations.",
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array"
          }
        },
        "title": "ListOrganizationsResponse",
        "type": "object"
      },
      "TYPE": {
        "description": "https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1\nnull:\tA JSON \"null\" production\nboolean:\tA \"true\" or \"false\" value, from the JSON \"true\" or \"false\" productions\nobject:\tAn unordered set of properties mapping a string to an instance, from the JSON \"object\" production. If a \"type\" is not provided in a schema definition it will default to \"object\".\narray:\tAn ordered list of instances, from the JSON \"array\" production\nnumber:\tAn arbitrary-precision, base-10 decimal number value, from the JSON \"number\" production\nstring:\tA string of Unicode code points, from the JSON \"string\" production\ninteger:\tA number with no fractional part (no decimals).\n",
        "enum": [
          "null",
          "boolean",
          "object",
          "array",
          "number",
          "string",
          "integer"
        ],
        "title": "Type",
        "type": "string"
      },
      "JsonSchema": {
        "description": "The JSON schema is defined by: json-schema.org, specifically draft-07. Only features listed here are currently supported.",
        "properties": {
          "$id": {
            "description": "https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.8.2.2\n",
            "type": "string"
          },
          "$ref": {
            "description": "https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.8.2.4.1\n",
            "type": "string"
          },
          "$schema": {
            "description": "https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.8.1.1\n",
            "type": "string"
          },
          "_const": {
            "description": "https://json-schema.org/draft/2019-09/json-schema-validation.html#rfc.section.6.1.3\n",
            "type": "string"
          },
          "_else": {
            "$ref": "#/components/schemas/JSONObject"
          },
          "_enum": {
            "description": "https://json-schema.org/draft/2019-09/json-schema-validation.html#rfc.section.6.1.2\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "_if": {
            "$ref": "#/components/schemas/JSONObject"
          },
          "allOf": {
            "description": "Use allOf to 'extend' or 'implement' one or more schemas.\nhttps://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.1\n",
            "items": {
              "$ref": "#/components/schemas/JSONObject"
            },
            "type": "array"
          },
          "anyOf": {
            "description": "https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.2\n",
            "items": {
              "$ref": "#/components/schemas/JSONObject"
            },
            "type": "array"
          },
          "definitions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/JSONObject"
            },
            "description": "In an effort to support draft-07 implementations, we are using 'definitions'\ninstead of '$defs'.\nhttps://json-schema.org/draft/2019-09/json-schema-validation.html#rfc.appendix.A\n",
            "type": "object"
          },
          "description": {
            "description": "https://json-schema.org/draft/2019-09/json-schema-hypermedia.html#rfc.section.6.5.2'\n",
            "type": "string"
          },
          "format": {
            "description": "https://json-schema.org/draft/2019-09/json-schema-validation.html#rfc.section.7.3'\n",
            "type": "string"
          },
          "items": {
            "$ref": "#/components/schemas/JSONObject"
          },
          "maxLength": {
            "description": "https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.3.1'",
            "type": "integer"
          },
          "minLength": {
            "description": "https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.3.2'\n",
            "type": "integer"
          },
          "oneOf": {
            "description": "https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3'\n",
            "items": {
              "$ref": "#/components/schemas/JSONObject"
            },
            "type": "array"
          },
          "pattern": {
            "description": "https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.3.3\n",
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/JSONObject"
            },
            "description": "https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.3.2.1",
            "type": "object"
          },
          "required": {
            "description": "https://json-schema.org/draft/2019-09/json-schema-validation.html#rfc.section.6.5.3",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "source": {
            "description": "Used to indicate that this schema is derived from another object/schema.\nThe value should be a URL reference to the original work. The 'source' is\nsolely descriptive and should have no impact on validation.\n",
            "type": "string"
          },
          "then": {
            "$ref": "#/components/schemas/JSONObject"
          },
          "title": {
            "description": "https://json-schema.org/draft/2019-09/json-schema-hypermedia.html#rfc.section.6.5.1\n",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TYPE"
          }
        },
        "title": "JsonSchema",
        "type": "object"
      },
      "CreateSchemaResponse": {
        "description": "The response of a create JsonSchema request.",
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "newVersionInfo": {
            "$ref": "#/components/schemas/JsonSchemaVersionInfo"
          },
          "validationSchema": {
            "$ref": "#/components/schemas/JsonSchema"
          }
        },
        "title": "CreateSchemaResponse",
        "type": "object"
      },
      "CreateSchemaRequest": {
        "description": "An AsynchronousRequestBody to define a new JsonSchema.",
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "dryRun": {
            "description": "When true, an attempt will be made to create the schema normally,\nbut the resulting schema will not be retained. This can be used to validate\na schema without actually registering it. The default value is false.\n",
            "type": "boolean"
          },
          "schema": {
            "$ref": "#/components/schemas/JsonSchema"
          }
        },
        "title": "CreateSchemaRequest",
        "type": "object"
      },
      "GetValidationSchemaResponse": {
        "description": "Response body containing the resulting compiled validation schema.",
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "validationSchema": {
            "$ref": "#/components/schemas/JsonSchema"
          }
        },
        "title": "GetValidationSchemaResponse",
        "type": "object"
      },
      "GetValidationSchemaRequest": {
        "description": "To use a JSON schema for validation, the JSON schema plus all of its dependency\nschemas must be provided to a JSON schema validator. The 'validation' schema\nis simply a JSON schema with all of its dependencies added to the 'definitions'\nsection of the schema, making the schema self-contained.\n",
        "example": {
          "$id": "...",
          "concreteType": "..."
        },
        "properties": {
          "$id": {
            "description": "The $id of the JSON schema to get the validation schema for.",
            "type": "string"
          },
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          }
        },
        "title": "GetValidationSchemaRequest",
        "type": "object"
      },
      "ListJsonSchemaVersionInfoRequest": {
        "description": "Request to get a single page of schema version metadata for the given organization and schema name.",
        "example": {
          "nextPageToken": "...",
          "organizationName": "...",
          "schemaName": "..."
        },
        "properties": {
          "nextPageToken": {
            "description": "Forward the returned 'nextPageToken' to get the next page of results.\n",
            "type": "string"
          },
          "organizationName": {
            "description": "The name of the Organization.",
            "type": "string"
          },
          "schemaName": {
            "description": "The name of the JsonSchema to list versions to list schemas for.",
            "type": "string"
          }
        },
        "title": "ListJsonSchemaVersionInfoRequest",
        "type": "object"
      },
      "ListJsonSchemaVersionInfoResponse": {
        "description": "A single page of schema version metadata for the provided organization and schema name",
        "example": {
          "nextPageToken": "...",
          "page": [
            {
              "$id": "...",
              "createdBy": "...",
              "createdOn": "...",
              "jsonSHA256Hex": "...",
              "organizationId": "...",
              "organizationName": "...",
              "schemaId": "...",
              "schemaName": "...",
              "semanticVersion": "...",
              "versionId": "..."
            },
            {
              "$id": "...",
              "createdBy": "...",
              "createdOn": "...",
              "jsonSHA256Hex": "...",
              "organizationId": "...",
              "organizationName": "...",
              "schemaId": "...",
              "schemaName": "...",
              "semanticVersion": "...",
              "versionId": "..."
            }
          ]
        },
        "properties": {
          "nextPageToken": {
            "description": "Forward this token to get the next page of results.",
            "type": "string"
          },
          "page": {
            "description": "Page of JSON Schema version info",
            "items": {
              "$ref": "#/components/schemas/JsonSchemaVersionInfo"
            },
            "type": "array"
          }
        },
        "title": "ListJsonSchemaVersionInfoResponse",
        "type": "object"
      },
      "Team": {
        "description": "JSON schema for Team POJO",
        "example": {
          "canPublicJoin": true,
          "createdBy": "...",
          "createdOn": "...",
          "description": "...",
          "etag": "...",
          "icon": "...",
          "id": "...",
          "modifiedBy": "...",
          "modifiedOn": "...",
          "name": "..."
        },
        "properties": {
          "canPublicJoin": {
            "description": "true for teams which members can join without an invitation or approval",
            "type": "boolean"
          },
          "createdBy": {
            "description": "The ID of the user that created this Team.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this Team was created.",
            "type": "string"
          },
          "description": {
            "description": "A short description of this Team.",
            "type": "string"
          },
          "etag": {
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle\nconcurrent updates. Since the E-Tag changes every time a Team is updated\nit is used to detect when a client's current representation of a Team is out-of-date.\n",
            "type": "string"
          },
          "icon": {
            "description": "fileHandleId for icon image of the Team",
            "type": "string"
          },
          "id": {
            "description": "The id of the Team.",
            "type": "string"
          },
          "modifiedBy": {
            "description": "The ID of the user that last modified this Team.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date this Team was last modified.",
            "type": "string"
          },
          "name": {
            "description": "The name of the Team.",
            "type": "string"
          }
        },
        "title": "Team",
        "type": "object"
      },
      "PaginatedResultsOfTeam": {
        "description": "List of Teams",
        "example": {
          "results": [
            {
              "canPublicJoin": true,
              "createdBy": "...",
              "createdOn": "...",
              "description": "...",
              "etag": "...",
              "icon": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "..."
            },
            {
              "canPublicJoin": true,
              "createdBy": "...",
              "createdOn": "...",
              "description": "...",
              "etag": "...",
              "icon": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "List of Teams",
            "items": {
              "$ref": "#/components/schemas/Team"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfTeam",
        "type": "object"
      },
      "UserGroupHeader": {
        "description": "JSON schema for UserHeader POJO",
        "example": {
          "displayName": "...",
          "email": "...",
          "firstName": "...",
          "isIndividual": true,
          "lastName": "...",
          "ownerId": "...",
          "userName": "..."
        },
        "properties": {
          "displayName": {
            "description": "This is deprecated and will always be null",
            "type": "string"
          },
          "email": {
            "description": "User's current email address\n",
            "type": "string"
          },
          "firstName": {
            "description": "First Name",
            "type": "string"
          },
          "isIndividual": {
            "description": "True if this is a user, false if it is a group",
            "type": "boolean"
          },
          "lastName": {
            "description": "Last Name",
            "type": "string"
          },
          "ownerId": {
            "description": "A foreign key to the ID of the 'principal' object for the user.\n",
            "type": "string"
          },
          "userName": {
            "description": "A name chosen by the user that uniquely identifies them.",
            "type": "string"
          }
        },
        "title": "UserGroupHeader",
        "type": "object"
      },
      "TeamMember": {
        "description": "JSON schema for Team Member, which bundles UserGroupHeader and isAdmin",
        "example": {
          "isAdmin": true,
          "member": {
            "displayName": "...",
            "email": "...",
            "firstName": "...",
            "isIndividual": true,
            "lastName": "...",
            "ownerId": "...",
            "userName": "..."
          },
          "teamId": "..."
        },
        "properties": {
          "isAdmin": {
            "description": "True if the user is an administrator in the Team.",
            "type": "boolean"
          },
          "member": {
            "$ref": "#/components/schemas/UserGroupHeader"
          },
          "teamId": {
            "description": "The id of the Team.",
            "type": "string"
          }
        },
        "title": "TeamMember",
        "type": "object"
      },
      "TeamMembershipStatus": {
        "description": "JSON schema for the possible status of a User with respect to Team membership.",
        "example": {
          "canJoin": true,
          "canSendEmail": true,
          "hasOpenInvitation": true,
          "hasOpenRequest": true,
          "hasUnmetAccessRequirement": true,
          "isMember": true,
          "membershipApprovalRequired": true,
          "teamId": "...",
          "userId": "..."
        },
        "properties": {
          "canJoin": {
            "description": "true if and only if the user requesting this status information can join the user to the team",
            "type": "boolean"
          },
          "canSendEmail": {
            "description": "true if and only if the user can send an email to the team",
            "type": "boolean"
          },
          "hasOpenInvitation": {
            "description": "true if and only if the user has an open invitation to join the team",
            "type": "boolean"
          },
          "hasOpenRequest": {
            "description": "true if and only if the user has an open request to join the team",
            "type": "boolean"
          },
          "hasUnmetAccessRequirement": {
            "description": "true if and only if there is at least one unmet access requirement for the user on the team",
            "type": "boolean"
          },
          "isMember": {
            "description": "true if and only if the user is a member of the team",
            "type": "boolean"
          },
          "membershipApprovalRequired": {
            "description": "true if and only if team admin approval is required for the user to join the team",
            "type": "boolean"
          },
          "teamId": {
            "description": "The id of the Team.",
            "type": "string"
          },
          "userId": {
            "description": "The principal id of the user.",
            "type": "string"
          }
        },
        "title": "TeamMembershipStatus",
        "type": "object"
      },
      "IdList": {
        "description": "List of IDs",
        "example": {
          "list": [
            12345,
            12345
          ]
        },
        "properties": {
          "list": {
            "description": "List of IDs",
            "items": {
              "type": "integer"
            },
            "type": "array"
          }
        },
        "title": "IdList",
        "type": "object"
      },
      "ListWrapperOfTeamMember": {
        "description": "A list of Teams",
        "example": {
          "list": [
            {
              "isAdmin": true,
              "member": {
                "displayName": "...",
                "email": "...",
                "firstName": "...",
                "isIndividual": true,
                "lastName": "...",
                "ownerId": "...",
                "userName": "..."
              },
              "teamId": "..."
            },
            {
              "isAdmin": true,
              "member": {
                "displayName": "...",
                "email": "...",
                "firstName": "...",
                "isIndividual": true,
                "lastName": "...",
                "ownerId": "...",
                "userName": "..."
              },
              "teamId": "..."
            }
          ]
        },
        "properties": {
          "list": {
            "description": "List of teams",
            "items": {
              "$ref": "#/components/schemas/TeamMember"
            },
            "type": "array"
          }
        },
        "title": "ListWrapperOfTeamMember",
        "type": "object"
      },
      "PaginatedResultsOfMembershipInvitation": {
        "description": "Retrieve the open invitations from a Team, optionally filtering by the invitee.\nAn invitation is only open if it has not expired and if the user has not joined\nthe Team. Note: certain fields may be omitted when returned if the field value is null\n",
        "example": {
          "effectiveSchema": "...",
          "results": [
            {
              "createdBy": "...",
              "createdOn": "...",
              "expiresOn": "...",
              "id": "...",
              "inviteeEmail": "...",
              "inviteeId": "...",
              "message": "...",
              "teamId": "..."
            },
            {
              "createdBy": "...",
              "createdOn": "...",
              "expiresOn": "...",
              "id": "...",
              "inviteeEmail": "...",
              "inviteeId": "...",
              "message": "...",
              "teamId": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "The the id of the entity to which this reference refers",
            "items": {
              "$ref": "#/components/schemas/MembershipInvitation"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "description": "Calculating the actual totalNumberOfResults is not longer supported.\nTherefore, for each page, the totalNumberOfResults is estimated using\nthe current page, limit, and offset. When the page size equals the limit,\nthe totalNumberOfResults will be offset+pageSize+ 1. Otherwise, the\ntotalNumberOfResults will be offset+pageSize.\n",
            "type": "integer"
          }
        },
        "title": "PaginatedResultsOfMembershipInvitation",
        "type": "object"
      },
      "PaginatedResultsOfMembershipRequest": {
        "description": "List of Membership Requests",
        "example": {
          "effectiveSchema": "...",
          "results": [
            {
              "createdBy": "...",
              "createdOn": "...",
              "expiresOn": "...",
              "id": "...",
              "message": "...",
              "teamId": "...",
              "userId": "..."
            },
            {
              "createdBy": "...",
              "createdOn": "...",
              "expiresOn": "...",
              "id": "...",
              "message": "...",
              "teamId": "...",
              "userId": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "List of membership requests\n",
            "items": {
              "$ref": "#/components/schemas/MembershipRequest"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "description": "Calculating the actual totalNumberOfResults is not longer supported. Therefore,\nfor each page, the totalNumberOfResults is estimated using the current page, limit,\nand offset. When the page size equals the limit, the totalNumberOfResults will be\noffset+pageSize+ 1. Otherwise, the totalNumberOfResults will be offset+pageSize.\n",
            "type": "integer"
          }
        },
        "title": "PaginatedResultsOfMembershipRequest",
        "type": "object"
      },
      "ListWrapperOfTeam": {
        "description": "List of Teams.",
        "example": {
          "list": [
            {
              "canPublicJoin": true,
              "createdBy": "...",
              "createdOn": "...",
              "description": "...",
              "etag": "...",
              "icon": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "..."
            },
            {
              "canPublicJoin": true,
              "createdBy": "...",
              "createdOn": "...",
              "description": "...",
              "etag": "...",
              "icon": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "..."
            }
          ]
        },
        "properties": {
          "list": {
            "description": "List of Teams.",
            "items": {
              "$ref": "#/components/schemas/Team"
            },
            "type": "array"
          }
        },
        "title": "ListWrapperOfTeam",
        "type": "object"
      },
      "JoinTeamSignedToken": {
        "description": "Signed token containing the information needed to join a new user to a team.",
        "example": {
          "concreteType": "...",
          "createdOn": "...",
          "expiresOn": "...",
          "hmac": "...",
          "memberId": "...",
          "teamId": "...",
          "userId": "...",
          "version": 12345
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "createdOn": {
            "description": "The date-time the token was generated.",
            "type": "string"
          },
          "expiresOn": {
            "description": "The date-time when this token expires.",
            "type": "string"
          },
          "hmac": {
            "description": "The hash message authentication code for the message.",
            "type": "string"
          },
          "memberId": {
            "description": "The ID of the new team member.",
            "type": "string"
          },
          "teamId": {
            "description": "The ID of the team which the user was invited to join.",
            "type": "string"
          },
          "userId": {
            "description": "The ID of the user who is acting to add the new member to the Team.\nThe HMAC in the token authenticates that the request is being made by this user.'\n",
            "type": "string"
          },
          "version": {
            "description": "The version of the key used to generate the HMAC.",
            "type": "integer"
          }
        },
        "title": "JoinTeamSignedToken",
        "type": "object"
      },
      "ResponseMessage": {
        "description": "JSON schema for a user-readable message describing the response to a request.",
        "example": {
          "message": "..."
        },
        "properties": {
          "message": {
            "description": "a user-readable message describing the response to a request",
            "type": "string"
          }
        },
        "title": "ResponseMessage",
        "type": "object"
      },
      "PaginatedResultsOfTeamMember": {
        "description": "List of Team Members",
        "example": {
          "results": [
            {
              "isAdmin": true,
              "member": {
                "displayName": "...",
                "email": "...",
                "firstName": "...",
                "isIndividual": true,
                "lastName": "...",
                "ownerId": "...",
                "userName": "..."
              },
              "teamId": "..."
            },
            {
              "isAdmin": true,
              "member": {
                "displayName": "...",
                "email": "...",
                "firstName": "...",
                "isIndividual": true,
                "lastName": "...",
                "ownerId": "...",
                "userName": "..."
              },
              "teamId": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "List of Team Members",
            "items": {
              "$ref": "#/components/schemas/TeamMember"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfTeamMember",
        "type": "object"
      },
      "CreateDiscussionThread": {
        "description": "The model object represents a single Thread creation.",
        "example": {
          "forumId": "...",
          "messageMarkdown": "...",
          "title": "..."
        },
        "properties": {
          "forumId": {
            "description": "The ID of the forum this CreateThread belongs to",
            "type": "string"
          },
          "messageMarkdown": {
            "description": "The markdown of the Thread's message\n",
            "type": "string"
          },
          "title": {
            "description": "The title of the Thread",
            "type": "string"
          }
        },
        "title": "CreateDiscussionThread",
        "type": "object"
      },
      "UpdateThreadMessage": {
        "description": "Update Thread Message",
        "example": {
          "messageMarkdown": "..."
        },
        "properties": {
          "messageMarkdown": {
            "description": "The new message markdown",
            "type": "string"
          }
        },
        "title": "UpdateThreadMessage",
        "type": "object"
      },
      "PaginatedResultsOfDiscussionReplyBundle": {
        "description": "Page of Discussion Replies",
        "example": {
          "results": [
            {
              "createdBy": "...",
              "createdOn": "...",
              "etag": "...",
              "forumId": "...",
              "id": "...",
              "isDeleted": true,
              "isEdited": true,
              "messageKey": "...",
              "modifiedOn": "...",
              "projectId": "...",
              "threadId": "..."
            },
            {
              "createdBy": "...",
              "createdOn": "...",
              "etag": "...",
              "forumId": "...",
              "id": "...",
              "isDeleted": true,
              "isEdited": true,
              "messageKey": "...",
              "modifiedOn": "...",
              "projectId": "...",
              "threadId": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "Page of Discussion Replies",
            "items": {
              "$ref": "#/components/schemas/DiscussionReplyBundle"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfDiscussionReplyBundle",
        "type": "object"
      },
      "ReplyCount": {
        "description": "The total number of replies.",
        "example": {
          "count": 12345
        },
        "properties": {
          "count": {
            "description": "The total number of replies.",
            "type": "number"
          }
        },
        "title": "ReplyCount",
        "type": "object"
      },
      "UpdateThreadTitle": {
        "description": "Update Thread Title",
        "example": {
          "title": "..."
        },
        "properties": {
          "title": {
            "description": "New Thread Title",
            "type": "string"
          }
        },
        "title": "UpdateThreadTitle",
        "type": "object"
      },
      "TrashedEntity": {
        "description": "JSON schema for the TrashEntity POJO. A trashed entity is an entity in the trash can.",
        "example": {
          "deletedByPrincipalId": "...",
          "deletedOn": "...",
          "entityId": "...",
          "entityName": "...",
          "originalParentId": "..."
        },
        "properties": {
          "deletedByPrincipalId": {
            "description": "The ID of the user who deleted the entity.",
            "type": "string"
          },
          "deletedOn": {
            "description": "The date and time when the deletion occurred.",
            "type": "string"
          },
          "entityId": {
            "description": "The id of the entity.",
            "type": "string"
          },
          "entityName": {
            "description": "The name of this entity",
            "type": "string"
          },
          "originalParentId": {
            "description": "The ID of the original parent before deletion.",
            "type": "string"
          }
        },
        "title": "TrashedEntity",
        "type": "object"
      },
      "PaginatedResultsOfTrashedEntity": {
        "description": "List of trashed entities",
        "example": {
          "effectiveSchema": "...",
          "results": [
            {
              "deletedByPrincipalId": "...",
              "deletedOn": "...",
              "entityId": "...",
              "entityName": "...",
              "originalParentId": "..."
            },
            {
              "deletedByPrincipalId": "...",
              "deletedOn": "...",
              "entityId": "...",
              "entityName": "...",
              "originalParentId": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "List of trashed entities.",
            "items": {
              "$ref": "#/components/schemas/TrashedEntity"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfTrashedEntity",
        "type": "object"
      },
      "Settings": {
        "description": "Contains a user's notification settings\n",
        "example": {
          "markEmailedMessagesAsRead": true,
          "sendEmailNotifications": true
        },
        "properties": {
          "markEmailedMessagesAsRead": {
            "description": "Should messages that are emailed to the user be marked as READ in Synapse? Default false.",
            "type": "boolean",
            "default": false
          },
          "sendEmailNotifications": {
            "description": "Should the user receive email notifications? Default true.",
            "type": "boolean",
            "default": true
          }
        },
        "title": "Settings",
        "type": "object"
      },
      "UserPreference": {
        "description": "User preferences",
        "example": {
          "concreteType": "...",
          "name": "..."
        },
        "properties": {
          "concreteType": {
            "description": "Concrete type",
            "type": "string"
          },
          "name": {
            "description": "The name of the user preference.",
            "type": "string"
          }
        },
        "title": "UserPreference",
        "type": "object"
      },
      "UserProfile": {
        "description": "JSON schema for UserProfile POJO",
        "example": {
          "RStudioUrl": "...",
          "company": "...",
          "createdOn": "...",
          "displayName": "...",
          "email": "...",
          "emails": [
            "...",
            "..."
          ],
          "etag": "...",
          "firstName": "...",
          "industry": "...",
          "lastName": "...",
          "location": "...",
          "notificationSettings": {
            "markEmailedMessagesAsRead": true,
            "sendEmailNotifications": true
          },
          "openIds": [
            "...",
            "..."
          ],
          "ownerId": "...",
          "position": "...",
          "preferences": [
            {
              "concreteType": "...",
              "name": "..."
            },
            {
              "concreteType": "...",
              "name": "..."
            }
          ],
          "profilePicureFileHandleId": "...",
          "summary": "...",
          "teamName": "...",
          "url": "...",
          "userName": "..."
        },
        "properties": {
          "RStudioUrl": {
            "description": "URL for RStudio server assigned to the user",
            "type": "string"
          },
          "company": {
            "description": "This person's current affiliation\n",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this profile was created.",
            "type": "string"
          },
          "displayName": {
            "description": "Will always be null.",
            "type": "string",
            "deprecated": true
          },
          "email": {
            "description": "Users can have more than one email. See emails",
            "type": "string",
            "deprecated": true
          },
          "emails": {
            "description": "The list of user email addresses registered to this user.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "firstName": {
            "description": "This person's given name (forename)\n",
            "type": "string"
          },
          "industry": {
            "description": "The industry/discipline that this person is associated with",
            "type": "string"
          },
          "lastName": {
            "description": "This person's family name (surname)\n",
            "type": "string"
          },
          "location": {
            "description": "This person's location\n",
            "type": "string"
          },
          "notificationSettings": {
            "$ref": "#/components/schemas/Settings"
          },
          "openIds": {
            "description": "'The list of OpenIds bound to this user's account.'\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ownerId": {
            "description": "'A foreign key to the ID of the 'principal' object for the user.'\n",
            "type": "string"
          },
          "position": {
            "description": "This person's current position title\n",
            "type": "string"
          },
          "preferences": {
            "description": "User preferences",
            "items": {
              "$ref": "#/components/schemas/UserPreference"
            },
            "type": "array"
          },
          "profilePicureFileHandleId": {
            "description": "The FileHandle.id of the user's profile picture.\n",
            "type": "string"
          },
          "summary": {
            "description": "A summary description about this person",
            "type": "string"
          },
          "teamName": {
            "description": "This person's default team name\n",
            "type": "string"
          },
          "url": {
            "description": "A link to more information about this person",
            "type": "string"
          },
          "userName": {
            "description": "A name chosen by the user that uniquely identifies them.",
            "type": "string"
          }
        },
        "title": "UserProfile",
        "type": "object"
      },
      "PaginatedResultsOfUserProfile": {
        "description": "Page of UserProfiles",
        "example": {
          "results": [
            {
              "RStudioUrl": "...",
              "company": "...",
              "createdOn": "...",
              "displayName": "...",
              "email": "...",
              "emails": [
                "...",
                "..."
              ],
              "etag": "...",
              "firstName": "...",
              "industry": "...",
              "lastName": "...",
              "location": "...",
              "notificationSettings": {
                "markEmailedMessagesAsRead": true,
                "sendEmailNotifications": true
              },
              "openIds": [
                "...",
                "..."
              ],
              "ownerId": "...",
              "position": "...",
              "preferences": [
                {
                  "concreteType": "...",
                  "name": "..."
                },
                {
                  "concreteType": "...",
                  "name": "..."
                }
              ],
              "profilePicureFileHandleId": "...",
              "summary": "...",
              "teamName": "...",
              "url": "...",
              "userName": "..."
            },
            {
              "RStudioUrl": "...",
              "company": "...",
              "createdOn": "...",
              "displayName": "...",
              "email": "...",
              "emails": [
                "...",
                "..."
              ],
              "etag": "...",
              "firstName": "...",
              "industry": "...",
              "lastName": "...",
              "location": "...",
              "notificationSettings": {
                "markEmailedMessagesAsRead": true,
                "sendEmailNotifications": true
              },
              "openIds": [
                "...",
                "..."
              ],
              "ownerId": "...",
              "position": "...",
              "preferences": [
                {
                  "concreteType": "...",
                  "name": "..."
                },
                {
                  "concreteType": "...",
                  "name": "..."
                }
              ],
              "profilePicureFileHandleId": "...",
              "summary": "...",
              "teamName": "...",
              "url": "...",
              "userName": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "List of User profiles",
            "items": {
              "$ref": "#/components/schemas/UserProfile"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfUserProfile",
        "type": "object"
      },
      "AttachmentMetadata": {
        "description": "The metadata of a file attached to a Verification Submission",
        "example": {
          "fileName": "...",
          "id": "..."
        },
        "properties": {
          "fileName": {
            "description": "The name of a file",
            "type": "string"
          },
          "id": {
            "description": "The identifier of a file",
            "type": "string"
          }
        },
        "title": "AttachmentMetadata",
        "type": "object"
      },
      "VerificationStateEnum": {
        "description": "The enumeration of possible verification states.",
        "enum": [
          "SUBMITTED",
          "APPROVED",
          "REJECTED",
          "SUSPENDED"
        ],
        "title": "VerificationStateEnum",
        "type": "string"
      },
      "VerificationState": {
        "description": "The state of a verification submission",
        "example": {
          "createdBy": "...",
          "createdOn": "...",
          "notes": "...",
          "reason": "...",
          "state": "APPROVED"
        },
        "properties": {
          "createdBy": {
            "description": "The principal ID of the user who created this object",
            "type": "string"
          },
          "createdOn": {
            "description": "The date and time this object was created",
            "type": "string"
          },
          "notes": {
            "description": "Additional notes that can be set by the ACT team and that is not exposed to the end user.",
            "type": "string"
          },
          "reason": {
            "description": "The reason for putting the verification submission in this state.",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/VerificationStateEnum"
          }
        },
        "title": "VerificationState",
        "type": "object"
      },
      "VerificationSubmission": {
        "description": "User info submitted for verification by Synapse ACT",
        "example": {
          "attachments": [
            {
              "fileName": "...",
              "id": "..."
            },
            {
              "fileName": "...",
              "id": "..."
            }
          ],
          "company": "...",
          "createdBy": "...",
          "createdOn": "...",
          "emails": [
            "...",
            "..."
          ],
          "firstName": "...",
          "id": "...",
          "lastName": "...",
          "location": "...",
          "notificationEmail": "...",
          "orcid": "...",
          "stateHistory": [
            {
              "createdBy": "...",
              "createdOn": "...",
              "notes": "...",
              "reason": "...",
              "state": "SUSPENDED"
            },
            {
              "createdBy": "...",
              "createdOn": "...",
              "notes": "...",
              "reason": "...",
              "state": "SUSPENDED"
            }
          ]
        },
        "properties": {
          "attachments": {
            "description": "Metadata of Files attached to the submission.\nThe list will be emptied after the state is APPROVED or REJECTED.\n",
            "items": {
              "$ref": "#/components/schemas/AttachmentMetadata"
            },
            "type": "array"
          },
          "company": {
            "description": "This person's current affiliation\n",
            "type": "string"
          },
          "createdBy": {
            "description": "The principal ID of the user requesting verification",
            "type": "string"
          },
          "createdOn": {
            "description": "The date and time this object was created",
            "type": "string"
          },
          "emails": {
            "description": "The list of user email addresses registered to this user.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "firstName": {
            "description": "This person's given name (forename)\n",
            "type": "string"
          },
          "id": {
            "description": "The ID of this object",
            "type": "string"
          },
          "lastName": {
            "description": "This person's family name (surname)\n",
            "type": "string"
          },
          "location": {
            "description": "This person's location\n",
            "type": "string"
          },
          "notificationEmail": {
            "description": "The primary (notification) email address registered to this user.",
            "type": "string"
          },
          "orcid": {
            "description": "The user's ORCID URI\n",
            "type": "string"
          },
          "stateHistory": {
            "description": "List of state changes the submission has passed through, ordered by time.\nThe last in the list contains the current state of the submission.\n",
            "items": {
              "$ref": "#/components/schemas/VerificationState"
            },
            "type": "array"
          }
        },
        "title": "VerificationSubmission",
        "type": "object"
      },
      "UserBundle": {
        "description": "JSON schema for UserBundle POJO",
        "example": {
          "ORCID": "...",
          "isACTMember": true,
          "isCertified": true,
          "isVerified": true,
          "userId": "...",
          "userProfile": {
            "RStudioUrl": "...",
            "company": "...",
            "createdOn": "...",
            "displayName": "...",
            "email": "...",
            "emails": [
              "...",
              "..."
            ],
            "etag": "...",
            "firstName": "...",
            "industry": "...",
            "lastName": "...",
            "location": "...",
            "notificationSettings": {
              "markEmailedMessagesAsRead": true,
              "sendEmailNotifications": true
            },
            "openIds": [
              "...",
              "..."
            ],
            "ownerId": "...",
            "position": "...",
            "preferences": [
              {
                "concreteType": "...",
                "name": "..."
              },
              {
                "concreteType": "...",
                "name": "..."
              }
            ],
            "profilePicureFileHandleId": "...",
            "summary": "...",
            "teamName": "...",
            "url": "...",
            "userName": "..."
          },
          "verificationSubmission": {
            "attachments": [
              {
                "fileName": "...",
                "id": "..."
              },
              {
                "fileName": "...",
                "id": "..."
              }
            ],
            "company": "...",
            "createdBy": "...",
            "createdOn": "...",
            "emails": [
              "...",
              "..."
            ],
            "firstName": "...",
            "id": "...",
            "lastName": "...",
            "location": "...",
            "notificationEmail": "...",
            "orcid": "...",
            "stateHistory": [
              {
                "createdBy": "...",
                "createdOn": "...",
                "notes": "...",
                "reason": "...",
                "state": "SUSPENDED"
              },
              {
                "createdBy": "...",
                "createdOn": "...",
                "notes": "...",
                "reason": "...",
                "state": "REJECTED"
              }
            ]
          }
        },
        "properties": {
          "ORCID": {
            "description": "The ORCID ID for the user, if any",
            "type": "string"
          },
          "isACTMember": {
            "description": "true if the user is an ACT member",
            "type": "boolean"
          },
          "isCertified": {
            "description": "true if the user is Certified",
            "type": "boolean"
          },
          "isVerified": {
            "description": "true if the user is Verified",
            "type": "boolean"
          },
          "userId": {
            "description": "The ID of the user described by this bundle",
            "type": "string"
          },
          "userProfile": {
            "$ref": "#/components/schemas/UserProfile"
          },
          "verificationSubmission": {
            "$ref": "#/components/schemas/VerificationSubmission"
          }
        },
        "title": "UserBundle",
        "type": "object"
      },
      "WikiPageKey": {
        "description": "Reference to a WikiPage",
        "example": {
          "ownerObjectId": "...",
          "ownerObjectType": "ORGANIZATION",
          "wikiPageId": "..."
        },
        "properties": {
          "ownerObjectId": {
            "description": "The owner of this page.",
            "type": "string"
          },
          "ownerObjectType": {
            "$ref": "#/components/schemas/ObjectType"
          },
          "wikiPageId": {
            "description": "The ID of the wiki page.",
            "type": "string"
          }
        },
        "title": "WikiPageKey",
        "type": "object"
      },
      "Question": {
        "description": "A single question in a Quiz",
        "example": {
          "concreteType": "...",
          "docLink": "...",
          "helpText": "...",
          "prompt": "...",
          "questionIndex": 12345,
          "reference": {
            "ownerObjectId": "...",
            "ownerObjectType": "MESSAGE",
            "wikiPageId": "..."
          }
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "docLink": {
            "description": "Link to the document that contains information for background reading related to the question.",
            "type": "string"
          },
          "helpText": {
            "description": "A short text that provides a snippet of help to answer the question.",
            "type": "string"
          },
          "prompt": {
            "description": "the user-readable prompt for this question",
            "type": "string"
          },
          "questionIndex": {
            "description": "An index unique in the Quiz, used to refer to this question",
            "type": "integer"
          },
          "reference": {
            "$ref": "#/components/schemas/WikiPageKey"
          }
        },
        "title": "Question",
        "type": "object"
      },
      "QuestionResponse": {
        "description": "The response to a question",
        "example": {
          "concreteType": "...",
          "questionIndex": 12345
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type.",
            "type": "string"
          },
          "questionIndex": {
            "description": "An index unique in the Quiz, used to refer to the question being answered",
            "type": "integer"
          }
        },
        "title": "QuestionResponse",
        "type": "object"
      },
      "ResponseCorrectness": {
        "description": "A user response and whether it is correct.",
        "example": {
          "isCorrect": true,
          "question": {
            "concreteType": "...",
            "docLink": "...",
            "helpText": "...",
            "prompt": "...",
            "questionIndex": 12345,
            "reference": {
              "ownerObjectId": "...",
              "ownerObjectType": "WIKI",
              "wikiPageId": "..."
            }
          },
          "response": {
            "concreteType": "...",
            "questionIndex": 12345
          }
        },
        "properties": {
          "isCorrect": {
            "description": "Is the response correct?",
            "type": "boolean"
          },
          "question": {
            "$ref": "#/components/schemas/Question"
          },
          "response": {
            "$ref": "#/components/schemas/QuestionResponse"
          }
        },
        "title": "ResponseCorrectness",
        "type": "object"
      },
      "PassingRecord": {
        "description": "A record of whether a given user passed a given test",
        "example": {
          "corrections": [
            {
              "isCorrect": true,
              "question": {
                "concreteType": "...",
                "docLink": "...",
                "helpText": "...",
                "prompt": "...",
                "questionIndex": 12345,
                "reference": {}
              },
              "response": {
                "concreteType": "...",
                "questionIndex": 12345
              }
            },
            {
              "isCorrect": true,
              "question": {
                "concreteType": "...",
                "docLink": "...",
                "helpText": "...",
                "prompt": "...",
                "questionIndex": 12345,
                "reference": {}
              },
              "response": {
                "concreteType": "...",
                "questionIndex": 12345
              }
            }
          ],
          "passed": true,
          "passedOn": "...",
          "quizId": 12345,
          "responseId": 12345,
          "score": 12345,
          "userId": "..."
        },
        "properties": {
          "corrections": {
            "description": "For each response, whether it was correct",
            "items": {
              "$ref": "#/components/schemas/ResponseCorrectness"
            },
            "type": "array"
          },
          "passed": {
            "description": "Whether the user passed the given test",
            "type": "boolean"
          },
          "passedOn": {
            "description": "Date/time when the user passed the test (omitted if the user has not passed)",
            "type": "string"
          },
          "quizId": {
            "description": "The id of the quiz",
            "type": "integer"
          },
          "responseId": {
            "description": "The id of the user's response\n",
            "type": "integer"
          },
          "score": {
            "description": "The score the user received on the test",
            "type": "integer"
          },
          "userId": {
            "description": "The principal id of the user",
            "type": "string"
          }
        },
        "title": "PassingRecord",
        "type": "object"
      },
      "PaginatedTeamIds": {
        "description": "Container for a page of team IDs.",
        "example": {
          "nextPageToken": "...",
          "teamIds": [
            "...",
            "..."
          ]
        },
        "properties": {
          "nextPageToken": {
            "description": "Token that can be used to get the next page. Null if there are no more results.",
            "type": "string"
          },
          "teamIds": {
            "description": "The requested team IDs.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "PaginatedTeamIds",
        "type": "object"
      },
      "UserGroup": {
        "description": "JSON schema for UserGroup POJO",
        "example": {
          "creationDate": "...",
          "etag": "...",
          "id": "...",
          "isIndividual": true,
          "uri": "..."
        },
        "properties": {
          "creationDate": {
            "description": "The date this user or group was created.",
            "type": "string"
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "id": {
            "description": "The id of either the user or group.",
            "type": "string"
          },
          "isIndividual": {
            "description": "True if this is a user, false if it is a group",
            "type": "boolean"
          },
          "uri": {
            "description": "Uri",
            "type": "string"
          }
        },
        "title": "UserGroup",
        "type": "object"
      },
      "PaginatedResultsOfUserGroup": {
        "description": "JSON schema for UserGroup POJO",
        "example": {
          "results": [
            {
              "creationDate": "...",
              "etag": "...",
              "id": "...",
              "isIndividual": true,
              "uri": "..."
            },
            {
              "creationDate": "...",
              "etag": "...",
              "id": "...",
              "isIndividual": true,
              "uri": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "Page of user groups",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfUserGroup",
        "type": "object"
      },
      "UserGroupHeaderResponsePage": {
        "description": "A single page of a users/groups info query response.",
        "example": {
          "children": [
            {
              "displayName": "...",
              "email": "...",
              "firstName": "...",
              "isIndividual": true,
              "lastName": "...",
              "ownerId": "...",
              "userName": "..."
            },
            {
              "displayName": "...",
              "email": "...",
              "firstName": "...",
              "isIndividual": true,
              "lastName": "...",
              "ownerId": "...",
              "userName": "..."
            }
          ],
          "prefixFilter": "...",
          "totalNumberOfResults": 12345
        },
        "properties": {
          "children": {
            "description": "The list of children that match the requested concept.",
            "items": {
              "$ref": "#/components/schemas/UserGroupHeader"
            },
            "type": "array"
          },
          "prefixFilter": {
            "description": "The prefix filter used to generate this result.",
            "type": "string"
          },
          "totalNumberOfResults": {
            "description": "Total number of results",
            "type": "number",
            "deprecated": true
          }
        },
        "title": "UserGroupHeaderResponsePage",
        "type": "object"
      },
      "AliasList": {
        "description": "List of principal aliases",
        "example": {
          "list": [
            "...",
            "..."
          ]
        },
        "properties": {
          "list": {
            "description": "List of principal aliases",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "AliasList",
        "type": "object"
      },
      "UserGroupHeaderResponse": {
        "description": "A list of UserGroupHeaders.",
        "example": {
          "list": [
            {
              "displayName": "...",
              "email": "...",
              "firstName": "...",
              "isIndividual": true,
              "lastName": "...",
              "ownerId": "...",
              "userName": "..."
            },
            {
              "displayName": "...",
              "email": "...",
              "firstName": "...",
              "isIndividual": true,
              "lastName": "...",
              "ownerId": "...",
              "userName": "..."
            }
          ]
        },
        "properties": {
          "list": {
            "description": "The list of UserGroupHeaders",
            "items": {
              "$ref": "#/components/schemas/UserGroupHeader"
            },
            "type": "array"
          }
        },
        "title": "UserGroupHeaderResponse",
        "type": "object"
      },
      "ListWrapperOfUserProfile": {
        "description": "List of User Profiles.",
        "example": {
          "effectiveSchema": "...",
          "list": [
            {
              "RStudioUrl": "...",
              "company": "...",
              "createdOn": "...",
              "displayName": "...",
              "email": "...",
              "emails": [
                "...",
                "..."
              ],
              "etag": "...",
              "firstName": "...",
              "industry": "...",
              "lastName": "...",
              "location": "...",
              "notificationSettings": {
                "markEmailedMessagesAsRead": true,
                "sendEmailNotifications": true
              },
              "openIds": [
                "...",
                "..."
              ],
              "ownerId": "...",
              "position": "...",
              "preferences": [
                {
                  "concreteType": "...",
                  "name": "..."
                },
                {
                  "concreteType": "...",
                  "name": "..."
                }
              ],
              "profilePicureFileHandleId": "...",
              "summary": "...",
              "teamName": "...",
              "url": "...",
              "userName": "..."
            },
            {
              "RStudioUrl": "...",
              "company": "...",
              "createdOn": "...",
              "displayName": "...",
              "email": "...",
              "emails": [
                "...",
                "..."
              ],
              "etag": "...",
              "firstName": "...",
              "industry": "...",
              "lastName": "...",
              "location": "...",
              "notificationSettings": {
                "markEmailedMessagesAsRead": true,
                "sendEmailNotifications": true
              },
              "openIds": [
                "...",
                "..."
              ],
              "ownerId": "...",
              "position": "...",
              "preferences": [
                {
                  "concreteType": "...",
                  "name": "..."
                },
                {
                  "concreteType": "...",
                  "name": "..."
                }
              ],
              "profilePicureFileHandleId": "...",
              "summary": "...",
              "teamName": "...",
              "url": "...",
              "userName": "..."
            }
          ]
        },
        "properties": {
          "list": {
            "description": "List of UserProfiles.",
            "items": {
              "$ref": "#/components/schemas/UserProfile"
            },
            "type": "array"
          }
        },
        "title": "ListWrapperOfUserProfile",
        "type": "object"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}