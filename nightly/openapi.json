{
  "openapi": "3.0.1",
  "info": {
    "title": "Platform Repository Service",
    "contact": {
      "email": "thomas.yu@sagebionetworks.org"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "Platform Repository Service - Sage Bionetworks Platform\n",
    "version": "develop-SNAPSHOT"
  },
  "servers": [
    {
      "url": "https://repo-prod.prod.sagebase.org/repo/v1"
    }
  ],
  "tags": [
    {
      "name": "Access Approval Services",
      "description": "The Access Approval services manage the fulfillment of Access Requirements,\non a per-user basis.\n"
    },
    {
      "name": "Access Requirement Services",
      "description": "These services manage the Access Requirements/Restrictions (ARs) which may be placed on Entities,\nor Teams.\n"
    },
    {
      "name": "Certified User Services",
      "description": "To become a Synapse Certified User you must pass a test.\nThe Synapse APIs include a service to provide the test and a service to\nsubmit a test result. There are also administrative services to retrieve\nthe history of test submissions.\n"
    },
    {
      "name": "Challenge Services",
      "description": "A Challenge is a special object that supplements a project, providing additional features\nspecific to challenges.\n"
    },
    {
      "name": "Doi Services",
      "description": "Provides REST APIs for managing Synapse DOIs."
    },
    {
      "name": "Evaluation Services",
      "description": "The Evaluation API is designed to support open-access data analysis and modeling\nchallenges in Synapse. This framework provides tools for administrators to collect\nand analyze data models from Synapse users created for a specific goal or purpose.\n"
    },
    {
      "name": "Membership Invitation Services",
      "description": "The Membership Invitation Services create, retrieve and delete\nmembership invitations.\n"
    },
    {
      "name": "Membership Request Services",
      "description": "The Membership Request Services create, retrieve and delete\nmembership requests.\n"
    },
    {
      "name": "Team Services",
      "description": "Teams are groups of users."
    },
    {
      "name": "Trash Services",
      "description": "The recycle bin (or trash can) is the special folder that holds the\ndeleted entities for users.\n"
    },
    {
      "name": "User Profile Services",
      "description": "Every Synapse user has an associated User Profile"
    }
  ],
  "paths": {
    "/challenge": {
      "post": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Create a Challenge object, associated with a Project.",
        "description": "Create a Challenge object, associated with a Project.  A participant Team must\nbe specified.  To create a Challenge one must have CREATE permission on the\nassociated Project.\n",
        "operationId": "createChallenge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the Challenges for which the given participant is registered.",
        "description": "List the Challenges for which the given participant is registered.\nTo be in the returned list the caller must have READ permission on the\nproject associated with the Challenge.\n",
        "operationId": "listChallengesForParticipant",
        "parameters": [
          {
            "name": "participantId",
            "in": "query",
            "description": "Synapse user id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengePagedResults"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Retrieve a Challenge given its ID.",
        "description": "Retrieve a Challenge given its ID.  To retrieve a\nChallenge one must have READ permission on the associated Project.\n",
        "operationId": "getChallenge",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Update a Challenge.",
        "description": "Update a Challenge.  The caller must have UPDATE permission on the\nproject associated with the Challenge.  It is not permitted to\nchange the project associated with a Challenge.\n",
        "operationId": "updateChallenge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Delete a Challenge.",
        "description": "Delete a Challenge.  The caller must have DELETE permission on the\nproject associated with the Challenge.\n",
        "operationId": "deleteChallenge",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          }
        }
      }
    },
    "/challenge/{challengeId}/challengeTeam": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the Teams registered for a Challenge.",
        "description": "List the Teams registered for a Challenge.  You must have READ permission\nin the associated Project to make this request.\n",
        "operationId": "listChallengeTeams",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeTeamPagedResults"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Register a Team with a Challenge.",
        "description": "Register a Team with a Challenge. You must be a member of the Challenge's\nparticipant Team (i.e. you must be already registered for the Challenge)\nand be an administrator on the Team being registered.\n",
        "operationId": "createChallengeTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeTeam"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeTeam"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}/challengeTeam/{challengeTeamId}": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "challengeTeamId",
          "in": "path",
          "required": true,
          "description": "The ID of the challenge team.",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Update a Challenge Team.",
        "description": "Update a Challenge Team. You must be a member of the Challenge's\nparticipant Team (i.e. you must be already registered for the Challenge)\nand be an administrator on the associated Team.\n",
        "operationId": "updateChallengeTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeTeam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeTeam"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}/participant": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the participants registered for a Challenge.",
        "description": "List the participants registered for a Challenge.\nThe caller must have READ permission on the\nproject associated with the Challenge.",
        "operationId": "listParticipantsInChallenge",
        "parameters": [
          {
            "name": "affiliated",
            "in": "query",
            "description": "If affiliated=true, return just participants affiliated with some\nregistered Team.  If false, return those not affiliated with any registered Team.\nIf omitted return all participants.\n",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedIds"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}/registratableTeam": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the Teams that caller can register for the Challenge.",
        "description": "List the Teams that caller can register for the Challenge, i.e. Teams on which\nthe caller is an administrator and which are not already registered.\nThe caller must have READ permission on the\nproject associated with the Challenge to make this request.\n",
        "operationId": "listRegistratableTeams",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedIds"
                }
              }
            }
          }
        }
      }
    },
    "/challenge/{challengeId}/submissionTeams": {
      "parameters": [
        {
          "name": "challengeId",
          "in": "path",
          "description": "The ID of the challenge.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "List the Teams under which the given submitter may submit to the Challenge.",
        "description": "List the Teams under which the given submitter may submit to the Challenge, i.e. the Teams on which\nthe user is a member and which are registered for the Challenge.\n",
        "operationId": "listSubmissionTeams",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result that must be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedIds"
                }
              }
            }
          }
        }
      }
    },
    "/challengeTeam/{challengeTeamId}": {
      "parameters": [
        {
          "name": "challengeTeamId",
          "in": "path",
          "required": true,
          "description": "The ID of the challenge team.",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "De-register a Team from a Challenge.",
        "description": "De-register a Team from a Challenge. You must be a member of the Challenge's\nparticipant Team (i.e. you must be already registered for the Challenge)\nand be an administrator on the Team being de-registered.\n",
        "operationId": "deleteChallengeTeam",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          }
        }
      }
    },
    "/doi": {
      "get": {
        "description": "Retrieves the DOI for the object and its associated DOI metadata.\nNote: this call calls an external API, which may impact performance\nTo just retrieve the DOI association, see: <a href=\"${GET.doi.association}\">GET /doi/association</a>\n",
        "operationId": "getDoiV2",
        "parameters": [
          {
            "description": "The ID of the object to retrieve",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of the object",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectType"
            }
          },
          {
            "description": "The version number of the object",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Doi"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves the DOI for the object and its associated DOI metadata.",
        "tags": [
          "Doi Services"
        ]
      }
    },
    "/doi/association": {
      "get": {
        "description": "Retrieves the DOI for the object.\nNote: this call only retrieves the DOI association, if it exists. To retrieve\nthe metadata for the object,\nsee <a href=\"${GET.doi}\">GET /doi</a>'\n",
        "operationId": "getDoiAssociation",
        "parameters": [
          {
            "description": "The ID of the object to retrieve",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of the object",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectType"
            }
          },
          {
            "description": "The version number of the object",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoiAssociation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves the DOI for the object.",
        "tags": [
          "Doi Services"
        ]
      }
    },
    "/doi/async/start": {
      "post": {
        "description": "Asynchronously creates or updates a DOI in Synapse, with input metadata.\nRetrieve the results with\n<a href=\"${GET.doi.async.get.asyncToken}\">GET /doi/async/get/{asyncToken}</a>.\nThis call may fail if the external\nDataCite API is down. If the failure is recoverable, it will retry automatically.'\n",
        "operationId": "startCreateOrUpdateDoi",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoiRequest"
              }
            }
          },
          "description": "A request containing a DOI and its metadata to associate with a Synapse\nobject\n",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncJobId"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Asynchronously creates or updates a DOI in Synapse, with input metadata.",
        "tags": [
          "Doi Services"
        ]
      }
    },
    "/doi/async/get/{asyncToken}": {
      "get": {
        "description": "Get the results of a call to POST /doi/async/start\n",
        "operationId": "getCreateOrUpdateDoiResults",
        "parameters": [
          {
            "description": "The async job token from the create/update call",
            "in": "path",
            "name": "asyncToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoiResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the results of a call to POST /doi/async/start",
        "tags": [
          "Doi Services"
        ]
      }
    },
    "/doi/locate": {
      "get": {
        "description": "Retrieves the Synapse web portal URL to the object entered.\nNote: This call does not check to see if the object exists in Synapse.\n",
        "operationId": "locate",
        "parameters": [
          {
            "description": "The ID of the object to retrieve",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to return the URL or redirect to the URL",
            "in": "query",
            "name": "redirect",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "The type of the object",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectType"
            }
          },
          {
            "description": "The version number of the object",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves the Synapse web portal URL to the object entered.",
        "tags": [
          "Doi Services"
        ]
      }
    },
    "/entity/{id}/challenge": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Synapse Project id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge Services"
        ],
        "summary": "Retrieve a Challenge given the ID of its associated Project.",
        "description": "Retrieve a Challenge given the ID of its associated Project.  To retrieve a\nChallenge one must have READ permission on the Project.\n",
        "operationId": "getChallengeByProjectId",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        }
      }
    },
    "/evaluation": {
      "get": {
        "description": "Gets a collection of Evaluations, within a given range.\n\n<p>\n\n<b>Note:</b> The response will contain only those Evaluations on which the caller\nis\n\ngranted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a>\n\npermission, unless specified otherwise with the accessType parameter.\n\n</p>\n",
        "operationId": "getEvaluationsPaginated",
        "parameters": [
          {
            "name": "accessType",
            "description": "The type of access for the user to filter for, optional and defaults\nto <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a>\n",
            "in": "query",
            "schema": {
              "default": "READ",
              "enum": [
                "CHANGE_PERMISSIONS",
                "CHANGE_SETTINGS",
                "CREATE",
                "DELETE",
                "DELETE_SUBMISSION",
                "DOWNLOAD",
                "MODERATE",
                "PARTICIPATE",
                "READ",
                "READ_PRIVATE_SUBMISSION",
                "SEND_MESSAGE",
                "SUBMIT",
                "TEAM_MEMBERSHIP_UPDATE",
                "UPDATE",
                "UPDATE_SUBMISSION",
                "UPLOAD"
              ],
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "description": "If 'true' then return only those evaluations with rounds defined\nand for which the current time is in one of the rounds.\n",
            "in": "query",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "evaluationIds",
            "description": "an optional, comma-delimited list of evaluation IDs to which the\nresponse is limited\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results returned",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the pagination offset. For a page size of 10, the\nfirst page would be at offset = 0, and the second page would be at offset =\n10.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfEvaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a collection of Evaluations, within a given range.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "post": {
        "description": "'Creates a new Evaluation. The passed request body should contain the\nfollowing fields:\n\n<ul>\n\n<li>name - Give your new Evaluation a name.</li>\n\n<li>contentSource - The ID of the parent Entity, such as a Folder or Project.</li>\n\n<li>status - The initial state of the Evaluation, an\n\n<a href=\"${org.sagebionetworks.evaluation.model.EvaluationStatus}\">EvaluationStatus</a></li>\n\n</ul>\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.CREATE</a> on the contentSource Entity.\n\n</p>\n",
        "operationId": "createEvaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Evaluation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Creates a new Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}": {
      "parameters": [
        {
          "description": "The ID of the specified Evaluation.",
          "in": "path",
          "name": "evalId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Deletes an Evaluation.\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.DELETE</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "deleteEvaluation",
        "responses": {
          "204": {
            "description": "The resource was deleted."
          }
        },
        "summary": "Deletes an Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "get": {
        "description": "Gets an Evaluation.\n\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a\n\nhref=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\"\n\n>ACCESS_TYPE.READ</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "getEvaluation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets an Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "put": {
        "description": "'Updates an Evaluation.\n\n\n<p>\n\nSynapse employs an Optimistic Concurrency Control (OCC) scheme to handle\n\nconcurrent updates. Each time an Evaluation is updated a new etag will be\n\nissued to the Evaluation. When an update is requested, Synapse will compare the\n\netag of the passed Evaluation with the current etag of the Evaluation. If the\n\netags do not match, then the update will be rejected with a\n\nPRECONDITION_FAILED (412) response. When this occurs, the caller should\n\nfetch the latest copy of the Evaluation and re-apply any changes, then re-attempt\n\nthe Evaluation update.\n\n</p>\n\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a\n\nhref=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\"\n\n>ACCESS_TYPE.UPDATE</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "updateEvaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Evaluation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Updates an Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/access": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Determines whether the logged in user has a certain\n<a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE</a> on the specified Evaluation.\n",
        "operationId": "hasAccess2",
        "parameters": [
          {
            "in": "query",
            "name": "accessType",
            "description": "Synapse access type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResult"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Determines whether a specified Synapse user has a certain access type on evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/acl": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "deprecated": true,
        "description": "This method is deprecated and should be removed from future versions\nof the API.\n\nDeletes the ACL (access control list) of the specified evaluation. The user should\nhave the proper <a href=\"${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\">permissions</a>\nto delete the ACL.\n",
        "operationId": "deleteAcl",
        "responses": {
          "204": {
            "description": "The resource was deleted"
          }
        },
        "summary": "This method is deprecated and should be removed from future versions of the API.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "get": {
        "description": "Gets the access control list (ACL) governing the given evaluation.\nThe user should have the proper\n<a href=\"${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\">permissions</a>\nto read the ACL.\n",
        "operationId": "getAcl",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets the access control list (ACL) governing the given evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/round": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "deprecated": true,
        "summary": "Create Evaluation Round",
        "description": "Create Evaluation Round",
        "operationId": "createEvaluationRound",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationRound"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationRound"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/round/{roundId}": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "roundId",
          "description": "The ID of the evaluation round",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "deprecated": true,
        "operationId": "deleteEvaluationRound",
        "summary": "Delete Evaluation Round",
        "description": "Delete Evaluation Round",
        "responses": {
          "204": {
            "description": "The resouce has been deleted"
          }
        },
        "tags": [
          "Evaluation Services"
        ]
      },
      "get": {
        "deprecated": true,
        "summary": "Get Evaluation Round",
        "description": "Get Evaluation Round",
        "operationId": "getEvaluationRound",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationRound"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "Evaluation Services"
        ]
      },
      "put": {
        "summary": "Update Evaluation Round",
        "description": "Update Evaluation Round",
        "deprecated": true,
        "operationId": "updateEvaluationRound",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationRound"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationRound"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/round/list": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Get all rounds of an Evaluation",
        "description": "Get all rounds of an Evaluation",
        "deprecated": true,
        "operationId": "getAllEvaluationRounds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationRoundListRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationRoundListResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/statusBatch": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Update multiple SubmissionStatuses. The maximum batch size is 500.  To\nallow upload of more than this maximum, the system supports uploading of a <i>series</i> of\nbatches. Synapse employs optimistic concurrency on the series in the form of a batch token.\nEach request (except the first) must include the ''batch token'' returned in the\nresponse to the previous batch. If another client begins batch upload simultaneously,\na PRECONDITION_FAILED (412) response will be generated and upload must restart\nfrom the first batch.  After the final batch is uploaded, the data for the Evaluation queue\nwill be mirrored to the tables which support querying.  Therefore uploaded data will\nnot appear in Evaluation queries until after the final batch is successfully uploaded.  It\nis the client''s responsibility to note in each batch request (1) whether it is the first\nbatch in the series and (2) whether it is the last batch.  (For a single batch both\nare set to ''true''.)\n\nFailure to use the flags correctly risks corrupted data (due to simultaneous,\nconflicting uploads by multiple clients) or data not appearing in query results.\n\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.UPDATE_SUBMISSION</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "updateSubmissionStatusBatch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmissionStatusBatch"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUploadResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update multiple SubmissionStatuses.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/submission": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets the requesting user's Submissions to a specified Evaluation.\n",
        "operationId": "getMySubmissions",
        "parameters": [
          {
            "description": "Limits the number of entities that will be fetched for this page. When null it will default to 10.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first entity. When null it will default to 0.'\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfSubmission"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets the requesting user's Submissions to a specified Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/submission/all": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "'Gets a collection of Submissions to a specified Evaluation.\n<p>\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation.\n</p>\n",
        "operationId": "getAllSubmissions",
        "parameters": [
          {
            "description": "Limits the number of entities that will be fetched for this\npage. When null it will default to 10, max value 100.\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "minimum": 10,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first entity. When null it will default\nto 0.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Status of submission.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfSubmission"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a collection of Submissions to a specified Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/submission/bundle": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets the requesting user's bundled Submissions and SubmissionStatuses\nto a specified Evaluation.\n",
        "operationId": "getMySubmissionBundles",
        "parameters": [
          {
            "description": "Limits the number of entities that will be fetched for this\npage. When null it will default to 10.'\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first entity. When null it will default\nto 0.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfSubmissionBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets the requesting users bundled Submissions and SubmissionStatuses\nto a specified Evaluation.'\n",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/submission/bundle/all": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets a collection of bundled Submissions and SubmissionStatuses to\na given Evaluation.\n\n<p>\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation.\n</p>\n",
        "operationId": "getAllSubmissionBundles",
        "parameters": [
          {
            "description": "Limits the number of entities that will be fetched for this\npage. When null it will default to 10.'\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first entity. When null it will default\nto 0.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Submission Status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfSubmissionBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a collection of bundled Submissions and SubmissionStatuses to a given Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/submission/count": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets the number of Submissions to a specified Evaluation.\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation.\n</p>\n",
        "operationId": "getSubmissionCount",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integer"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets the number of Submissions to a specified Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/submission/status/all": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "'Gets a collection of SubmissionStatuses to a specified Evaluation.\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a> on the specified Evaluation.\nFurthermore, the caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> to see all\ndata marked as \"private\" in the SubmissionStatuses.\n\n</p>\n",
        "operationId": "getAllSubmissionStatuses",
        "parameters": [
          {
            "description": "Limits the number of entities that will be fetched for this\npage. When null it will default to 10.'\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first entity. When null it will default\nto 0.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Submission status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfSubmissionStatus"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a collection of SubmissionStatuses to a specified Evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/{evalId}/team/{id}/SubmissionEligibility": {
      "parameters": [
        {
          "in": "path",
          "name": "evalId",
          "description": "The ID of the specified Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "The ID of a Team.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Find out whether a Team and its members are eligible to submit to\na given Evaluation queue (at the current time).  The request must include\nan Evaluation ID and a Team ID.   The 'eligibilityStateHash'\nfield of the returned object is a required parameter of the subsequent Team Submission\nrequest made for the given Evaluation and Team.\n(See: <a href=\"${POST.evaluation.submission}\">POST/evaluation/submission</a>)'\n",
        "operationId": "getTeamSubmissionEligibility",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSubmissionEligibility"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Find out whether a Team and its members are eligible to submit to a given\nEvaluation queue (at the current time).'\n",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/acl": {
      "put": {
        "description": "Updates the supplied access control list (ACL) for an evaluation.\nThe <a href=\"${org.sagebionetworks.repo.model.AccessControlList}\">ACL</a>\nto be updated should have the ID of the evaluation. The user should have the proper\n<a href=\"${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\">permissions</a>\nin order to update the ACL.\n",
        "operationId": "updateAcl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlList"
              }
            }
          },
          "description": "The ACL being updated.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Updates the supplied access control list (ACL) for an evaluation.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/available": {
      "get": {
        "description": "Gets a collection of Evaluations in which the user has SUBMIT permission,\nwithin a given range.\n<p>\n<b>Note:</b> The response will contain only those Evaluations on which the caller\nmust is\ngranted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.SUBMIT</a>\npermission.\n</p>\n",
        "operationId": "getAvailableEvaluationsPaginated",
        "parameters": [
          {
            "in": "query",
            "name": "activeOnly",
            "description": "Retrieve active only evaluation queues",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "an optional, comma-delimited list of evaluation IDs to which the\nresponse is limited\n",
            "in": "query",
            "name": "evaluationIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limits the number of entities that will be fetched for this\npage. When null it will default to 10.'\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first entity. When null it will default\nto 0.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfEvaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a collection of Evaluations in which the user has SUBMIT permission,\nwithin a given range.\n",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/name/{name}": {
      "parameters": [
        {
          "in": "path",
          "name": "name",
          "description": "The name of the desired Evaluation.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Finds an Evaluation by name.\n<p>\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a> on the specified Evaluation.\n</p>\n",
        "operationId": "findEvaluation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Finds an Evaluation by name.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/submission": {
      "post": {
        "description": "Creates a Submission and sends a submission notification email to\nthe submitter's team members.\n\nThe passed request body should contain the following fields:\n\n<ul>\n\n<li>evaluationId - The ID of the Evaluation to which this Submission belongs.</li>\n\n<li>entityId - The ID of the Entity being submitted.</li>\n\n<li>versionNumber - The specific version of the Entity being submitted.</li>\n\n</ul>\n\n<p>\n\nA Submission must be either a Team or an Individual submission.  A Team submission\nmust include a Team ID in the teamId field and the request must include a submissionEligibilityHash\nrequest parameter.  A Team submission may also include a list of submission contributors.\n(The submitter is taken to be a contributor and need not be included in the list.)\nAn individual submission must have a null teamId, a null or empty contributor\nlist, and no submissionEligibilityHash parameter.\n\n</p>\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.SUBMIT</a>.\n\n</p>\n\n<p>\n\nThis call also creates an associated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionStatus}\">SubmissionStatus</a>,\ninitialized with a SubmissionStatusEnum value of RECEIVED.\n\n</p>\n",
        "operationId": "createSubmission",
        "parameters": [
          {
            "description": "The portal endpoint prefix to the an entity/challenge page. The\nentity ID of the challenge project is appended to create the complete URL. In normal operation,\nthis parameter should be omitted.'\n",
            "in": "query",
            "name": "challengeEndpoint",
            "schema": {
              "description": "The portal endpoint prefix to the an entity/challenge page.\nThe entity ID of the challenge project is appended to create the complete URL.\nIn normal operation, this parameter should be omitted.'\n",
              "type": "string"
            }
          },
          {
            "description": "The current eTag of the Entity being submitted",
            "in": "query",
            "name": "etag",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The portal endpoint prefix for one-click email unsubscription.\nA signed, serialized token is appended to create the complete URL:\n<a href=\"${org.sagebionetworks.repo.model.message.NotificationSettingsSignedToken}\">NotificationSettingsSignedToken</a>.\nIn normal operation, this parameter should be omitted.'\n",
            "in": "query",
            "name": "notificationUnsubscribeEndpoint",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The hash provided by the\n<a href=\"${org.sagebionetworks.evaluation.model.TeamSubmissionEligibility}\">TeamSubmissionEligibility</a>\nobject.\n",
            "in": "query",
            "name": "submissionEligibilityHash",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Submission_model"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submission_model"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Creates a Submission and sends a submission notification email to the submitter's\nteam members.\n",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/submission/{subId}": {
      "parameters": [
        {
          "description": "The ID of the Submission",
          "in": "path",
          "name": "subId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Deletes a Submission and its accompanying SubmissionStatus.\n\n<b>This service is intended to only be used by ChallengesInfrastructure service\naccount.</b>\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.DELETE_SUBMISSION</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "deleteSubmission",
        "responses": {
          "204": {
            "description": "The resource has been deleted."
          }
        },
        "summary": "Deletes a Submission and its accompanying SubmissionStatus.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "get": {
        "description": "Gets a Submission.\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation.\n\n</p>\n",
        "operationId": "getSubmission",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submission_model"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a Submission.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/submission/{subId}/cancellation": {
      "parameters": [
        {
          "description": "The ID of the Submission",
          "in": "path",
          "name": "subId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "User requests to cancel their submission. Only the user who submitted\na submission can make this request.\n",
        "operationId": "requestToCancelSubmission",
        "responses": {
          "204": {
            "description": "The request has been made."
          }
        },
        "summary": "User requests to cancel their submission.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/submission/{subId}/file/{fileHandleId}": {
      "parameters": [
        {
          "description": "the ID of the requested FileHandle contained in the Submission.",
          "in": "path",
          "name": "fileHandleId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the Submission",
          "in": "path",
          "name": "subId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets a pre-signed URL to access a requested File contained within\na specified Submission.\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation.\n</p>\n",
        "operationId": "redirectUrlForFileHandle",
        "parameters": [
          {
            "in": "query",
            "name": "redirect",
            "description": "To redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets a pre-signed URL to access a requested File contained within a specified\nSubmission.\n",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/evaluation/submission/{subId}/status": {
      "parameters": [
        {
          "description": "The ID of the Submission",
          "in": "path",
          "name": "subId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets the SubmissionStatus object associated with a specified Submission.\n<p>\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a> on the specified Evaluation.\nFurthermore, the caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a>\nto see all data marked as \"private\" in the SubmissionStatus. \n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum frequency this method can be called</td>\n\n<td>1 calls per second</td>\n\n</tr>\n\n</table>\n\n</p>\n",
        "operationId": "getSubmissionStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionStatus_model"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Gets the SubmissionStatus object associated with a specified Submission.",
        "tags": [
          "Evaluation Services"
        ]
      },
      "put": {
        "description": "Updates a SubmissionStatus object.\n\n\n<p>\n\nSynapse employs an Optimistic Concurrency Control (OCC) scheme to handle\nconcurrent updates. Each time an SubmissionStatus is updated a new etag will be\nissued to the SubmissionStatus. When an update is requested, Synapse will compare\nthe etag of the passed SubmissionStatus with the current etag of the SubmissionStatus.\nIf the etags do not match, then the update will be rejected with a\nPRECONDITION_FAILED (412) response. When this occurs, the caller should\nfetch the latest copy of the SubmissionStatus and re-apply any changes, then re-attempt\nthe SubmissionStatus update.\n\n</p>\n\n<p>\n\n<b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.UPDATE_SUBMISSION</a> on the specified Evaluation.\n\n</p>\n\n</p>\n\n<p>\n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum frequency this method can be called</td>\n\n<td>1 calls per second</td>\n\n</tr>\n\n</table>\n\n</p>\n",
        "operationId": "updateSubmissionStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmissionStatus_model"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionStatus_model"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Updates a SubmissionStatus object.",
        "tags": [
          "Evaluation Services"
        ]
      }
    },
    "/team": {
      "post": {
        "description": "Create a new Team. The passed request body may contain the following\nfields:\n\n<ul>\n\n<li>name - Give your new Team a name.  The name must be unique, not used by an\nexisting Team (required).</li>\n\n<li>description - a short text description of the Team''s purpose (optional).</li>\n\n<li>icon - a fileHandle ID for an icon image file previously uploaded to Synapse\n(optional).</li>\n\n</ul>\n\n<p>\n\nTo specify a Team icon, the icon file must first be uploaded to Synapse as\n<a href=\"${org.sagebionetworks.repo.model.file.FileHandle}\">FileHandle</a> (see\n<a href=\"${org.sagebionetworks.file.controller.UploadController}\">File Services</a>).\nThe FileHandle ID can then be put into the Team''s icon field.\n",
        "operationId": "createTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create a new Team.",
        "tags": [
          "Team Services"
        ]
      },
      "put": {
        "description": "Update the Team metadata for the specified Team.\nNote: The client must be a Team administrator to make this request.\n",
        "operationId": "updateTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            }
          },
          "description": "the new metadata for the Team",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update the Team metadata for the specified Team.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/teams": {
      "get": {
        "description": "Retrieve a paginated list of Teams matching the supplied name fragment\n(optional), in alphabetical order by Team name.\n\n<br>\n\nNote:  This service has JSONP support:  If the request parameter \"callback=jsMethod\"\nis included (where 'jsMethod' is any function name you wish), then the response body will be wrapped\nin \"jsMethod(...);\".\n",
        "operationId": "getTeamsByNameFragment",
        "parameters": [
          {
            "description": "a prefix of the Team name, or a prefix of any sub-string in the\nname preceded by a space. If omitted, all Teams are returned.\n",
            "in": "query",
            "name": "fragment",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the maximum number of Teams to return.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 50
            }
          },
          {
            "description": "the starting index of the returned results (default 0)",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfTeam"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a paginated list of Teams in alphabetical order by Team name.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete the Team.\nNote: The client must be a Team administrator to make this request.\n",
        "operationId": "deleteTeam",
        "responses": {
          "204": {
            "description": "The resource has been deleted."
          }
        },
        "summary": "Delete the Team.",
        "tags": [
          "Team Services"
        ]
      },
      "get": {
        "description": "Retrieve the metadata for a specified Team.\n\n<p>\n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum frequency this method can be called</td>\n\n<td>1 calls per second</td>\n\n</tr>\n\n</table>\n\n</p>\n",
        "operationId": "getTeam",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the metadata for a specified Team.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/accessApproval": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "deprecated": true,
        "description": "Retrieve the Access Approvals for the given Team.  This service is only available to the ACT.",
        "operationId": "getTeamAccessApprovals",
        "parameters": [
          {
            "description": "Limits the size of the page returned. For example, a page size\nof 10 require limit = 10. The maximum limit for this call is 50.\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 10,
              "maximum": 50,
              "default": 10
            }
          },
          {
            "description": "The index of the pagination offset. For a page size of 10, the\nfirst page would be at offset = 0, and the second page would be at offset =\n10.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          },
          "410": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Retrieve the Access Approvals for the given Team.",
        "tags": [
          "Access Approval Services"
        ]
      }
    },
    "/team/{id}/accessRequirement": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve paginated list of ALL Access Requirements associated with\na Team.\n",
        "operationId": "getTeamAccessRequirements",
        "parameters": [
          {
            "description": "Limits the size of the page returned. For example, a page size\nof 10 require limit = 10. The maximum limit for this call is 50.\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 10,
              "maximum": 50,
              "default": 10
            }
          },
          {
            "description": "The index of the pagination offset. For a page size of 10, the\nfirst page would be at offset = 0, and the second page would be at offset =\n10.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfAccessRequirement"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve paginated list of ALL Access Requirements associated with a Team.",
        "tags": [
          "Access Requirement Services"
        ]
      }
    },
    "/team/{id}/acl": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the AccessControlList for a specified Team.",
        "operationId": "getTeamAcl",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the AccessControlList for a specified Team.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/icon": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the download URL for the Team icon, or receive a redirect response to said URL.",
        "operationId": "fileRedirectUrlForTeamIcon",
        "parameters": [
          {
            "description": "if true or omitted, then redirect to the URL.  If false then simply\nreturn the URL.\n",
            "in": "query",
            "name": "redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the download URL for the Team icon, or receive a redirect response\nto said URL\n",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/icon/preview": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the download URL for the Team icon preview, or receive a redirect\nresponse to said URL.\n",
        "operationId": "filePreviewRedirectUrlForTeamIcon",
        "parameters": [
          {
            "description": "if true or omitted, then redirect to the URL.  If false then simply\nreturn the URL.\n",
            "in": "query",
            "name": "redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the download URL for the Team icon preview, or receive a redirect\nresponse to said URL.\n",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/member/{principalId}": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "the member's principal ID",
          "in": "path",
          "name": "principalId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Remove the given member from the specified Team.\nNote:  The client must either be a Team administrator or the member being removed.\n",
        "operationId": "removeTeamMember",
        "responses": {
          "204": {
            "description": "The resource has been deleted."
          }
        },
        "summary": "Remove the given member from the specified Team.",
        "tags": [
          "Team Services"
        ]
      },
      "get": {
        "description": "'<p>\n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum frequency this method can be called</td>\n\n<td>1 calls per second</td>\n\n</tr>\n\n</table>\n\n</p>'\n",
        "operationId": "getTeamMember",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamMember"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": ".",
        "tags": [
          "Team Services"
        ]
      },
      "put": {
        "description": "Add a member to the Team.\n\nIf the one making the request is the user to be added, then the user must have\nan open invitation from the Team.  If the one making the request is an administrator\non the Team, then there must be a pending request from the user to the Team, asking\nto be added. If both teamEndpoint and notificationUnsubscribeEndpoint are provided,\nnotification email(s) will be sent to the appropriate parties.\n",
        "operationId": "addTeamMember",
        "parameters": [
          {
            "description": "the portal prefix for one-click email unsubscription.\nA signed, serialized token is appended to create the complete URL:\n<ahref=\"${org.sagebionetworks.repo.model.message.NotificationSettingsSignedToken}\">NotificationSettingsSignedToken</a>'\n",
            "in": "query",
            "name": "notificationUnsubscribeEndpoint",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the portal prefix for the Team URL. The team ID is appended to create\nthe complete URL.\n",
            "in": "query",
            "name": "teamEndpoint",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource has been added."
          }
        },
        "summary": "Add a member to the Team.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/member/{principalId}/membershipStatus": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "the member's principal ID",
          "in": "path",
          "name": "principalId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the Team Membership Status bundle for a team and user.  This\nsays whether a user is a member of a Team, whether there are outstanding\nmembership requests or invitations, and whether the client making the request\ncan add the given user to the given Team.\n",
        "operationId": "getTeamMembershipStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamMembershipStatus"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the Team Membership Status bundle for a team and user.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/memberList": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Returns the TeamMember info for a team and a given list of members'\nprincipal IDs.\nInvalid IDs in the list are ignored:  The results list is simply\nsmaller than the list of IDs passed in.\n",
        "operationId": "listTeamMembersGivenTeamandUserList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdList"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWrapperOfTeamMember"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Returns the TeamMember info for a team and a given list of members' principal\nIDs.\n",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/team/{id}/openInvitation": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the open invitations from a Team, optionally filtering by\nthe invitee.\nAn invitation is only open if it has not expired and if the user has not joined\nthe Team.\nNote: certain fields may be omitted when returned if the field value is null\n",
        "operationId": "getOpenInvitationsByTeam",
        "parameters": [
          {
            "description": "the ID of the Synapse user to which invitations have been extended",
            "in": "query",
            "name": "inviteeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the maximum number of invitations to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "the starting index of the returned results",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfMembershipInvitation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the open invitations from a Team, optionally filtering by the\ninvitee.\n",
        "tags": [
          "Membership Invitation Services"
        ]
      }
    },
    "/team/{id}/openRequest": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the open requests submitted to a Team, optionally filtering\nby the requester.\nAn request is only open if it has not expired and if the requester has not been\nadded the Team.\n\n<p>\n\n<b>Service Limits</b>\n\n<table border=\"1\">\n\n<tr>\n\n<th>resource</th>\n\n<th>limit</th>\n\n</tr>\n\n<tr>\n\n<td>The maximum frequency this method can be called</td>\n\n<td>40 calls per minute</td>\n\n</tr>\n\n</table>\n\n</p>'\n",
        "operationId": "getOpenRequestsByTeam",
        "parameters": [
          {
            "description": "the maximum number of requests to return (default 10)",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "the starting index of the returned results (default 0)",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "the ID of the user requesting admission to the Team",
            "in": "query",
            "name": "requestorId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfMembershipRequest"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the open requests submitted to a Team, optionally filtering by the requester.",
        "tags": [
          "Membership Request Services"
        ]
      }
    },
    "/team/acl": {
      "put": {
        "description": "Update the Access Control List for the specified Team.",
        "operationId": "updateTeamAcl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlList"
              }
            }
          },
          "description": "the updated Access Control List",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessControlList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update the Access Control List for the specified Team.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/teamList": {
      "post": {
        "description": "Retrieve a list of Teams given their IDs.\nInvalid IDs in the list are ignored:  The results list is simply\nsmaller than the list of IDs passed in.\n",
        "operationId": "listTeams",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdList"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWrapperOfTeam"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a list of Teams given their IDs.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/teamMember": {
      "put": {
        "description": "Add a member to the Team.  Note: The request is authenticated by a\nhash message authentication code in the request body, generated by Synapse.  The intended\nuse of this service is by the portal, completing a round trip with a 'one-click join-team'\nlink provided to the user by Synapse via email. If both teamEndpoint and\nnotificationUnsubscribeEndpoint are provided, notification email(s) will\nbe sent to the appropriate parties.\n",
        "operationId": "addTeamMemberViaSignedToken",
        "parameters": [
          {
            "in": "query",
            "name": "notificationUnsubscribeEndpoint",
            "description": "notification unsubscribe endpoint",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "teamEndpoint",
            "description": "Team end point",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinTeamSignedToken"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Add a member to the Team.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/teamMembers/{id}": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve a paginated list of Team members matching the supplied name\nprefix.  If the prefix is omitted then all members are returned.\n\n<br>\n\nNote:  This service has JSONP support:  If the request parameter \"callback=jsMethod\"\nis included (where 'jsMethod' is any function name you wish), then the response body will be wrapped\nin \"jsMethod(...);\".\n",
        "operationId": "getTeamMembers",
        "parameters": [
          {
            "description": "a prefix of the user's first or last name or email address",
            "in": "query",
            "name": "fragment",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the maximum number of members to return.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 50
            }
          },
          {
            "description": "the type of team user to retrieve",
            "in": "query",
            "name": "memberType",
            "schema": {
              "enum": [
                "ADMIN",
                "ALL",
                "MEMBER"
              ],
              "type": "string",
              "default": "ALL"
            }
          },
          {
            "description": "the starting index of the returned results",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfTeamMember"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a paginated list of Team members matching the supplied name prefix.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/teamMembers/count/{id}": {
      "parameters": [
        {
          "description": "the ID of the Team.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the number of Team members matching the supplied name prefix.  If\nthe prefix is omitted then the number of members in the team is returned.\n\n<br>\n\nNote:  This service has JSONP support:  If the request parameter \"callback=jsMethod\"\nis included (where 'jsMethod' is any function name you wish), then the response body will be wrapped\nin \"jsMethod(...);\".\n",
        "operationId": "getTeamMemberCount",
        "parameters": [
          {
            "description": "a prefix of the user's first or last name or email address\n",
            "in": "query",
            "name": "fragment",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the number of Team members matching the supplied name prefix.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/trashcan/purge/{id}": {
      "parameters": [
        {
          "description": "The ID of an entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Flags the specified entity for priority purge. The entity will be\ndeleted as soon as possible. Once purging is done, the entity\nwill be permanently deleted from the system.\n",
        "operationId": "flagForPurge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Flags the specified entity for priority purge.",
        "tags": [
          "Trash Services"
        ]
      }
    },
    "/trashcan/restore/{id}": {
      "parameters": [
        {
          "description": "The ID of an entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Moves an entity and its descendants out of the trash can back to its\noriginal parent. An exception is thrown if the original parent does not exist any more.\nIn that case, please use <a href=\"#operation/restoreFromTrash\">PUT /trashcan/restored/{id}/{parentId}</a>\nto restore to a new parent.  In such a case you must be a member of the Synapse Access\nand Compliance Team.\n",
        "operationId": "restoreFromTrash",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Moves an entity and its descendants out of the trash can back to its original\nparent.\n",
        "tags": [
          "Trash Services"
        ]
      }
    },
    "/trashcan/restore/{id}/{parentId}": {
      "parameters": [
        {
          "description": "The ID of a deleted entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the new parent entity.",
          "in": "path",
          "name": "parentId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Moves an entity and its descendants out of the trash can to a new\nparent.\n\nNOTE:  This operation cannot be completed if the original parent has been\ndeleted (unless the caller is a member of the Synapse Access and Compliance\nTeam).\nThe service will return a NotFoundException.  This is because of the potential\nsecurity hole arising from allowing access requirements\non folders:  If an entity is in a restricted folder and then deleted, it cannot\nbe restored unless the new parent has the same restriction level as the original\none.\n",
        "operationId": "restoreFromTrashToParent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Moves an entity and its descendants out of the trash can to a new parent.",
        "tags": [
          "Trash Services"
        ]
      }
    },
    "/trashcan/trash/{id}": {
      "parameters": [
        {
          "description": "The ID of an entity.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Moves an entity and its descendants to the trash can.",
        "operationId": "moveToTrash",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Moves an entity and its descendants to the trash can.",
        "tags": [
          "Trash Services"
        ]
      }
    },
    "/trashcan/view": {
      "get": {
        "description": "Retrieves the paginated list of trash entities deleted by the current\nuser.\n",
        "operationId": "viewTrash",
        "parameters": [
          {
            "description": "The maximum number of entities to retrieve per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer",
              "minimum": 10,
              "maximum": 100
            }
          },
          {
            "description": "Paginated results. Offset to the current page.",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfTrashedEntity"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves the paginated list of trash entities deleted by the current user.",
        "tags": [
          "Trash Services"
        ]
      }
    },
    "/user": {
      "get": {
        "description": "Get all publicly available <a href=\"${org.sagebionetworks.repo.model.UserProfile}\">UserProfile</a>\ndata in the system\n",
        "operationId": "getUserProfilesPaginated",
        "parameters": [
          {
            "description": "Used to indicate whether the sort direction is ascending or not.",
            "in": "query",
            "name": "ascending",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Limits the number of items that will be fetched for this page\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "type": "integer"
            }
          },
          {
            "description": "The offset index determines where this page will start from. An index of 0 is the first item.",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "Used to indicate upon which field(s) to sort.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "description": "Get all publicly available <a href=\"${org.sagebionetworks.repo.model.UserProfile}\">UserProfile</a>\ndata in the system\n",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfUserProfile"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get all publicly available.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/user/{id}/bundle": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "The ID of the Synapse user.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the user bundle of a specified user.\n<p><b>Note:</b> Private fields (e.g. \"rStudioUrl\") are omitted unless the requester\nis the profile owner or an administrator.</p>\n",
        "operationId": "getUserBundleByOwnerId",
        "parameters": [
          {
            "description": "integer flag defining which components to include in the bundle\n<p>\nThis integer is used as a bit-string of flags to specify which parts to include\nin the UserBundle. The mask is defined as follows:\n<ul>\n<li> UserProfile  = 0x1 </li>\n<li> ORCID  = 0x2 </li>\n<li> VerificationSubmission = 0x4 </li>\n<li> Is Certified = 0x8 </li>\n<li> Is Verified  = 0x10 </li>\n<li> Is ACT Member = 0x20 </li>\n</ul>\n</p>\n",
            "in": "query",
            "name": "mask",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the user bundle of a specified user.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/user/{id}/certificationStatus": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "The ID of the Synapse user.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "setUserCertificationStatus",
        "summary": "Set certification status",
        "description": "Setting certification status.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "410": {
            "content": {},
            "description": "Success"
          }
        },
        "tags": [
          "Certified User Services"
        ]
      }
    },
    "/user/{id}/certifiedUserPassingRecord": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "The ID of the Synapse user.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the Passing Record on the User Certification test for the\ngiven user.\n",
        "operationId": "getPassingRecord",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PassingRecord"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the Passing Record on the User Certification test for the given\nuser.\n",
        "tags": [
          "Certified User Services"
        ]
      }
    },
    "/user/{id}/memberList": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Returns the TeamMember info for a user and a given list of Team IDs.\nNot Found status is returned if the user ID is invalid, any of the Team IDs\nare invalid, or the user is not in any of the given teams.\n",
        "operationId": "listTeamMembersGivenUserandTeamList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdList"
              }
            }
          },
          "description": "Team IDs",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWrapperOfTeamMember"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Returns the TeamMember info for a user and a given list of Team IDs.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/user/{id}/openInvitation": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the open invitations to a user, optionally filtering by the\nTeam of origin.\nAn invitation is only open if it has not expired and if the user has not joined\nthe Team.\nNote: certain fields may be omitted when returned if the field value is null\n",
        "operationId": "getOpenInvitationsByUser",
        "parameters": [
          {
            "description": "the maximum number of invitations to return.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "the starting index of the returned results.",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "the ID of the Team extending the invitations",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfMembershipInvitation"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the open invitations to a user, optionally filtering by the Team\nof origin.\n",
        "tags": [
          "Membership Invitation Services"
        ]
      }
    },
    "/user/{id}/openRequest": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the open requests submitted by a user, optionally filtering\nby the Team.\nAn request is only open if it has not expired and if the requester has not been\nadded the Team.\nNote:  The 'id' in the URI must be the same ID as that of the authenticated\nuser issuing the request.\n",
        "operationId": "getOpenRequestsByUser",
        "parameters": [
          {
            "description": "the maximum number of requests to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "the starting index of the returned results.",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "teamId",
            "description": "ID of a Synapse Team.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfMembershipRequest"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve the open requests submitted by a user, optionally filtering by\nthe Team.\n",
        "tags": [
          "Membership Request Services"
        ]
      }
    },
    "/user/{id}/team": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve a paginated list of Teams to which the given user belongs.",
        "operationId": "getTeamsByMember",
        "parameters": [
          {
            "description": "the maximum number of Teams to return (default 10)",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "the starting index of the returned results (default 0)",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfTeam"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a paginated list of Teams to which the given user belongs.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/user/{id}/team/id": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve a paginated list of IDs of Teams to which the given user\nbelongs. If sorting is desired, both sort and\nascending must be specified. If they are omitted, results are not sorted.\n",
        "operationId": "getTeamIdsByMember",
        "parameters": [
          {
            "description": "the direction of sort: true for ascending, and false for descending",
            "in": "query",
            "name": "ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "controls pagination",
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the field to sort the team IDs on. Available options\n<a href=\"${org.sagebionetworks.repo.model.TeamSortOrder}\">TeamSortOrder</a>\n",
            "in": "query",
            "name": "sort",
            "schema": {
              "enum": [
                "TEAM_NAME"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTeamIds"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a paginated list of IDs of Teams to which the given user belongs.",
        "tags": [
          "Team Services"
        ]
      }
    },
    "/user/bundle": {
      "get": {
        "description": "Get the user bundle of the caller (my own bundle).\n<p><b>Note:</b> Private fields will be returned.</p>\n",
        "operationId": "getMyOwnUserBundle",
        "parameters": [
          {
            "description": "integer flag defining which components to include in the bundle\n<p>\nThis integer is used as a bit-string of flags to specify which parts to include\nin the UserBundle. The mask is defined as follows:\n<ul>\n<li> UserProfile  = 0x1 </li>\n<li> ORCID  = 0x2 </li>\n<li> VerificationSubmission = 0x4 </li>\n<li> Is Certified = 0x8 </li>\n<li> Is Verified  = 0x10 </li>\n<li> Is ACT Member = 0x20 </li>\n</ul>\n</p>\n",
            "in": "query",
            "name": "mask",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBundle"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the user bundle of the caller (my own bundle).",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userGroup": {
      "get": {
        "description": "Get the user-groups in the system",
        "operationId": "getUserGroups",
        "parameters": [
          {
            "in": "query",
            "description": "Return results in ascending order.",
            "name": "ascending",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "the maximum number of results to return.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "the starting index of the returned results.",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort results.",
            "schema": {
              "default": "NONE",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "description": "Get the user-groups in the system",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResultsOfUserGroup"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the user-groups in the system.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userGroupHeaders": {
      "get": {
        "description": "Get Users and Groups that match the given prefix.",
        "operationId": "getUserGroupHeadersByPrefix",
        "parameters": [
          {
            "description": "Limits the number of items that will be fetched for this page.\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "The offset index determines where this page will start from.\nAn index of 0 is the first item.\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 10
            }
          },
          {
            "description": "The name to search for.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Restrict the results to a type of principal.\nAvailable options: <a href=\"${org.sagebionetworks.repo.model.principal.TypeFilter}\">TypeFilter</a>.'\n",
            "in": "query",
            "name": "typeFilter",
            "schema": {
              "enum": [
                "ALL",
                "TEAMS_ONLY",
                "USERS_ONLY"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupHeaderResponsePage"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get Users and Groups that match the given prefix.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userGroupHeaders/aliases": {
      "post": {
        "description": "Get Users and Groups that match the given list of aliases.",
        "operationId": "getUserGroupHeadersByAliases",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AliasList"
              }
            }
          },
          "description": "The list of principal aliases to lookup. Each alias must be\neither a user name or team name. The maximum number of aliases per request is\n100.\n",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupHeaderResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get Users and Groups that match the given list of aliases.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userGroupHeaders/batch": {
      "get": {
        "description": "Batch get UserGroupHeaders.\nThis fetches information about a collection of users or groups, specified by Synapse\nIDs.\n",
        "operationId": "getUserGroupHeadersByIds",
        "parameters": [
          {
            "description": "IDs are specified as request parameters at the end of the URL, separated\nby commas. For example: ids=1001,819\n",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "description": "Batch get UserGroupHeaders.\nThis fetches information about a collection of users or groups, specified by\nSynapse IDs.\n",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupHeaderResponsePage"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Batch get UserGroupHeaders.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userProfile": {
      "get": {
        "description": "Get the profile of the caller (my profile).\n<p><b>Note:</b> Private user profile fields will be returned.</p>'\n",
        "operationId": "getMyOwnUserProfile",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the profile of the caller (my profile).",
        "tags": [
          "User Profile Services"
        ]
      },
      "post": {
        "description": "Batch get UserGroupHeaders.\nThis fetches information about a collection of users or groups, specified by Synapse\nIDs.'\n",
        "operationId": "listUserProfiles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdList"
              }
            }
          },
          "description": "IDs are specified as request parameters at the end of the URL, separated\nby commas. For example: ids=1001,819\n",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWrapperOfUserProfile"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Batch get UserGroupHeaders.",
        "tags": [
          "User Profile Services"
        ]
      },
      "put": {
        "description": "Update your own profile\n\n<p><b>Note: </b> The user associated with the UserProfile \"ownerId\" must match\nthe identity of the caller,\notherwise an Unauthorized response will occur.</p>\n",
        "operationId": "updateUserProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update your own profile.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userProfile/{profileId}": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "profileId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the profile of a specified user.\n<p><b>Note:</b> Private fields (e.g. \"rStudioUrl\") are omitted unless the requester\nis the profile owner or an administrator.</p>'\n",
        "operationId": "getUserProfile",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the profile of a specified user.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userProfile/{profileId}/image": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "profileId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the actual URL of the image file associated with a user's profile.\n<p>\nNote: This call will result in a HTTP temporary redirect (307), to the\nactual file URL if the caller meets all of the download requirements.\n</p>\n",
        "operationId": "imageRedirectUrlForUser",
        "parameters": [
          {
            "description": "When set to false, the URL will be returned as text/plain\ninstead of redirecting.\n",
            "in": "query",
            "name": "redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the actual URL of the image file associated with a user's profile.",
        "tags": [
          "User Profile Services"
        ]
      }
    },
    "/userProfile/{profileId}/image/preview": {
      "parameters": [
        {
          "description": "The ID of the Synapse user.",
          "in": "path",
          "name": "profileId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the actual URL of the image file associated with a user''s profile.\n<p>\nNote: This call will result in a HTTP temporary redirect (307), to the\nactual file URL if the caller meets all of the download requirements.\n</p>\n",
        "operationId": "imagePreviewRedirectUrlForUser",
        "parameters": [
          {
            "description": "When set to false, the URL will be returned as text/plain\ninstead of redirecting.\n",
            "in": "query",
            "name": "redirect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the actual URL of the image file associated with a user's profile.",
        "tags": [
          "User Profile Services"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Challenge": {
        "title": "Challenge",
        "type": "object",
        "properties": {
          "etag": {
            "type": "string",
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date."
          },
          "projectId": {
            "type": "string",
            "description": "The ID of the Project the challenge is used with."
          },
          "participantTeamId": {
            "type": "string",
            "description": "The ID of the Team which users join to participate in the Challenge"
          },
          "id": {
            "type": "string",
            "description": "The ID of this Challenge object"
          }
        },
        "description": "Settings for a Challenge Project.",
        "example": {
          "etag": "32439w3qsdfw",
          "projectId": "syn22222",
          "participantTeamId": "333333",
          "id": "4321"
        }
      },
      "ChallengePagedResults": {
        "title": "ChallengePagedResults",
        "type": "object",
        "properties": {
          "totalNumberOfResults": {
            "type": "integer",
            "description": "The total number of results"
          },
          "results": {
            "type": "array",
            "description": "The list of results for this page",
            "items": {
              "$ref": "#/components/schemas/Challenge"
            }
          }
        },
        "description": "List the Challenges for which the given participant is registered. To be in the returned list the caller must have READ permission on the project associated with the Challenge.",
        "example": {
          "totalNumberOfResults": 12345,
          "results": [
            {
              "etag": "32439w3qsdfw",
              "projectId": "syn22222",
              "participantTeamId": "333333",
              "id": "4321"
            },
            {
              "etag": "32439w3qsdfwasd",
              "projectId": "syn33333",
              "participantTeamId": "4444",
              "id": "4322"
            }
          ]
        }
      },
      "ChallengeTeam": {
        "title": "ChallengeTeam",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of this ChallengeTeam object"
          },
          "teamId": {
            "type": "string",
            "description": "The ID of the Team"
          },
          "challengeId": {
            "type": "string",
            "description": "The ID of the Challenge"
          },
          "message": {
            "type": "string",
            "description": "A descriptive message for the Team in the context of the Challenge. Limited to 500 characters."
          },
          "etag": {
            "type": "string",
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date."
          }
        },
        "description": "Relationship between a Challenge and registered Team",
        "example": {
          "id": "1111",
          "teamId": "222222",
          "challengeId": "3423",
          "message": "Testing",
          "etag": "33492273ssdf"
        }
      },
      "ChallengeTeamPagedResults": {
        "title": "ChallengeTeamPagedResults",
        "type": "object",
        "properties": {
          "totalNumberOfResults": {
            "type": "integer",
            "description": "The total number of results"
          },
          "results": {
            "type": "array",
            "description": "The list of results for this page",
            "items": {
              "$ref": "#/components/schemas/ChallengeTeam"
            }
          }
        },
        "description": "List the Teams registered for a Challenge. You must have READ permission in the associated Project to make this request.",
        "example": {
          "totalNumberOfResults": 12345,
          "results": [
            {
              "id": "1111",
              "teamId": "222222",
              "challengeId": "3423",
              "message": "Testing",
              "etag": "33492273ssdf"
            },
            {
              "id": "1112",
              "teamId": "222233",
              "challengeId": "3421",
              "message": "Testing foo",
              "etag": "33492273ssdddf"
            }
          ]
        }
      },
      "PaginatedIds": {
        "title": "PaginatedIds",
        "type": "object",
        "properties": {
          "totalNumberOfResults": {
            "type": "integer",
            "description": "The total number of results"
          },
          "results": {
            "type": "array",
            "description": "The list of Object Ids for this page",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Paginated results of strings",
        "example": {
          "totalNumberOfResults": 12345,
          "results": [
            "test1",
            "test2"
          ]
        }
      },
      "ObjectType": {
        "description": "JSON enum for the types of objects in Synapse.",
        "enum": [
          "ENTITY",
          "ENTITY_CONTAINER",
          "PRINCIPAL",
          "ACTIVITY",
          "EVALUATION",
          "EVALUATION_ROUND",
          "SUBMISSION",
          "EVALUATION_SUBMISSIONS",
          "FILE",
          "MESSAGE",
          "WIKI",
          "FAVORITE",
          "ACCESS_REQUIREMENT",
          "ACCESS_APPROVAL",
          "TEAM",
          "TABLE",
          "ACCESS_CONTROL_LIST",
          "PROJECT_SETTING",
          "VERIFICATION_SUBMISSION",
          "CERTIFIED_USER_PASSING_RECORD",
          "FORUM",
          "THREAD",
          "REPLY",
          "FORM_GROUP",
          "ORGANIZATION",
          "FORM_DATA",
          "ENTITY_VIEW",
          "USER_PROFILE",
          "DATA_ACCESS_REQUEST",
          "DATA_ACCESS_SUBMISSION",
          "DATA_ACCESS_SUBMISSION_STATUS",
          "MEMBERSHIP_INVITATION"
        ],
        "title": "ObjectType",
        "type": "string"
      },
      "DoiAssociation": {
        "description": "All fields that associate a Synapse object with a DOI.\nThe objectId and objectType are required to create or mint a DOI in all circumstances.\n",
        "example": {
          "associatedBy": "...",
          "associatedOn": "...",
          "associationId": "...",
          "doiUri": "...",
          "doiUrl": "...",
          "etag": "...",
          "objectId": "...",
          "objectType": "WIKI",
          "objectVersion": 12345,
          "updatedBy": "...",
          "updatedOn": "..."
        },
        "properties": {
          "associatedBy": {
            "description": "The ID of the user that creates this DOI. Provided by Synapse.",
            "type": "string"
          },
          "associatedOn": {
            "description": "The date time this DOI is first created. Provided by Synapse.",
            "type": "string"
          },
          "associationId": {
            "description": "The unique ID of this DOI stored in Synapse. Provided by Synapse.",
            "type": "string"
          },
          "doiUri": {
            "description": "The unique URI of this DOI to which the resource can be resolved. Provided by Synapse.",
            "type": "string"
          },
          "doiUrl": {
            "description": "The DOI URL that will point to the Synapse object. Provided by Synapse.",
            "type": "string"
          },
          "etag": {
            "description": "For Optimistic Concurrency Control (OCC). Required to successfully update a DOI.",
            "type": "string"
          },
          "objectId": {
            "description": "The ID of the digital object in Synapse for which this DOI is created.",
            "type": "string"
          },
          "objectType": {
            "$ref": "#/components/schemas/ObjectType"
          },
          "objectVersion": {
            "description": "The version of the digital object. When null, the DOI is associated with the current version of the object.",
            "type": "integer"
          },
          "updatedBy": {
            "description": "The ID of the user that last updated this DOI. Provided by Synapse.",
            "type": "string"
          },
          "updatedOn": {
            "description": "The date time this DOI is last updated. Provided by Synapse.",
            "type": "string"
          }
        },
        "required": [
          "objectId"
        ],
        "title": "DoiAssociation",
        "type": "object"
      },
      "NameIdentifierScheme": {
        "description": "Describes the scheme of the nameIdentifier. Required if nameIdentifier is used.",
        "enum": [
          "ORCID",
          "ISNI"
        ],
        "title": "NameIdentifierScheme",
        "type": "string"
      },
      "DoiNameIdentifier": {
        "description": "Uniquely identifies an individual or legal entity, according to various schemas.",
        "example": {
          "identifier": "...",
          "nameIdentifierScheme": "ISNI"
        },
        "properties": {
          "identifier": {
            "description": "The identifier belonging to the creator.",
            "type": "string"
          },
          "nameIdentifierScheme": {
            "$ref": "#/components/schemas/NameIdentifierScheme"
          }
        },
        "required": [
          "identifier",
          "nameIdentifierScheme"
        ],
        "title": "DoiNameIdentifier",
        "type": "object"
      },
      "DoiCreator": {
        "description": "JSON schema for DOI Metadata Creator.",
        "example": {
          "creatorName": "...",
          "nameIdentifiers": [
            {
              "identifier": "...",
              "nameIdentifierScheme": "ISNI"
            },
            {
              "identifier": "...",
              "nameIdentifierScheme": "ORCID"
            }
          ]
        },
        "properties": {
          "creatorName": {
            "description": "May be a corporate/institutional or personal name (\"Family, Given\").",
            "type": "string"
          },
          "nameIdentifiers": {
            "description": "Uniquely identifies an individual or legal entity, according to various schemas.",
            "items": {
              "$ref": "#/components/schemas/DoiNameIdentifier"
            },
            "type": "array"
          }
        },
        "required": [
          "creatorName"
        ],
        "title": "DoiCreator",
        "type": "object"
      },
      "DoiResourceTypeGeneral": {
        "description": "Describes the general type of media that DOI Metadata refers to.",
        "enum": [
          "Audiovisual",
          "Collection",
          "DataPaper",
          "Dataset",
          "Event",
          "Image",
          "InteractiveResource",
          "Model",
          "PhysicalObject",
          "Service",
          "Software",
          "Sound",
          "Text",
          "Workflow",
          "Other"
        ],
        "title": "DoiResourceTypeGeneral",
        "type": "string"
      },
      "DoiResourceType": {
        "description": "Describes the type of media that the DOI Metadata refers to.",
        "example": {
          "resourceTypeGeneral": "Image"
        },
        "properties": {
          "resourceTypeGeneral": {
            "$ref": "#/components/schemas/DoiResourceTypeGeneral"
          }
        },
        "title": "DoiResourceType",
        "type": "object"
      },
      "DoiTitle": {
        "description": "JSON schema for DOI Metadata Title.",
        "example": {
          "title": "..."
        },
        "properties": {
          "title": {
            "description": "A name or title by which a resource is known",
            "type": "string"
          }
        },
        "title": "DoiTitle",
        "type": "object"
      },
      "Doi": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DoiAssociation"
          },
          {
            "properties": {
              "creators": {
                "description": "The main researchers involved in producing the data, or the authors\nof the publication, in priority order.\n",
                "items": {
                  "$ref": "#/components/schemas/DoiCreator"
                },
                "type": "array"
              },
              "publicationYear": {
                "description": "The year that this resource became publicly accessible. Must be in YYYY format.",
                "type": "integer"
              },
              "resourceType": {
                "$ref": "#/components/schemas/DoiResourceType"
              },
              "titles": {
                "description": "A name or title by which a resource is known.",
                "items": {
                  "$ref": "#/components/schemas/DoiTitle"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "publicationYear",
          "titles",
          "creators"
        ],
        "description": "JSON schema for fields associated with a DOI and its metadata.",
        "title": "Doi"
      },
      "DoiRequest": {
        "description": "An AsynchronousRequestBody to mint or modify DOIs.",
        "example": {
          "concreteType": "...",
          "doi": {
            "associatedBy": "...",
            "associatedOn": "...",
            "associationId": "...",
            "creators": [
              {
                "creatorName": "...",
                "nameIdentifiers": [
                  {
                    "identifier": "...",
                    "nameIdentifierScheme": "ORCID"
                  }
                ]
              },
              {
                "creatorName": "...",
                "nameIdentifiers": [
                  {
                    "identifier": "...",
                    "nameIdentifierScheme": "ORCID"
                  }
                ]
              }
            ],
            "doiUri": "...",
            "doiUrl": "...",
            "etag": "...",
            "objectId": "...",
            "objectType": "FORUM",
            "objectVersion": 12345,
            "publicationYear": 12345,
            "resourceType": {
              "resourceTypeGeneral": "Dataset"
            },
            "titles": [
              {
                "title": "..."
              },
              {
                "title": "..."
              }
            ],
            "updatedBy": "...",
            "updatedOn": "..."
          }
        },
        "properties": {
          "concreteType": {
            "description": "concrete type",
            "type": "string"
          },
          "doi": {
            "$ref": "#/components/schemas/Doi"
          }
        },
        "title": "DoiRequest",
        "type": "object"
      },
      "AsyncJobId": {
        "description": "Object used to track the status of an asynchronous job.",
        "example": {
          "token": "..."
        },
        "properties": {
          "token": {
            "description": "Token",
            "type": "string"
          }
        },
        "title": "AsyncJobId",
        "type": "object"
      },
      "DoiResponse": {
        "description": "An response to a DOI mint or update request.",
        "example": {
          "concreteType": "...",
          "doi": {
            "associatedBy": "...",
            "associatedOn": "...",
            "associationId": "...",
            "creators": [
              {
                "creatorName": "...",
                "nameIdentifiers": [
                  {
                    "identifier": "...",
                    "nameIdentifierScheme": "ORCID"
                  },
                  {
                    "identifier": "...",
                    "nameIdentifierScheme": "ORCID"
                  }
                ]
              },
              {
                "creatorName": "...",
                "nameIdentifiers": [
                  {
                    "identifier": "...",
                    "nameIdentifierScheme": "ORCID"
                  }
                ]
              }
            ],
            "doiUri": "...",
            "doiUrl": "...",
            "etag": "...",
            "objectId": "...",
            "objectType": "FORM_GROUP",
            "objectVersion": 12345,
            "publicationYear": 12345,
            "resourceType": {
              "resourceTypeGeneral": "Sound"
            },
            "titles": [
              {
                "title": "..."
              },
              {
                "title": "..."
              }
            ],
            "updatedBy": "...",
            "updatedOn": "..."
          }
        },
        "properties": {
          "concreteType": {
            "description": "concrete type",
            "type": "string"
          },
          "doi": {
            "$ref": "#/components/schemas/Doi"
          }
        },
        "title": "DoiResponse",
        "type": "object"
      },
      "String": {
        "description": "String value",
        "type": "string"
      },
      "SubmissionQuota": {
        "title": "SubmissionQuota",
        "type": "object",
        "description": "Maximum submissions per team/participant per submission round. If round information is omitted, then this indicates the overall submission limit per team/participant.",
        "example": {
          "firstRoundStart": "33333333",
          "numberOfRounds": 1,
          "roundDurationMillis": 12345,
          "submissionLimit": 2
        },
        "properties": {
          "firstRoundStart": {
            "description": "The date/time at which the first round begins.",
            "type": "string"
          },
          "numberOfRounds": {
            "description": "The number of rounds, or null if there is no end.",
            "type": "integer"
          },
          "roundDurationMillis": {
            "description": "The duration of each round in milliseconds",
            "type": "integer"
          },
          "submissionLimit": {
            "description": "the maximum number of submissions per team/participant per round.",
            "type": "integer"
          }
        }
      },
      "EvaluationStatus": {
        "title": "EvaluationStatus",
        "type": "string",
        "description": "The possible states of a Synapse Evaluation.",
        "enum": [
          "PLANNED",
          "OPEN",
          "CLOSED",
          "COMPLETED"
        ]
      },
      "Evaluation": {
        "title": "Evaluation",
        "type": "object",
        "description": "An Evaluation is the core object of the Evaluation API, used to support collaborative data analysis challenges in Synapse.",
        "example": {
          "contentSource": "syn234444",
          "createdOn": "12345",
          "description": "Evaluation Queue",
          "etag": "aaaaa",
          "id": "12345",
          "name": "Test Evaluation",
          "ownerId": "22222",
          "quota": {
            "firstRoundStart": "12345",
            "numberOfRounds": 12345,
            "roundDurationMillis": 12345,
            "submissionLimit": 12345
          },
          "status": "PLANNED",
          "submissionInstructionsMessage": "Instructions",
          "submissionReceiptMessage": "Received"
        },
        "properties": {
          "contentSource": {
            "description": "The Synapse ID of the Entity to which this Evaluation belongs, e.g. a reference to a Synapse project.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date on which Evaluation was created.",
            "type": "string"
          },
          "description": {
            "description": "A text description of this Evaluation.",
            "type": "string"
          },
          "etag": {
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates.\nThe eTag changes every time an Evaluation is updated; it is used to detect when a client's\ncopy of an Evaluation is out-of-date.\n",
            "type": "string"
          },
          "id": {
            "description": "The unique immutable ID for this Evaluation.",
            "type": "string"
          },
          "name": {
            "description": "The name of this Evaluation",
            "type": "string"
          },
          "ownerId": {
            "description": "The ID of the Synapse user who created this Evaluation.",
            "type": "string"
          },
          "quota": {
            "$ref": "#/components/schemas/SubmissionQuota"
          },
          "status": {
            "$ref": "#/components/schemas/EvaluationStatus"
          },
          "submissionInstructionsMessage": {
            "description": "Message to display to users detailing acceptable formatting for Submissions to this Evaluation.",
            "type": "string"
          },
          "submissionReceiptMessage": {
            "description": "Message to display to users upon successful submission to this Evaluation.",
            "type": "string"
          }
        }
      },
      "PaginatedResultsOfEvaluation": {
        "title": "PaginatedResultsOfEvaluation",
        "type": "object",
        "description": "Gets a collection of Evaluations, within a given range.",
        "properties": {
          "results": {
            "type": "array",
            "description": "List of evaluations",
            "items": {
              "$ref": "#/components/schemas/Evaluation"
            }
          },
          "totalNumberOfResults": {
            "description": "Number of results per page",
            "type": "integer"
          }
        }
      },
      "BooleanResult": {
        "description": "Boolean result",
        "example": {
          "result": true
        },
        "properties": {
          "result": {
            "description": "Boolean result",
            "type": "boolean"
          }
        },
        "title": "BooleanResult",
        "type": "object"
      },
      "ACCESS_TYPE": {
        "title": "ACCESS_TYPE",
        "type": "string",
        "description": "The enumeration of possible permission.",
        "enum": [
          "CREATE",
          "READ",
          "UPDATE",
          "DELETE",
          "CHANGE_PERMISSIONS",
          "DOWNLOAD",
          "UPLOAD",
          "PARTICIPATE",
          "SUBMIT",
          "READ_PRIVATE_SUBMISSION",
          "UPDATE_SUBMISSION",
          "DELETE_SUBMISSION",
          "TEAM_MEMBERSHIP_UPDATE",
          "SEND_MESSAGE",
          "CHANGE_SETTINGS",
          "MODERATE"
        ]
      },
      "ResourceAccess": {
        "title": "ResourceAccess",
        "type": "object",
        "description": "JSON schema for a ResourceAccess POJO",
        "example": {
          "accessType": [
            "UPDATE",
            "DELETE_SUBMISSION"
          ],
          "principalId": 12345
        },
        "properties": {
          "accessType": {
            "description": "A list of types of access granted to the given principal",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ACCESS_TYPE"
            }
          },
          "principalId": {
            "description": "The id of the principal who is granted access",
            "type": "integer"
          }
        }
      },
      "AccessControlList": {
        "title": "AccessControlList",
        "type": "object",
        "description": "Contains list of principals who can access the data with the allowed types of access for each.",
        "properties": {
          "createdBy": {
            "description": "UNUSED -- maintained only for backwards compatibility with archived objects",
            "type": "string"
          },
          "creationDate": {
            "description": "Created Date",
            "type": "string"
          },
          "etag": {
            "description": "Synapse etag value",
            "type": "string"
          },
          "id": {
            "description": "The entity id",
            "type": "string"
          },
          "modifiedBy": {
            "description": "UNUSED -- maintained only for backwards compatibility with archived objects",
            "type": "string"
          },
          "modifiedOn": {
            "description": "UNUSED -- maintained only for backwards compatibility with archived objects",
            "type": "string"
          },
          "resourceAccess": {
            "description": "The list of principals who can access the data with the allowed types of access for each.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceAccess"
            }
          }
        },
        "example": {
          "createdBy": "...",
          "creationDate": "12345",
          "etag": "...",
          "id": "...",
          "modifiedBy": "...",
          "modifiedOn": "12345",
          "resourceAccess": [
            {
              "accessType": [
                "UPDATE_SUBMISSION",
                "CHANGE_PERMISSIONS"
              ],
              "principalId": 12345
            },
            {
              "accessType": [
                "UPDATE",
                "SEND_MESSAGE"
              ],
              "principalId": 12345
            }
          ]
        }
      },
      "EvaluationRoundLimitType": {
        "title": "EvaluationRoundLimitType",
        "type": "string",
        "description": "Round limit type",
        "enum": [
          "TOTAL",
          "DAILY",
          "WEEKLY",
          "MONTHLY"
        ]
      },
      "EvaluationRoundLimit": {
        "title": "EvaluationRoundLimit",
        "type": "object",
        "description": "Round limit",
        "example": {
          "limitType": "MONTHLY",
          "maximumSubmissions": 2
        },
        "properties": {
          "limitType": {
            "$ref": "#/components/schemas/EvaluationRoundLimitType"
          },
          "maximumSubmissions": {
            "description": "Max number of submissions",
            "type": "integer"
          }
        }
      },
      "EvaluationRound": {
        "title": "EvaluationRound",
        "type": "object",
        "description": "Evaluation Round",
        "example": {
          "etag": "...",
          "evaluationId": "...",
          "id": "...",
          "limits": [
            {
              "limitType": "TOTAL",
              "maximumSubmissions": 12345
            },
            {
              "limitType": "WEEKLY",
              "maximumSubmissions": 12345
            }
          ],
          "roundEnd": "12345",
          "roundStart": "12345"
        },
        "properties": {
          "etag": {
            "description": "Synapse etag",
            "type": "string"
          },
          "evaluationId": {
            "description": "The unique immutable ID for this Evaluation.",
            "type": "string"
          },
          "id": {
            "description": "Evaluation round Id",
            "type": "string"
          },
          "limits": {
            "description": "List of round limits",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvaluationRoundLimit"
            }
          },
          "roundEnd": {
            "description": "End of round",
            "type": "string"
          },
          "roundStart": {
            "description": "Start of round",
            "type": "string"
          }
        }
      },
      "EvaluationRoundListRequest": {
        "title": "EvaluationRoundListRequest",
        "type": "object",
        "description": "Round list request",
        "example": {
          "nextPageToken": "..."
        },
        "properties": {
          "nextPageToken": {
            "description": "The token required to be sent with the subsequent batch.",
            "type": "string"
          }
        }
      },
      "EvaluationRoundListResponse": {
        "title": "EvaluationRoundListResponse",
        "type": "object",
        "description": "List of evaluation rounds",
        "example": {
          "nextPageToken": "...",
          "page": [
            {
              "etag": "...",
              "evaluationId": "...",
              "id": "...",
              "limits": [
                {
                  "limitType": "TOTAL",
                  "maximumSubmissions": 12345
                },
                {
                  "limitType": "TOTAL",
                  "maximumSubmissions": 12345
                }
              ],
              "roundEnd": "12345",
              "roundStart": "12345"
            },
            {
              "etag": "...",
              "evaluationId": "...",
              "id": "...",
              "limits": [
                {
                  "limitType": "TOTAL",
                  "maximumSubmissions": 12345
                },
                {
                  "limitType": "MONTHLY",
                  "maximumSubmissions": 12345
                }
              ],
              "roundEnd": "12345",
              "roundStart": "12345"
            }
          ]
        },
        "properties": {
          "nextPageToken": {
            "description": "The token required to be sent with the subsequent batch.",
            "type": "string"
          },
          "page": {
            "description": "Evaluation round",
            "items": {
              "$ref": "#/components/schemas/EvaluationRound"
            },
            "type": "array"
          }
        }
      },
      "DoubleAnnotation": {
        "description": "An Annotation containing a Float value",
        "example": {
          "isPrivate": true,
          "key": "...",
          "value": 1.2
        },
        "properties": {
          "isPrivate": {
            "description": "Flag denoting whether this Annotation should be private.",
            "type": "boolean"
          },
          "key": {
            "description": "The key of this Annotation",
            "type": "string"
          },
          "value": {
            "description": "The value of this Annotation",
            "type": "number"
          }
        },
        "title": "DoubleAnnotation",
        "type": "object"
      },
      "LongAnnotation": {
        "description": "An Annotation containing a Integer value",
        "example": {
          "isPrivate": true,
          "key": "...",
          "value": 12345
        },
        "properties": {
          "isPrivate": {
            "description": "Flag denoting whether this Annotation should be private.",
            "type": "boolean"
          },
          "key": {
            "description": "The key of this Annotation",
            "type": "string"
          },
          "value": {
            "description": "The value of this Annotation",
            "type": "integer"
          }
        },
        "title": "LongAnnotation",
        "type": "object"
      },
      "StringAnnotation": {
        "title": "StringAnnotation",
        "type": "object",
        "description": "An Annotation containing a String value",
        "example": {
          "isPrivate": true,
          "key": "...",
          "value": "..."
        },
        "properties": {
          "isPrivate": {
            "description": "Flag denoting whether this Annotation should be private.",
            "type": "boolean"
          },
          "key": {
            "description": "The key of this Annotation",
            "type": "string"
          },
          "value": {
            "description": "The value of this Annotation",
            "type": "string"
          }
        }
      },
      "Annotations_annotation": {
        "title": "Annotations",
        "type": "object",
        "description": "Primary container object for Annotations on a Synapse object",
        "example": {
          "doubleAnnos": [
            {
              "isPrivate": true,
              "key": "...",
              "value": 12345
            },
            {
              "isPrivate": true,
              "key": "...",
              "value": 12345
            }
          ],
          "longAnnos": [
            {
              "isPrivate": true,
              "key": "...",
              "value": 12345
            },
            {
              "isPrivate": true,
              "key": "...",
              "value": 12345
            }
          ],
          "objectId": "...",
          "scopeId": "...",
          "stringAnnos": [
            {
              "isPrivate": true,
              "key": "...",
              "value": "..."
            },
            {
              "isPrivate": true,
              "key": "...",
              "value": "..."
            }
          ],
          "version": 12345
        },
        "properties": {
          "doubleAnnos": {
            "description": "A list of DoubleAnnnotations",
            "items": {
              "$ref": "#/components/schemas/DoubleAnnotation"
            },
            "type": "array"
          },
          "longAnnos": {
            "description": "A list of LongAnnnotations",
            "items": {
              "$ref": "#/components/schemas/LongAnnotation"
            },
            "type": "array"
          },
          "objectId": {
            "description": "The Synapse ID of the object with which these Annotations are associated",
            "type": "string"
          },
          "scopeId": {
            "description": "The Synapse ID of the umbrella object above the object with which these Annotations are associated",
            "type": "string"
          },
          "stringAnnos": {
            "description": "A list of StringAnnnotations",
            "items": {
              "$ref": "#/components/schemas/StringAnnotation"
            },
            "type": "array"
          },
          "version": {
            "description": "The system controlled version of this collection of annotations",
            "type": "integer"
          }
        }
      },
      "SubmissionStatusEnum": {
        "description": "The possible states of a Synapse Submission.",
        "enum": [
          "OPEN",
          "CLOSED",
          "SCORED",
          "INVALID",
          "VALIDATED",
          "EVALUATION_IN_PROGRESS",
          "RECEIVED",
          "REJECTED",
          "ACCEPTED"
        ],
        "title": "SubmissionStatusEnum",
        "type": "string"
      },
      "AnnotationsValueType": {
        "title": "AnnotationsValueType",
        "type": "string",
        "description": "describes the type of a AnnotationV2's value\n",
        "enum": [
          "STRING",
          "DOUBLE",
          "LONG",
          "TIMESTAMP_MS"
        ]
      },
      "AnnotationsValue": {
        "description": "Contains a AnnotationV2's value and its type\n",
        "example": {
          "type": "DOUBLE",
          "value": [
            "...",
            "..."
          ]
        },
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AnnotationsValueType"
          },
          "value": {
            "description": "List of values as strings. Clients should use the \"type\" field to determine how to\ninterpret the strings. Single values Annotations are represented as a list of size 1,\nand multiple values size > 1. Empty list or null is not allowed\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "AnnotationsValue",
        "type": "object"
      },
      "Annotations_v2": {
        "description": "Annotations are additional key-value pair metadata that are associated with an object.",
        "example": {
          "annotations": {
            "property1": {
              "type": "STRING",
              "value": [
                "...",
                "..."
              ]
            },
            "property2": {
              "type": "STRING",
              "value": [
                "...",
                "..."
              ]
            }
          },
          "etag": "...",
          "id": "..."
        },
        "properties": {
          "annotations": {
            "additionalProperties": {
              "$ref": "#/components/schemas/AnnotationsValue"
            },
            "description": "Additional metadata associated with the object. The key is the name of your desired annotations. The value is an object containing a list of string values (use empty list to represent no values for key) and the value type associated with all values in the list",
            "type": "object"
          },
          "etag": {
            "description": "Etag of the object to which this annotation belongs. To update an AnnotationV2, this field must match the current etag on the object.",
            "type": "string"
          },
          "id": {
            "description": "ID of the object to which this annotation belongs",
            "type": "string"
          }
        },
        "title": "Annotations",
        "type": "object"
      },
      "SubmissionStatus_model": {
        "description": "A SubmissionStatus is a secondary, mutable object associated with a Submission.\nThis object should be used to contain scoring data about the Submission.\n",
        "example": {
          "annotations": {
            "doubleAnnos": [
              {
                "isPrivate": true,
                "key": "...",
                "value": 12345
              },
              {
                "isPrivate": true,
                "key": "...",
                "value": 12345
              }
            ],
            "longAnnos": [
              {
                "isPrivate": true,
                "key": "...",
                "value": 12345
              },
              {
                "isPrivate": true,
                "key": "...",
                "value": 12345
              }
            ],
            "objectId": "...",
            "scopeId": "...",
            "stringAnnos": [
              {
                "isPrivate": true,
                "key": "...",
                "value": "..."
              },
              {
                "isPrivate": true,
                "key": "...",
                "value": "..."
              }
            ],
            "version": 12345
          },
          "canCancel": true,
          "cancelRequested": true,
          "entityId": "...",
          "etag": "...",
          "id": "...",
          "modifiedOn": "12345",
          "status": "ACCEPTED",
          "statusVersion": 12345,
          "submissionAnnotations": {
            "annotations": {
              "property1": {
                "type": "TIMESTAMP_MS",
                "value": [
                  "...",
                  "..."
                ]
              },
              "property2": {
                "type": "TIMESTAMP_MS",
                "value": [
                  "...",
                  "..."
                ]
              }
            },
            "etag": "...",
            "id": "..."
          },
          "versionNumber": 12345
        },
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/Annotations_annotation"
          },
          "canCancel": {
            "description": "Can this submission be cancelled? By default, this will be set to False.\nUsers can read this value. Only the queue's scoring application can change this value.\n",
            "type": "boolean"
          },
          "cancelRequested": {
            "description": "Has user requested to cancel this submission? By default, this will be set to False. Submission owner can read and request to change this value.",
            "type": "boolean"
          },
          "entityId": {
            "description": "The Synapse ID of the Entity in this Submission.",
            "type": "string"
          },
          "etag": {
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates.\nThe eTag changes every time an SubmissionStatus is updated; it is used to detect when a client's\ncopy of an SubmissionStatus is out-of-date.\n",
            "type": "string"
          },
          "id": {
            "description": "The unique, immutable Synapse ID of the Submission.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date on which this SubmissionStatus was last modified.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SubmissionStatusEnum"
          },
          "statusVersion": {
            "description": "A version of the status, auto-generated and auto-incremented by the system and read-only to the client.",
            "type": "number"
          },
          "submissionAnnotations": {
            "$ref": "#/components/schemas/Annotations_v2"
          },
          "versionNumber": {
            "description": "The version number of the Entity in this Submission.",
            "type": "integer"
          }
        },
        "title": "SubmissionStatus",
        "type": "object"
      },
      "SubmissionStatusBatch": {
        "description": "A batch of status objects, to be updated en masse.",
        "example": {
          "batchToken": "...",
          "isFirstBatch": true,
          "isLastBatch": true,
          "statuses": [
            {
              "annotations": {
                "doubleAnnos": [
                  {},
                  {}
                ],
                "longAnnos": [
                  {},
                  {}
                ],
                "objectId": "...",
                "scopeId": "...",
                "stringAnnos": [
                  {},
                  {}
                ],
                "version": 12345
              },
              "canCancel": true,
              "cancelRequested": true,
              "entityId": "...",
              "etag": "...",
              "id": "...",
              "modifiedOn": "12345",
              "status": "RECEIVED",
              "statusVersion": 12345,
              "submissionAnnotations": {
                "annotations": {
                  "property1": {},
                  "property2": {}
                },
                "etag": "...",
                "id": "..."
              },
              "versionNumber": 12345
            },
            {
              "annotations": {
                "doubleAnnos": [
                  {},
                  {}
                ],
                "longAnnos": [
                  {},
                  {}
                ],
                "objectId": "...",
                "scopeId": "...",
                "stringAnnos": [
                  {},
                  {}
                ],
                "version": 12345
              },
              "canCancel": true,
              "cancelRequested": true,
              "entityId": "...",
              "etag": "...",
              "id": "...",
              "modifiedOn": "12345",
              "status": "CLOSED",
              "statusVersion": 12345,
              "submissionAnnotations": {
                "annotations": {
                  "property1": {},
                  "property2": {}
                },
                "etag": "...",
                "id": "..."
              },
              "versionNumber": 12345
            }
          ]
        },
        "properties": {
          "batchToken": {
            "description": "A token required to accept a batch submission for all but the first batch.",
            "type": "string"
          },
          "isFirstBatch": {
            "description": "true if and only if this is the first batch to upload",
            "type": "boolean"
          },
          "isLastBatch": {
            "description": "true if and only if this is the last batch to upload",
            "type": "boolean"
          },
          "statuses": {
            "description": "A collection of Submission Statuses",
            "items": {
              "$ref": "#/components/schemas/SubmissionStatus_model"
            },
            "type": "array"
          }
        },
        "title": "SubmissionStatusBatch",
        "type": "object"
      },
      "BatchUploadResponse": {
        "title": "BatchUploadResponse",
        "type": "object",
        "description": "The response for a batch SubmissionStatus upload.",
        "example": {
          "nextUploadToken": "..."
        },
        "properties": {
          "nextUploadToken": {
            "description": "The token required to be sent with the subsequent batch.",
            "type": "string"
          }
        }
      },
      "SubmissionContributor": {
        "description": "A contributor to an evaluation Submission",
        "example": {
          "createdOn": "...",
          "principalId": "..."
        },
        "properties": {
          "createdOn": {
            "description": "'date when contributor was added to Submission.\nNormally this will match the creation date of the Submission, but administrative override is allowed.'\n",
            "type": "string"
          },
          "principalId": {
            "description": "ID of the contributor",
            "type": "string"
          }
        },
        "title": "SubmissionContributor",
        "type": "object"
      },
      "Submission_model": {
        "description": "A Submission to a Synapse Evaluation is a pointer to a versioned Entity.\nSubmissions are immutable, so we archive a copy of the EntityBundle at the time of submission.\n",
        "example": {
          "contributors": [
            {
              "createdOn": "...",
              "principalId": "..."
            },
            {
              "createdOn": "...",
              "principalId": "..."
            }
          ],
          "createdOn": "...",
          "dockerDigest": "...",
          "dockerRepositoryName": "...",
          "entityBundleJSON": "...",
          "entityId": "...",
          "evaluationId": "...",
          "evaluationRoundId": "...",
          "id": "...",
          "name": "...",
          "submitterAlias": "...",
          "teamId": "...",
          "userId": "...",
          "versionNumber": 12345
        },
        "properties": {
          "contributors": {
            "description": "User ids of the submitter and (if a team submission) the team members involved in creating the submission.\n",
            "items": {
              "$ref": "#/components/schemas/SubmissionContributor"
            },
            "type": "array"
          },
          "createdOn": {
            "description": "The date on which Submission was created.",
            "type": "string"
          },
          "dockerDigest": {
            "description": "For Docker repositories, the digest from the commit. Null for other entity types.",
            "type": "string"
          },
          "dockerRepositoryName": {
            "description": "For Docker repositories, the name of the submitted repository. Null for other entity types.",
            "type": "string"
          },
          "entityBundleJSON": {
            "description": "The Bundled Entity and Annotations JSON at the time of submission.",
            "type": "string"
          },
          "entityId": {
            "description": "The Synapse ID of the Entity in this Submission.",
            "type": "string"
          },
          "evaluationId": {
            "description": "The Synapse ID of the Evaluation this Submission is for.",
            "type": "string"
          },
          "evaluationRoundId": {
            "description": "The Synapse ID of the EvaluationRound to which this was submitted. DO NOT specify a value for this. It will be filled in automatically upon creation of the Submission if the Evaluation is configured with an EvaluationRound.",
            "type": "string"
          },
          "id": {
            "description": "The unique, immutable Synapse ID of this Submission.",
            "type": "string"
          },
          "name": {
            "description": "The title of this Submission.",
            "type": "string"
          },
          "submitterAlias": {
            "description": "The alias for the user or team creating the submission.",
            "type": "string"
          },
          "teamId": {
            "description": "optional Team which collaborated on the submission",
            "type": "string"
          },
          "userId": {
            "description": "The Synapse ID of the user who created this Submission.",
            "type": "string"
          },
          "versionNumber": {
            "description": "The submitted version number of the Entity.",
            "type": "integer"
          }
        },
        "title": "Submission",
        "type": "object"
      },
      "PaginatedResultsOfSubmission": {
        "title": "PaginatedResultsOfSubmission",
        "type": "object",
        "description": "Paginated Results of submissions",
        "example": {
          "results": [
            {
              "contributors": [
                {
                  "createdOn": "...",
                  "principalId": "..."
                },
                {
                  "createdOn": "...",
                  "principalId": "..."
                }
              ],
              "createdOn": "...",
              "dockerDigest": "...",
              "dockerRepositoryName": "...",
              "entityBundleJSON": "...",
              "entityId": "...",
              "evaluationId": "...",
              "evaluationRoundId": "...",
              "id": "...",
              "name": "...",
              "submitterAlias": "...",
              "teamId": "...",
              "userId": "...",
              "versionNumber": 12345
            },
            {
              "contributors": [
                {
                  "createdOn": "...",
                  "principalId": "..."
                },
                {
                  "createdOn": "...",
                  "principalId": "..."
                }
              ],
              "createdOn": "...",
              "dockerDigest": "...",
              "dockerRepositoryName": "...",
              "entityBundleJSON": "...",
              "entityId": "...",
              "evaluationId": "...",
              "evaluationRoundId": "...",
              "id": "...",
              "name": "...",
              "submitterAlias": "...",
              "teamId": "...",
              "userId": "...",
              "versionNumber": 12345
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "Submission results",
            "items": {
              "$ref": "#/components/schemas/Submission_model"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "description": "Calculating the actual totalNumberOfResults is not longer supported.\nTherefore, for each page, the totalNumberOfResults is estimated using the current page,\nlimit, and offset. When the page size equals the limit,\nthe totalNumberOfResults will be offset+pageSize+ 1. Otherwise,\nthe totalNumberOfResults will be offset+pageSize.'\n",
            "type": "integer"
          }
        }
      },
      "SubmissionBundle": {
        "description": "A bundle object to contain a Submission and its accompanying SubmissionStatus.",
        "example": {
          "submission": {
            "contributors": [
              {
                "createdOn": "...",
                "principalId": "..."
              },
              {
                "createdOn": "...",
                "principalId": "..."
              }
            ],
            "createdOn": "...",
            "dockerDigest": "...",
            "dockerRepositoryName": "...",
            "entityBundleJSON": "...",
            "entityId": "...",
            "evaluationId": "...",
            "evaluationRoundId": "...",
            "id": "...",
            "name": "...",
            "submitterAlias": "...",
            "teamId": "...",
            "userId": "...",
            "versionNumber": 12345
          },
          "submissionStatus": {
            "annotations": {
              "doubleAnnos": [
                {},
                {}
              ],
              "longAnnos": [
                {},
                {}
              ],
              "objectId": "...",
              "scopeId": "...",
              "stringAnnos": [
                {},
                {}
              ],
              "version": 12345
            },
            "canCancel": true,
            "cancelRequested": true,
            "entityId": "...",
            "etag": "...",
            "id": "...",
            "modifiedOn": "...",
            "status": "RECEIVED",
            "statusVersion": 12345,
            "submissionAnnotations": {
              "annotations": {
                "property1": {},
                "property2": {}
              },
              "etag": "...",
              "id": "..."
            },
            "versionNumber": 12345
          }
        },
        "properties": {
          "submission": {
            "$ref": "#/components/schemas/Submission_model"
          },
          "submissionStatus": {
            "$ref": "#/components/schemas/SubmissionStatus_model"
          }
        },
        "title": "SubmissionBundle",
        "type": "object"
      },
      "PaginatedResultsOfSubmissionBundle": {
        "description": "Gets the requesting user's bundled Submissions and SubmissionStatuses\nto a specified Evaluation.\n",
        "example": {
          "results": [
            {
              "submission": {
                "contributors": [
                  {},
                  {}
                ],
                "createdOn": "...",
                "dockerDigest": "...",
                "dockerRepositoryName": "...",
                "entityBundleJSON": "...",
                "entityId": "...",
                "evaluationId": "...",
                "evaluationRoundId": "...",
                "id": "...",
                "name": "...",
                "submitterAlias": "...",
                "teamId": "...",
                "userId": "...",
                "versionNumber": 12345
              },
              "submissionStatus": {
                "annotations": {},
                "canCancel": true,
                "cancelRequested": true,
                "entityId": "...",
                "etag": "...",
                "id": "...",
                "modifiedOn": "...",
                "status": "REJECTED",
                "statusVersion": 12345,
                "submissionAnnotations": {},
                "versionNumber": 12345
              }
            },
            {
              "submission": {
                "contributors": [
                  {},
                  {}
                ],
                "createdOn": "...",
                "dockerDigest": "...",
                "dockerRepositoryName": "...",
                "entityBundleJSON": "...",
                "entityId": "...",
                "evaluationId": "...",
                "evaluationRoundId": "...",
                "id": "...",
                "name": "...",
                "submitterAlias": "...",
                "teamId": "...",
                "userId": "...",
                "versionNumber": 12345
              },
              "submissionStatus": {
                "annotations": {},
                "canCancel": true,
                "cancelRequested": true,
                "entityId": "...",
                "etag": "...",
                "id": "...",
                "modifiedOn": "...",
                "status": "VALIDATED",
                "statusVersion": 12345,
                "submissionAnnotations": {},
                "versionNumber": 12345
              }
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "The the id of the entity to which this reference refers",
            "items": {
              "$ref": "#/components/schemas/SubmissionBundle"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "description": "Calculating the actual totalNumberOfResults is not longer supported. Therefore,\nfor each page, the totalNumberOfResults is estimated using the current page,\nlimit, and offset. When the page size equals the limit, the totalNumberOfResults\nwill be offset+pageSize+ 1. Otherwise, the totalNumberOfResults will be offset+pageSize.\n",
            "type": "integer"
          }
        },
        "title": "PaginatedResultsOfSubmissionBundle",
        "type": "object"
      },
      "Integer": {
        "description": "Integer value",
        "type": "integer"
      },
      "PaginatedResultsOfSubmissionStatus": {
        "description": "Gets a collection of SubmissionStatuses to a specified Evaluation.",
        "example": {
          "results": [
            {
              "annotations": {
                "doubleAnnos": [
                  {},
                  {}
                ],
                "longAnnos": [
                  {},
                  {}
                ],
                "objectId": "...",
                "scopeId": "...",
                "stringAnnos": [
                  {},
                  {}
                ],
                "version": 12345
              },
              "canCancel": true,
              "cancelRequested": true,
              "entityId": "...",
              "etag": "...",
              "id": "...",
              "modifiedOn": "...",
              "status": "ACCEPTED",
              "statusVersion": 12345,
              "submissionAnnotations": {
                "annotations": {
                  "property1": {},
                  "property2": {}
                },
                "etag": "...",
                "id": "..."
              },
              "versionNumber": 12345
            },
            {
              "annotations": {
                "doubleAnnos": [
                  {},
                  {}
                ],
                "longAnnos": [
                  {},
                  {}
                ],
                "objectId": "...",
                "scopeId": "...",
                "stringAnnos": [
                  {},
                  {}
                ],
                "version": 12345
              },
              "canCancel": true,
              "cancelRequested": true,
              "entityId": "...",
              "etag": "...",
              "id": "...",
              "modifiedOn": "...",
              "status": "ACCEPTED",
              "statusVersion": 12345,
              "submissionAnnotations": {
                "annotations": {
                  "property1": {},
                  "property2": {}
                },
                "etag": "...",
                "id": "..."
              },
              "versionNumber": 12345
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "The the id of the entity to which this reference refers",
            "items": {
              "$ref": "#/components/schemas/SubmissionStatus_model"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "description": "Calculating the actual totalNumberOfResults is not longer supported.\nTherefore, for each page, the totalNumberOfResults is estimated using\nthe current page, limit, and offset. When the page size equals the limit,\nthe totalNumberOfResults will be offset+pageSize+ 1.\nOtherwise, the totalNumberOfResults will be offset+pageSize.\n",
            "type": "integer"
          }
        },
        "title": "PaginatedResultsOfSubmissionStatus",
        "type": "object"
      },
      "MemberSubmissionEligibility": {
        "description": "Describes the eligibility of an indivdiual to submit to an Evaluation queue,\nreflecting the queue's submission quotas and current submissions.\n",
        "example": {
          "hasConflictingSubmission": true,
          "isEligible": true,
          "isQuotaFilled": true,
          "isRegistered": true,
          "principalId": 12345
        },
        "properties": {
          "hasConflictingSubmission": {
            "description": "true if the individual has submitted alone or with another team",
            "type": "boolean"
          },
          "isEligible": {
            "description": "true if all criteria are met",
            "type": "boolean"
          },
          "isQuotaFilled": {
            "description": "true if team/individual has reached the submission quota (for the given submission round)",
            "type": "boolean"
          },
          "isRegistered": {
            "description": "true if team/individual is registered for challenge",
            "type": "boolean"
          },
          "principalId": {
            "description": "Synapse user id",
            "type": "number"
          }
        },
        "title": "MemberSubmissionEligibility",
        "type": "object"
      },
      "SubmissionEligibility": {
        "description": "Describes the eligibility of a to submit to an Evaluation queue,\nreflecting the queue's submission quotas and current submissions.\n",
        "example": {
          "isEligible": true,
          "isQuotaFilled": true,
          "isRegistered": true
        },
        "properties": {
          "isEligible": {
            "description": "true if all criteria are met",
            "type": "boolean"
          },
          "isQuotaFilled": {
            "description": "true if team/individual has reached the submission quota (for the given submission round)",
            "type": "boolean"
          },
          "isRegistered": {
            "description": "true if team/individual is registered for challenge",
            "type": "boolean"
          }
        },
        "title": "SubmissionEligibility",
        "type": "object"
      },
      "TeamSubmissionEligibility": {
        "description": "Describes the eligibility of a Challenge Team to submit to an Evalution queue,\nreflecting the queue's submission quotas and current submissions.\n",
        "example": {
          "eligibilityStateHash": 12345,
          "evaluationId": "...",
          "membersEligibility": [
            {
              "hasConflictingSubmission": true,
              "isEligible": true,
              "isQuotaFilled": true,
              "isRegistered": true,
              "principalId": 12345
            },
            {
              "hasConflictingSubmission": true,
              "isEligible": true,
              "isQuotaFilled": true,
              "isRegistered": true,
              "principalId": 12345
            }
          ],
          "teamEligibility": {
            "isEligible": true,
            "isQuotaFilled": true,
            "isRegistered": true
          },
          "teamId": "..."
        },
        "properties": {
          "eligibilityStateHash": {
            "description": "A hash of this object, used for optimistic concurrency.",
            "type": "integer"
          },
          "evaluationId": {
            "description": "The ID of the Evaluation of interest",
            "type": "string"
          },
          "membersEligibility": {
            "description": "Describes the submission eligibility of the contributors to the Submission.",
            "items": {
              "$ref": "#/components/schemas/MemberSubmissionEligibility"
            },
            "type": "array"
          },
          "teamEligibility": {
            "$ref": "#/components/schemas/SubmissionEligibility"
          },
          "teamId": {
            "description": "The ID of the Team of interest",
            "type": "string"
          }
        },
        "title": "TeamSubmissionEligibility",
        "type": "object"
      },
      "Team": {
        "description": "JSON schema for Team POJO",
        "example": {
          "canPublicJoin": true,
          "createdBy": "...",
          "createdOn": "...",
          "description": "...",
          "etag": "...",
          "icon": "...",
          "id": "...",
          "modifiedBy": "...",
          "modifiedOn": "...",
          "name": "..."
        },
        "properties": {
          "canPublicJoin": {
            "description": "true for teams which members can join without an invitation or approval",
            "type": "boolean"
          },
          "createdBy": {
            "description": "The ID of the user that created this Team.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this Team was created.",
            "type": "string"
          },
          "description": {
            "description": "A short description of this Team.",
            "type": "string"
          },
          "etag": {
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle\nconcurrent updates. Since the E-Tag changes every time a Team is updated\nit is used to detect when a client's current representation of a Team is out-of-date.\n",
            "type": "string"
          },
          "icon": {
            "description": "fileHandleId for icon image of the Team",
            "type": "string"
          },
          "id": {
            "description": "The id of the Team.",
            "type": "string"
          },
          "modifiedBy": {
            "description": "The ID of the user that last modified this Team.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date this Team was last modified.",
            "type": "string"
          },
          "name": {
            "description": "The name of the Team.",
            "type": "string"
          }
        },
        "title": "Team",
        "type": "object"
      },
      "TotalNumberOfResults": {
        "description": "Calculating the actual totalNumberOfResults is not longer supported.\nTherefore, for each page, the totalNumberOfResults is estimated using the current page,\nlimit, and offset. When the page size equals the limit, the totalNumberOfResults will\nbe offset+pageSize+ 1. Otherwise, the totalNumberOfResults will be offset+pageSize.\n",
        "type": "integer"
      },
      "PaginatedResultsOfTeam": {
        "description": "List of Teams",
        "example": {
          "results": [
            {
              "canPublicJoin": true,
              "createdBy": "...",
              "createdOn": "...",
              "description": "...",
              "etag": "...",
              "icon": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "..."
            },
            {
              "canPublicJoin": true,
              "createdBy": "...",
              "createdOn": "...",
              "description": "...",
              "etag": "...",
              "icon": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "List of Teams",
            "items": {
              "$ref": "#/components/schemas/Team"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfTeam",
        "type": "object"
      },
      "RestrictableObjectType": {
        "description": "JSON enum for the types of objects which can be restricted by an AccessRequirement.",
        "enum": [
          "ENTITY",
          "EVALUATION",
          "TEAM"
        ],
        "title": "RestrictableObjectType",
        "type": "string"
      },
      "RestrictableObjectDescriptor": {
        "description": "Restrictable object descriptor",
        "example": {
          "id": "...",
          "type": "EVALUATION"
        },
        "properties": {
          "id": {
            "description": "Id",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RestrictableObjectType"
          }
        },
        "title": "RestrictableObjectDescriptor",
        "type": "object"
      },
      "AccessRequirement": {
        "description": "Interface for JSON schema for AccessRequirement. The Access Requirement mechanism is\ndistinct from the access control list in that it is controlled not by the entity\nowner but by a separate authority: Access Requirements are created and maintained\nby the Synapse Access and Compliance Team (ACT). ACTAccessRequirements can only be\napproved by the ACT. Self-sign Access Requirements can be approved by the user\ndesiring access, but said user first has to meet 'terms of use' associated with the requirement.\n",
        "example": {
          "accessType": "SUBMIT",
          "concreteType": "...",
          "createdBy": "...",
          "createdOn": "...",
          "description": "...",
          "etag": "...",
          "id": 12345,
          "modifiedBy": "...",
          "modifiedOn": "...",
          "subjectIds": [
            {
              "id": "...",
              "type": "EVALUATION"
            },
            {
              "id": "...",
              "type": "TEAM"
            }
          ],
          "versionNumber": 12345
        },
        "properties": {
          "accessType": {
            "$ref": "#/components/schemas/ACCESS_TYPE"
          },
          "concreteType": {
            "description": "Indicates which type of AccessRequirement this object represents. Provided by the system, the user may not set this field.",
            "type": "string"
          },
          "createdBy": {
            "description": "The user that created this object. Provided by the system, the user may not set this field.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this object was created. Provided by the system, the user may not set this field.",
            "type": "string"
          },
          "description": {
            "description": "Short optional description for the AR. Limited to 50 characters.",
            "type": "string"
          },
          "etag": {
            "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent\nupdates. Since the E-Tag changes every time an entity is updated it is used to\ndetect when a client's current representation of an object is out-of-date.\n",
            "type": "string"
          },
          "id": {
            "description": "The unique immutable ID. Provided by the system, the user may not set this field.",
            "type": "number"
          },
          "modifiedBy": {
            "description": "The user that last modified this object. Provided by the system, the user may not set this field.",
            "type": "string"
          },
          "modifiedOn": {
            "description": "The date this object was last modified. Provided by the system, the user may not set this field.",
            "type": "string"
          },
          "subjectIds": {
            "description": "The IDs of the items controlled by this Access Requirement. Required when creating or updating.",
            "items": {
              "$ref": "#/components/schemas/RestrictableObjectDescriptor"
            },
            "type": "array"
          },
          "versionNumber": {
            "description": "The version number issued to this version on the object.",
            "type": "integer"
          }
        },
        "title": "AccessRequirement",
        "type": "object"
      },
      "PaginatedResultsOfAccessRequirement": {
        "description": "Retrieve paginated list of ALL Access Requirements associated with a Team.",
        "example": {
          "results": [
            {
              "accessType": "READ",
              "concreteType": "...",
              "createdBy": "...",
              "createdOn": "...",
              "description": "...",
              "etag": "...",
              "id": 12345,
              "modifiedBy": "...",
              "modifiedOn": "...",
              "subjectIds": [
                {
                  "id": "...",
                  "type": "EVALUATION"
                },
                {
                  "id": "...",
                  "type": "TEAM"
                }
              ],
              "versionNumber": 12345
            },
            {
              "accessType": "UPLOAD",
              "concreteType": "...",
              "createdBy": "...",
              "createdOn": "...",
              "description": "...",
              "etag": "...",
              "id": 12345,
              "modifiedBy": "...",
              "modifiedOn": "...",
              "subjectIds": [
                {
                  "id": "...",
                  "type": "ENTITY"
                },
                {
                  "id": "...",
                  "type": "TEAM"
                }
              ],
              "versionNumber": 12345
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "The the id of the entity to which this reference refers",
            "items": {
              "$ref": "#/components/schemas/AccessRequirement"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "description": "Calculating the actual totalNumberOfResults is not longer supported.\nTherefore, for each page, the totalNumberOfResults is estimated using\nthe current page, limit, and offset. When the page size equals the limit,\nthe totalNumberOfResults will be offset+pageSize+ 1. Otherwise, the\ntotalNumberOfResults will be offset+pageSize.\n",
            "type": "integer"
          }
        },
        "title": "PaginatedResultsOfAccessRequirement",
        "type": "object"
      },
      "UserGroupHeader": {
        "description": "JSON schema for UserHeader POJO",
        "example": {
          "displayName": "...",
          "email": "...",
          "firstName": "...",
          "isIndividual": true,
          "lastName": "...",
          "ownerId": "...",
          "userName": "..."
        },
        "properties": {
          "displayName": {
            "description": "This is deprecated and will always be null",
            "type": "string"
          },
          "email": {
            "description": "User's current email address\n",
            "type": "string"
          },
          "firstName": {
            "description": "First Name",
            "type": "string"
          },
          "isIndividual": {
            "description": "True if this is a user, false if it is a group",
            "type": "boolean"
          },
          "lastName": {
            "description": "Last Name",
            "type": "string"
          },
          "ownerId": {
            "description": "A foreign key to the ID of the 'principal' object for the user.\n",
            "type": "string"
          },
          "userName": {
            "description": "A name chosen by the user that uniquely identifies them.",
            "type": "string"
          }
        },
        "title": "UserGroupHeader",
        "type": "object"
      },
      "TeamMember": {
        "description": "JSON schema for Team Member, which bundles UserGroupHeader and isAdmin",
        "example": {
          "isAdmin": true,
          "member": {
            "displayName": "...",
            "email": "...",
            "firstName": "...",
            "isIndividual": true,
            "lastName": "...",
            "ownerId": "...",
            "userName": "..."
          },
          "teamId": "..."
        },
        "properties": {
          "isAdmin": {
            "description": "True if the user is an administrator in the Team.",
            "type": "boolean"
          },
          "member": {
            "$ref": "#/components/schemas/UserGroupHeader"
          },
          "teamId": {
            "description": "The id of the Team.",
            "type": "string"
          }
        },
        "title": "TeamMember",
        "type": "object"
      },
      "TeamMembershipStatus": {
        "description": "JSON schema for the possible status of a User with respect to Team membership.",
        "example": {
          "canJoin": true,
          "canSendEmail": true,
          "hasOpenInvitation": true,
          "hasOpenRequest": true,
          "hasUnmetAccessRequirement": true,
          "isMember": true,
          "membershipApprovalRequired": true,
          "teamId": "...",
          "userId": "..."
        },
        "properties": {
          "canJoin": {
            "description": "true if and only if the user requesting this status information can join the user to the team",
            "type": "boolean"
          },
          "canSendEmail": {
            "description": "true if and only if the user can send an email to the team",
            "type": "boolean"
          },
          "hasOpenInvitation": {
            "description": "true if and only if the user has an open invitation to join the team",
            "type": "boolean"
          },
          "hasOpenRequest": {
            "description": "true if and only if the user has an open request to join the team",
            "type": "boolean"
          },
          "hasUnmetAccessRequirement": {
            "description": "true if and only if there is at least one unmet access requirement for the user on the team",
            "type": "boolean"
          },
          "isMember": {
            "description": "true if and only if the user is a member of the team",
            "type": "boolean"
          },
          "membershipApprovalRequired": {
            "description": "true if and only if team admin approval is required for the user to join the team",
            "type": "boolean"
          },
          "teamId": {
            "description": "The id of the Team.",
            "type": "string"
          },
          "userId": {
            "description": "The principal id of the user.",
            "type": "string"
          }
        },
        "title": "TeamMembershipStatus",
        "type": "object"
      },
      "IdList": {
        "description": "List of IDs",
        "example": {
          "list": [
            12345,
            12345
          ]
        },
        "properties": {
          "list": {
            "description": "List of IDs",
            "items": {
              "type": "integer"
            },
            "type": "array"
          }
        },
        "title": "IdList",
        "type": "object"
      },
      "ListWrapperOfTeamMember": {
        "description": "A list of Teams",
        "example": {
          "list": [
            {
              "isAdmin": true,
              "member": {
                "displayName": "...",
                "email": "...",
                "firstName": "...",
                "isIndividual": true,
                "lastName": "...",
                "ownerId": "...",
                "userName": "..."
              },
              "teamId": "..."
            },
            {
              "isAdmin": true,
              "member": {
                "displayName": "...",
                "email": "...",
                "firstName": "...",
                "isIndividual": true,
                "lastName": "...",
                "ownerId": "...",
                "userName": "..."
              },
              "teamId": "..."
            }
          ]
        },
        "properties": {
          "list": {
            "description": "List of teams",
            "items": {
              "$ref": "#/components/schemas/TeamMember"
            },
            "type": "array"
          }
        },
        "title": "ListWrapperOfTeamMember",
        "type": "object"
      },
      "MembershipInvitation": {
        "description": "JSON schema for MembershipInvitation POJO",
        "example": {
          "createdBy": "...",
          "createdOn": "...",
          "expiresOn": "...",
          "id": "...",
          "inviteeEmail": "...",
          "inviteeId": "...",
          "message": "...",
          "teamId": "..."
        },
        "properties": {
          "createdBy": {
            "description": "The ID of the user that created this MembershipInvitation.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this MembershipInvitation was created.",
            "type": "string"
          },
          "expiresOn": {
            "description": "The date this invitation expires (optional).",
            "type": "string"
          },
          "id": {
            "description": "The id of the MembershipInvitation.",
            "type": "string"
          },
          "inviteeEmail": {
            "description": "The email address of the user being invited to join the Team.",
            "type": "string"
          },
          "inviteeId": {
            "description": "The principal ID of the user being invited to join the Team.",
            "type": "string"
          },
          "message": {
            "description": "The invitation message (optional).",
            "type": "string"
          },
          "teamId": {
            "description": "The id of the Team which the user is invited to join.",
            "type": "string"
          }
        },
        "title": "MembershipInvitation",
        "type": "object"
      },
      "PaginatedResultsOfMembershipInvitation": {
        "description": "Retrieve the open invitations from a Team, optionally filtering by the invitee.\nAn invitation is only open if it has not expired and if the user has not joined\nthe Team. Note: certain fields may be omitted when returned if the field value is null\n",
        "example": {
          "effectiveSchema": "...",
          "results": [
            {
              "createdBy": "...",
              "createdOn": "...",
              "expiresOn": "...",
              "id": "...",
              "inviteeEmail": "...",
              "inviteeId": "...",
              "message": "...",
              "teamId": "..."
            },
            {
              "createdBy": "...",
              "createdOn": "...",
              "expiresOn": "...",
              "id": "...",
              "inviteeEmail": "...",
              "inviteeId": "...",
              "message": "...",
              "teamId": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "The the id of the entity to which this reference refers",
            "items": {
              "$ref": "#/components/schemas/MembershipInvitation"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "description": "Calculating the actual totalNumberOfResults is not longer supported.\nTherefore, for each page, the totalNumberOfResults is estimated using\nthe current page, limit, and offset. When the page size equals the limit,\nthe totalNumberOfResults will be offset+pageSize+ 1. Otherwise, the\ntotalNumberOfResults will be offset+pageSize.\n",
            "type": "integer"
          }
        },
        "title": "PaginatedResultsOfMembershipInvitation",
        "type": "object"
      },
      "MembershipRequest": {
        "description": "JSON schema for MembershipRequest POJO",
        "example": {
          "createdBy": "...",
          "createdOn": "...",
          "expiresOn": "...",
          "id": "...",
          "message": "...",
          "teamId": "...",
          "userId": "..."
        },
        "properties": {
          "createdBy": {
            "description": "The ID of the user that created this MembershipRequest.",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this MembershipRequest was created.",
            "type": "string"
          },
          "expiresOn": {
            "description": "The date this MembershipRequest expires (optional).",
            "type": "string"
          },
          "id": {
            "description": "The id of the MembershipRequest.",
            "type": "string"
          },
          "message": {
            "description": "The request message (optional).",
            "type": "string"
          },
          "teamId": {
            "description": "The id of the Team to which the request is sent.",
            "type": "string"
          },
          "userId": {
            "description": "The id of the user for whom membership is requested.",
            "type": "string"
          }
        },
        "title": "MembershipRequest",
        "type": "object"
      },
      "PaginatedResultsOfMembershipRequest": {
        "description": "List of Membership Requests",
        "example": {
          "effectiveSchema": "...",
          "results": [
            {
              "createdBy": "...",
              "createdOn": "...",
              "expiresOn": "...",
              "id": "...",
              "message": "...",
              "teamId": "...",
              "userId": "..."
            },
            {
              "createdBy": "...",
              "createdOn": "...",
              "expiresOn": "...",
              "id": "...",
              "message": "...",
              "teamId": "...",
              "userId": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "List of membership requests\n",
            "items": {
              "$ref": "#/components/schemas/MembershipRequest"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "description": "Calculating the actual totalNumberOfResults is not longer supported. Therefore,\nfor each page, the totalNumberOfResults is estimated using the current page, limit,\nand offset. When the page size equals the limit, the totalNumberOfResults will be\noffset+pageSize+ 1. Otherwise, the totalNumberOfResults will be offset+pageSize.\n",
            "type": "integer"
          }
        },
        "title": "PaginatedResultsOfMembershipRequest",
        "type": "object"
      },
      "ListWrapperOfTeam": {
        "description": "List of Teams.",
        "example": {
          "list": [
            {
              "canPublicJoin": true,
              "createdBy": "...",
              "createdOn": "...",
              "description": "...",
              "etag": "...",
              "icon": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "..."
            },
            {
              "canPublicJoin": true,
              "createdBy": "...",
              "createdOn": "...",
              "description": "...",
              "etag": "...",
              "icon": "...",
              "id": "...",
              "modifiedBy": "...",
              "modifiedOn": "...",
              "name": "..."
            }
          ]
        },
        "properties": {
          "list": {
            "description": "List of Teams.",
            "items": {
              "$ref": "#/components/schemas/Team"
            },
            "type": "array"
          }
        },
        "title": "ListWrapperOfTeam",
        "type": "object"
      },
      "JoinTeamSignedToken": {
        "description": "Signed token containing the information needed to join a new user to a team.",
        "example": {
          "concreteType": "...",
          "createdOn": "...",
          "expiresOn": "...",
          "hmac": "...",
          "memberId": "...",
          "teamId": "...",
          "userId": "...",
          "version": 12345
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "createdOn": {
            "description": "The date-time the token was generated.",
            "type": "string"
          },
          "expiresOn": {
            "description": "The date-time when this token expires.",
            "type": "string"
          },
          "hmac": {
            "description": "The hash message authentication code for the message.",
            "type": "string"
          },
          "memberId": {
            "description": "The ID of the new team member.",
            "type": "string"
          },
          "teamId": {
            "description": "The ID of the team which the user was invited to join.",
            "type": "string"
          },
          "userId": {
            "description": "The ID of the user who is acting to add the new member to the Team.\nThe HMAC in the token authenticates that the request is being made by this user.'\n",
            "type": "string"
          },
          "version": {
            "description": "The version of the key used to generate the HMAC.",
            "type": "integer"
          }
        },
        "title": "JoinTeamSignedToken",
        "type": "object"
      },
      "ResponseMessage": {
        "description": "JSON schema for a user-readable message describing the response to a request.",
        "example": {
          "message": "..."
        },
        "properties": {
          "message": {
            "description": "a user-readable message describing the response to a request",
            "type": "string"
          }
        },
        "title": "ResponseMessage",
        "type": "object"
      },
      "PaginatedResultsOfTeamMember": {
        "description": "List of Team Members",
        "example": {
          "results": [
            {
              "isAdmin": true,
              "member": {
                "displayName": "...",
                "email": "...",
                "firstName": "...",
                "isIndividual": true,
                "lastName": "...",
                "ownerId": "...",
                "userName": "..."
              },
              "teamId": "..."
            },
            {
              "isAdmin": true,
              "member": {
                "displayName": "...",
                "email": "...",
                "firstName": "...",
                "isIndividual": true,
                "lastName": "...",
                "ownerId": "...",
                "userName": "..."
              },
              "teamId": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "List of Team Members",
            "items": {
              "$ref": "#/components/schemas/TeamMember"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfTeamMember",
        "type": "object"
      },
      "Count": {
        "description": "Count of items",
        "example": {
          "count": 12345
        },
        "properties": {
          "count": {
            "description": "Count of items",
            "type": "integer"
          }
        },
        "title": "Count",
        "type": "object"
      },
      "Empty": {
        "type": "object"
      },
      "TrashedEntity": {
        "description": "JSON schema for the TrashEntity POJO. A trashed entity is an entity in the trash can.",
        "example": {
          "deletedByPrincipalId": "...",
          "deletedOn": "...",
          "entityId": "...",
          "entityName": "...",
          "originalParentId": "..."
        },
        "properties": {
          "deletedByPrincipalId": {
            "description": "The ID of the user who deleted the entity.",
            "type": "string"
          },
          "deletedOn": {
            "description": "The date and time when the deletion occurred.",
            "type": "string"
          },
          "entityId": {
            "description": "The id of the entity.",
            "type": "string"
          },
          "entityName": {
            "description": "The name of this entity",
            "type": "string"
          },
          "originalParentId": {
            "description": "The ID of the original parent before deletion.",
            "type": "string"
          }
        },
        "title": "TrashedEntity",
        "type": "object"
      },
      "PaginatedResultsOfTrashedEntity": {
        "description": "List of trashed entities",
        "example": {
          "effectiveSchema": "...",
          "results": [
            {
              "deletedByPrincipalId": "...",
              "deletedOn": "...",
              "entityId": "...",
              "entityName": "...",
              "originalParentId": "..."
            },
            {
              "deletedByPrincipalId": "...",
              "deletedOn": "...",
              "entityId": "...",
              "entityName": "...",
              "originalParentId": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "List of trashed entities.",
            "items": {
              "$ref": "#/components/schemas/TrashedEntity"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfTrashedEntity",
        "type": "object"
      },
      "Etag": {
        "description": "Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle\nconcurrent updates. Since the E-Tag changes every time an entity is updated\nit is used to detect when a client's current representation of an entity is\nout-of-date.\n",
        "type": "string"
      },
      "Settings": {
        "description": "Contains a user's notification settings\n",
        "example": {
          "markEmailedMessagesAsRead": true,
          "sendEmailNotifications": true
        },
        "properties": {
          "markEmailedMessagesAsRead": {
            "description": "Should messages that are emailed to the user be marked as READ in Synapse? Default false.",
            "type": "boolean",
            "default": false
          },
          "sendEmailNotifications": {
            "description": "Should the user receive email notifications? Default true.",
            "type": "boolean",
            "default": true
          }
        },
        "title": "Settings",
        "type": "object"
      },
      "UserPreference": {
        "description": "User preferences",
        "example": {
          "concreteType": "...",
          "name": "..."
        },
        "properties": {
          "concreteType": {
            "description": "Concrete type",
            "type": "string"
          },
          "name": {
            "description": "The name of the user preference.",
            "type": "string"
          }
        },
        "title": "UserPreference",
        "type": "object"
      },
      "UserProfile": {
        "description": "JSON schema for UserProfile POJO",
        "example": {
          "RStudioUrl": "...",
          "company": "...",
          "createdOn": "...",
          "displayName": "...",
          "email": "...",
          "emails": [
            "...",
            "..."
          ],
          "etag": "...",
          "firstName": "...",
          "industry": "...",
          "lastName": "...",
          "location": "...",
          "notificationSettings": {
            "markEmailedMessagesAsRead": true,
            "sendEmailNotifications": true
          },
          "openIds": [
            "...",
            "..."
          ],
          "ownerId": "...",
          "position": "...",
          "preferences": [
            {
              "concreteType": "...",
              "name": "..."
            },
            {
              "concreteType": "...",
              "name": "..."
            }
          ],
          "profilePicureFileHandleId": "...",
          "summary": "...",
          "teamName": "...",
          "url": "...",
          "userName": "..."
        },
        "properties": {
          "RStudioUrl": {
            "description": "URL for RStudio server assigned to the user",
            "type": "string"
          },
          "company": {
            "description": "This person's current affiliation\n",
            "type": "string"
          },
          "createdOn": {
            "description": "The date this profile was created.",
            "type": "string"
          },
          "displayName": {
            "description": "Will always be null.",
            "type": "string",
            "deprecated": true
          },
          "email": {
            "description": "Users can have more than one email. See emails",
            "type": "string",
            "deprecated": true
          },
          "emails": {
            "description": "The list of user email addresses registered to this user.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "firstName": {
            "description": "This person's given name (forename)\n",
            "type": "string"
          },
          "industry": {
            "description": "The industry/discipline that this person is associated with",
            "type": "string"
          },
          "lastName": {
            "description": "This person's family name (surname)\n",
            "type": "string"
          },
          "location": {
            "description": "This person's location\n",
            "type": "string"
          },
          "notificationSettings": {
            "$ref": "#/components/schemas/Settings"
          },
          "openIds": {
            "description": "'The list of OpenIds bound to this user's account.'\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ownerId": {
            "description": "'A foreign key to the ID of the 'principal' object for the user.'\n",
            "type": "string"
          },
          "position": {
            "description": "This person's current position title\n",
            "type": "string"
          },
          "preferences": {
            "description": "User preferences",
            "items": {
              "$ref": "#/components/schemas/UserPreference"
            },
            "type": "array"
          },
          "profilePicureFileHandleId": {
            "description": "The FileHandle.id of the user's profile picture.\n",
            "type": "string"
          },
          "summary": {
            "description": "A summary description about this person",
            "type": "string"
          },
          "teamName": {
            "description": "This person's default team name\n",
            "type": "string"
          },
          "url": {
            "description": "A link to more information about this person",
            "type": "string"
          },
          "userName": {
            "description": "A name chosen by the user that uniquely identifies them.",
            "type": "string"
          }
        },
        "title": "UserProfile",
        "type": "object"
      },
      "PaginatedResultsOfUserProfile": {
        "description": "Page of UserProfiles",
        "example": {
          "results": [
            {
              "RStudioUrl": "...",
              "company": "...",
              "createdOn": "...",
              "displayName": "...",
              "email": "...",
              "emails": [
                "...",
                "..."
              ],
              "etag": "...",
              "firstName": "...",
              "industry": "...",
              "lastName": "...",
              "location": "...",
              "notificationSettings": {
                "markEmailedMessagesAsRead": true,
                "sendEmailNotifications": true
              },
              "openIds": [
                "...",
                "..."
              ],
              "ownerId": "...",
              "position": "...",
              "preferences": [
                {
                  "concreteType": "...",
                  "name": "..."
                },
                {
                  "concreteType": "...",
                  "name": "..."
                }
              ],
              "profilePicureFileHandleId": "...",
              "summary": "...",
              "teamName": "...",
              "url": "...",
              "userName": "..."
            },
            {
              "RStudioUrl": "...",
              "company": "...",
              "createdOn": "...",
              "displayName": "...",
              "email": "...",
              "emails": [
                "...",
                "..."
              ],
              "etag": "...",
              "firstName": "...",
              "industry": "...",
              "lastName": "...",
              "location": "...",
              "notificationSettings": {
                "markEmailedMessagesAsRead": true,
                "sendEmailNotifications": true
              },
              "openIds": [
                "...",
                "..."
              ],
              "ownerId": "...",
              "position": "...",
              "preferences": [
                {
                  "concreteType": "...",
                  "name": "..."
                },
                {
                  "concreteType": "...",
                  "name": "..."
                }
              ],
              "profilePicureFileHandleId": "...",
              "summary": "...",
              "teamName": "...",
              "url": "...",
              "userName": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "List of User profiles",
            "items": {
              "$ref": "#/components/schemas/UserProfile"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfUserProfile",
        "type": "object"
      },
      "AttachmentMetadata": {
        "description": "The metadata of a file attached to a Verification Submission",
        "example": {
          "fileName": "...",
          "id": "..."
        },
        "properties": {
          "fileName": {
            "description": "The name of a file",
            "type": "string"
          },
          "id": {
            "description": "The identifier of a file",
            "type": "string"
          }
        },
        "title": "AttachmentMetadata",
        "type": "object"
      },
      "VerificationStateEnum": {
        "description": "The enumeration of possible verification states.",
        "enum": [
          "SUBMITTED",
          "APPROVED",
          "REJECTED",
          "SUSPENDED"
        ],
        "title": "VerificationStateEnum",
        "type": "string"
      },
      "VerificationState": {
        "description": "The state of a verification submission",
        "example": {
          "createdBy": "...",
          "createdOn": "...",
          "notes": "...",
          "reason": "...",
          "state": "APPROVED"
        },
        "properties": {
          "createdBy": {
            "description": "The principal ID of the user who created this object",
            "type": "string"
          },
          "createdOn": {
            "description": "The date and time this object was created",
            "type": "string"
          },
          "notes": {
            "description": "Additional notes that can be set by the ACT team and that is not exposed to the end user.",
            "type": "string"
          },
          "reason": {
            "description": "The reason for putting the verification submission in this state.",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/VerificationStateEnum"
          }
        },
        "title": "VerificationState",
        "type": "object"
      },
      "VerificationSubmission": {
        "description": "User info submitted for verification by Synapse ACT",
        "example": {
          "attachments": [
            {
              "fileName": "...",
              "id": "..."
            },
            {
              "fileName": "...",
              "id": "..."
            }
          ],
          "company": "...",
          "createdBy": "...",
          "createdOn": "...",
          "emails": [
            "...",
            "..."
          ],
          "firstName": "...",
          "id": "...",
          "lastName": "...",
          "location": "...",
          "notificationEmail": "...",
          "orcid": "...",
          "stateHistory": [
            {
              "createdBy": "...",
              "createdOn": "...",
              "notes": "...",
              "reason": "...",
              "state": "SUSPENDED"
            },
            {
              "createdBy": "...",
              "createdOn": "...",
              "notes": "...",
              "reason": "...",
              "state": "SUSPENDED"
            }
          ]
        },
        "properties": {
          "attachments": {
            "description": "Metadata of Files attached to the submission.\nThe list will be emptied after the state is APPROVED or REJECTED.\n",
            "items": {
              "$ref": "#/components/schemas/AttachmentMetadata"
            },
            "type": "array"
          },
          "company": {
            "description": "This person's current affiliation\n",
            "type": "string"
          },
          "createdBy": {
            "description": "The principal ID of the user requesting verification",
            "type": "string"
          },
          "createdOn": {
            "description": "The date and time this object was created",
            "type": "string"
          },
          "emails": {
            "description": "The list of user email addresses registered to this user.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "firstName": {
            "description": "This person's given name (forename)\n",
            "type": "string"
          },
          "id": {
            "description": "The ID of this object",
            "type": "string"
          },
          "lastName": {
            "description": "This person's family name (surname)\n",
            "type": "string"
          },
          "location": {
            "description": "This person's location\n",
            "type": "string"
          },
          "notificationEmail": {
            "description": "The primary (notification) email address registered to this user.",
            "type": "string"
          },
          "orcid": {
            "description": "The user's ORCID URI\n",
            "type": "string"
          },
          "stateHistory": {
            "description": "List of state changes the submission has passed through, ordered by time.\nThe last in the list contains the current state of the submission.\n",
            "items": {
              "$ref": "#/components/schemas/VerificationState"
            },
            "type": "array"
          }
        },
        "title": "VerificationSubmission",
        "type": "object"
      },
      "UserBundle": {
        "description": "JSON schema for UserBundle POJO",
        "example": {
          "ORCID": "...",
          "isACTMember": true,
          "isCertified": true,
          "isVerified": true,
          "userId": "...",
          "userProfile": {
            "RStudioUrl": "...",
            "company": "...",
            "createdOn": "...",
            "displayName": "...",
            "email": "...",
            "emails": [
              "...",
              "..."
            ],
            "etag": "...",
            "firstName": "...",
            "industry": "...",
            "lastName": "...",
            "location": "...",
            "notificationSettings": {
              "markEmailedMessagesAsRead": true,
              "sendEmailNotifications": true
            },
            "openIds": [
              "...",
              "..."
            ],
            "ownerId": "...",
            "position": "...",
            "preferences": [
              {
                "concreteType": "...",
                "name": "..."
              },
              {
                "concreteType": "...",
                "name": "..."
              }
            ],
            "profilePicureFileHandleId": "...",
            "summary": "...",
            "teamName": "...",
            "url": "...",
            "userName": "..."
          },
          "verificationSubmission": {
            "attachments": [
              {
                "fileName": "...",
                "id": "..."
              },
              {
                "fileName": "...",
                "id": "..."
              }
            ],
            "company": "...",
            "createdBy": "...",
            "createdOn": "...",
            "emails": [
              "...",
              "..."
            ],
            "firstName": "...",
            "id": "...",
            "lastName": "...",
            "location": "...",
            "notificationEmail": "...",
            "orcid": "...",
            "stateHistory": [
              {
                "createdBy": "...",
                "createdOn": "...",
                "notes": "...",
                "reason": "...",
                "state": "SUSPENDED"
              },
              {
                "createdBy": "...",
                "createdOn": "...",
                "notes": "...",
                "reason": "...",
                "state": "REJECTED"
              }
            ]
          }
        },
        "properties": {
          "ORCID": {
            "description": "The ORCID ID for the user, if any",
            "type": "string"
          },
          "isACTMember": {
            "description": "true if the user is an ACT member",
            "type": "boolean"
          },
          "isCertified": {
            "description": "true if the user is Certified",
            "type": "boolean"
          },
          "isVerified": {
            "description": "true if the user is Verified",
            "type": "boolean"
          },
          "userId": {
            "description": "The ID of the user described by this bundle",
            "type": "string"
          },
          "userProfile": {
            "$ref": "#/components/schemas/UserProfile"
          },
          "verificationSubmission": {
            "$ref": "#/components/schemas/VerificationSubmission"
          }
        },
        "title": "UserBundle",
        "type": "object"
      },
      "WikiPageKey": {
        "description": "Reference to a WikiPage",
        "example": {
          "ownerObjectId": "...",
          "ownerObjectType": "ORGANIZATION",
          "wikiPageId": "..."
        },
        "properties": {
          "ownerObjectId": {
            "description": "The owner of this page.",
            "type": "string"
          },
          "ownerObjectType": {
            "$ref": "#/components/schemas/ObjectType"
          },
          "wikiPageId": {
            "description": "The ID of the wiki page.",
            "type": "string"
          }
        },
        "title": "WikiPageKey",
        "type": "object"
      },
      "Question": {
        "description": "A single question in a Quiz",
        "example": {
          "concreteType": "...",
          "docLink": "...",
          "helpText": "...",
          "prompt": "...",
          "questionIndex": 12345,
          "reference": {
            "ownerObjectId": "...",
            "ownerObjectType": "MESSAGE",
            "wikiPageId": "..."
          }
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type",
            "type": "string"
          },
          "docLink": {
            "description": "Link to the document that contains information for background reading related to the question.",
            "type": "string"
          },
          "helpText": {
            "description": "A short text that provides a snippet of help to answer the question.",
            "type": "string"
          },
          "prompt": {
            "description": "the user-readable prompt for this question",
            "type": "string"
          },
          "questionIndex": {
            "description": "An index unique in the Quiz, used to refer to this question",
            "type": "integer"
          },
          "reference": {
            "$ref": "#/components/schemas/WikiPageKey"
          }
        },
        "title": "Question",
        "type": "object"
      },
      "QuestionResponse": {
        "description": "The response to a question",
        "example": {
          "concreteType": "...",
          "questionIndex": 12345
        },
        "properties": {
          "concreteType": {
            "description": "Concrete Type.",
            "type": "string"
          },
          "questionIndex": {
            "description": "An index unique in the Quiz, used to refer to the question being answered",
            "type": "integer"
          }
        },
        "title": "QuestionResponse",
        "type": "object"
      },
      "ResponseCorrectness": {
        "description": "A user response and whether it is correct.",
        "example": {
          "isCorrect": true,
          "question": {
            "concreteType": "...",
            "docLink": "...",
            "helpText": "...",
            "prompt": "...",
            "questionIndex": 12345,
            "reference": {
              "ownerObjectId": "...",
              "ownerObjectType": "WIKI",
              "wikiPageId": "..."
            }
          },
          "response": {
            "concreteType": "...",
            "questionIndex": 12345
          }
        },
        "properties": {
          "isCorrect": {
            "description": "Is the response correct?",
            "type": "boolean"
          },
          "question": {
            "$ref": "#/components/schemas/Question"
          },
          "response": {
            "$ref": "#/components/schemas/QuestionResponse"
          }
        },
        "title": "ResponseCorrectness",
        "type": "object"
      },
      "PassingRecord": {
        "description": "A record of whether a given user passed a given test",
        "example": {
          "corrections": [
            {
              "isCorrect": true,
              "question": {
                "concreteType": "...",
                "docLink": "...",
                "helpText": "...",
                "prompt": "...",
                "questionIndex": 12345,
                "reference": {}
              },
              "response": {
                "concreteType": "...",
                "questionIndex": 12345
              }
            },
            {
              "isCorrect": true,
              "question": {
                "concreteType": "...",
                "docLink": "...",
                "helpText": "...",
                "prompt": "...",
                "questionIndex": 12345,
                "reference": {}
              },
              "response": {
                "concreteType": "...",
                "questionIndex": 12345
              }
            }
          ],
          "passed": true,
          "passedOn": "...",
          "quizId": 12345,
          "responseId": 12345,
          "score": 12345,
          "userId": "..."
        },
        "properties": {
          "corrections": {
            "description": "For each response, whether it was correct",
            "items": {
              "$ref": "#/components/schemas/ResponseCorrectness"
            },
            "type": "array"
          },
          "passed": {
            "description": "Whether the user passed the given test",
            "type": "boolean"
          },
          "passedOn": {
            "description": "Date/time when the user passed the test (omitted if the user has not passed)",
            "type": "string"
          },
          "quizId": {
            "description": "The id of the quiz",
            "type": "integer"
          },
          "responseId": {
            "description": "The id of the user's response\n",
            "type": "integer"
          },
          "score": {
            "description": "The score the user received on the test",
            "type": "integer"
          },
          "userId": {
            "description": "The principal id of the user",
            "type": "string"
          }
        },
        "title": "PassingRecord",
        "type": "object"
      },
      "PaginatedTeamIds": {
        "description": "Container for a page of team IDs.",
        "example": {
          "nextPageToken": "...",
          "teamIds": [
            "...",
            "..."
          ]
        },
        "properties": {
          "nextPageToken": {
            "description": "Token that can be used to get the next page. Null if there are no more results.",
            "type": "string"
          },
          "teamIds": {
            "description": "The requested team IDs.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "PaginatedTeamIds",
        "type": "object"
      },
      "UserGroup": {
        "description": "JSON schema for UserGroup POJO",
        "example": {
          "creationDate": "...",
          "etag": "...",
          "id": "...",
          "isIndividual": true,
          "uri": "..."
        },
        "properties": {
          "creationDate": {
            "description": "The date this user or group was created.",
            "type": "string"
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          },
          "id": {
            "description": "The id of either the user or group.",
            "type": "string"
          },
          "isIndividual": {
            "description": "True if this is a user, false if it is a group",
            "type": "boolean"
          },
          "uri": {
            "description": "Uri",
            "type": "string"
          }
        },
        "title": "UserGroup",
        "type": "object"
      },
      "PaginatedResultsOfUserGroup": {
        "description": "JSON schema for UserGroup POJO",
        "example": {
          "results": [
            {
              "creationDate": "...",
              "etag": "...",
              "id": "...",
              "isIndividual": true,
              "uri": "..."
            },
            {
              "creationDate": "...",
              "etag": "...",
              "id": "...",
              "isIndividual": true,
              "uri": "..."
            }
          ],
          "totalNumberOfResults": 12345
        },
        "properties": {
          "results": {
            "description": "Page of user groups",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "type": "array"
          },
          "totalNumberOfResults": {
            "$ref": "#/components/schemas/TotalNumberOfResults"
          }
        },
        "title": "PaginatedResultsOfUserGroup",
        "type": "object"
      },
      "UserGroupHeaderResponsePage": {
        "description": "A single page of a users/groups info query response.",
        "example": {
          "children": [
            {
              "displayName": "...",
              "email": "...",
              "firstName": "...",
              "isIndividual": true,
              "lastName": "...",
              "ownerId": "...",
              "userName": "..."
            },
            {
              "displayName": "...",
              "email": "...",
              "firstName": "...",
              "isIndividual": true,
              "lastName": "...",
              "ownerId": "...",
              "userName": "..."
            }
          ],
          "prefixFilter": "...",
          "totalNumberOfResults": 12345
        },
        "properties": {
          "children": {
            "description": "The list of children that match the requested concept.",
            "items": {
              "$ref": "#/components/schemas/UserGroupHeader"
            },
            "type": "array"
          },
          "prefixFilter": {
            "description": "The prefix filter used to generate this result.",
            "type": "string"
          },
          "totalNumberOfResults": {
            "description": "Total number of results",
            "type": "number",
            "deprecated": true
          }
        },
        "title": "UserGroupHeaderResponsePage",
        "type": "object"
      },
      "AliasList": {
        "description": "List of principal aliases",
        "example": {
          "list": [
            "...",
            "..."
          ]
        },
        "properties": {
          "list": {
            "description": "List of principal aliases",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "AliasList",
        "type": "object"
      },
      "UserGroupHeaderResponse": {
        "description": "A list of UserGroupHeaders.",
        "example": {
          "list": [
            {
              "displayName": "...",
              "email": "...",
              "firstName": "...",
              "isIndividual": true,
              "lastName": "...",
              "ownerId": "...",
              "userName": "..."
            },
            {
              "displayName": "...",
              "email": "...",
              "firstName": "...",
              "isIndividual": true,
              "lastName": "...",
              "ownerId": "...",
              "userName": "..."
            }
          ]
        },
        "properties": {
          "list": {
            "description": "The list of UserGroupHeaders",
            "items": {
              "$ref": "#/components/schemas/UserGroupHeader"
            },
            "type": "array"
          }
        },
        "title": "UserGroupHeaderResponse",
        "type": "object"
      },
      "ListWrapperOfUserProfile": {
        "description": "List of User Profiles.",
        "example": {
          "effectiveSchema": "...",
          "list": [
            {
              "RStudioUrl": "...",
              "company": "...",
              "createdOn": "...",
              "displayName": "...",
              "email": "...",
              "emails": [
                "...",
                "..."
              ],
              "etag": "...",
              "firstName": "...",
              "industry": "...",
              "lastName": "...",
              "location": "...",
              "notificationSettings": {
                "markEmailedMessagesAsRead": true,
                "sendEmailNotifications": true
              },
              "openIds": [
                "...",
                "..."
              ],
              "ownerId": "...",
              "position": "...",
              "preferences": [
                {
                  "concreteType": "...",
                  "name": "..."
                },
                {
                  "concreteType": "...",
                  "name": "..."
                }
              ],
              "profilePicureFileHandleId": "...",
              "summary": "...",
              "teamName": "...",
              "url": "...",
              "userName": "..."
            },
            {
              "RStudioUrl": "...",
              "company": "...",
              "createdOn": "...",
              "displayName": "...",
              "email": "...",
              "emails": [
                "...",
                "..."
              ],
              "etag": "...",
              "firstName": "...",
              "industry": "...",
              "lastName": "...",
              "location": "...",
              "notificationSettings": {
                "markEmailedMessagesAsRead": true,
                "sendEmailNotifications": true
              },
              "openIds": [
                "...",
                "..."
              ],
              "ownerId": "...",
              "position": "...",
              "preferences": [
                {
                  "concreteType": "...",
                  "name": "..."
                },
                {
                  "concreteType": "...",
                  "name": "..."
                }
              ],
              "profilePicureFileHandleId": "...",
              "summary": "...",
              "teamName": "...",
              "url": "...",
              "userName": "..."
            }
          ]
        },
        "properties": {
          "list": {
            "description": "List of UserProfiles.",
            "items": {
              "$ref": "#/components/schemas/UserProfile"
            },
            "type": "array"
          }
        },
        "title": "ListWrapperOfUserProfile",
        "type": "object"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}